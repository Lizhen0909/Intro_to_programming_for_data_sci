[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to programming for data science",
    "section": "",
    "text": "Preface\nThis book is currently being written for the course STAT201."
  },
  {
    "objectID": "Introduction to Jupyter Notebooks and programming in python.html#installation",
    "href": "Introduction to Jupyter Notebooks and programming in python.html#installation",
    "title": "1  Introduction to Jupyter Notebooks and programming in python",
    "section": "1.1 Installation",
    "text": "1.1 Installation\nAnaconda: If you are new to python, we recommend downloading the Anaconda installer and following the instructions for installation. Once installed, we’ll use the Jupyter Notebook interface to write code.\nQuarto: We’ll use Quarto to publish the **.ipynb* file containing text, python code, and the output. Download and install Quarto from here."
  },
  {
    "objectID": "Introduction to Jupyter Notebooks and programming in python.html#jupyter-notebook",
    "href": "Introduction to Jupyter Notebooks and programming in python.html#jupyter-notebook",
    "title": "1  Introduction to Jupyter Notebooks and programming in python",
    "section": "1.2 Jupyter notebook",
    "text": "1.2 Jupyter notebook\n\n1.2.1 Introduction\nJupyter notebook is an interactive platform, where you can write code and text, and make visualizations. You can access Jupyter notebook from the Anaconda Navigator, or directly open the Jupyter Notebook application itself. It should automatically open up in your default browser. The figure below shows a Jupyter Notebook opened with Google Chrome. This page is called the landing page of the notebook.\n\n\n\n\n\nTo create a new notebook, click on the New button and select the Python 3 option. You should see a blank notebook as in the figure below.\n\n\n\n\n\n\n\n1.2.2 Writing and executing code\nCode cell: By default, a cell is of type Code, i.e., for typing code, as seen as the default choice in the dropdown menu below the Widgets tab. Try typing a line of python code (say, 2+3) in an empty code cell and execute it by pressing Shift+Enter. This should execute the code, and create an new code cell. Pressing Ctlr+Enter for Windows (or Cmd+Enter for Mac) will execute the code without creating a new cell.\nCommenting code in a code cell: Comments should be made while writing the code to explain the purpose of the code or a brief explanation of the tasks being performed by the code. A comment can be added in a code cell by preceding it with a # sign. For example, see the comment in the code below.\nWriting comments will help other users understand your code. It is also useful for the coder to keep track of the tasks being performed by their code.\n\n#This code adds 3 and 5\n3+5\n\n8\n\n\nMarkdown cell: Although a comment can be written in a code cell, a code cell cannot be used for writing headings/sub-headings, and is not appropriate for writing lengthy chunks of text. In such cases, change the cell type to Markdown from the dropdown menu below the Widgets tab. Use any markdown cheat sheet found online, for example, this one to format text in the markdown cells.\nGive a name to the notebook by clicking on the text, which says ‘Untitled’.\n\n\n1.2.3 Saving and loading notebooks\nSave the notebook by clicking on File, and selecting Save as, or clicking on the Save and Checkpoint icon (below the File tab). Your notebook will be saved as a file with an exptension ipynb. This file will contain all the code as well as the outputs, and can be loaded and edited by a Jupyter user. To load an existing Jupyter notebook, navigate to the folder of the notebook on the landing page, and then click on the file to open it.\n\n\n1.2.4 Rendering notebook as HTML\nWe’ll use Quarto to print the **.ipynb* file as HTML. Check the procedure for rendering a notebook as HTML here. You have several options to format the file.\nYou will need to open the command prompt, navigate to the directory containing the file, and use the command: quarto render filename.ipynb --to html."
  },
  {
    "objectID": "Introduction to Jupyter Notebooks and programming in python.html#in-class-exercise",
    "href": "Introduction to Jupyter Notebooks and programming in python.html#in-class-exercise",
    "title": "1  Introduction to Jupyter Notebooks and programming in python",
    "section": "1.3 In-class exercise",
    "text": "1.3 In-class exercise\n\nCreate a new notebook.\nSave the file as In_class_exercise_1.\nGive a heading to the file - First HTML file.\nPrint Today is day 1 of my programming course.\nCompute and print the number of seconds in a day.\n\nThe HTML file should look like the picture below."
  },
  {
    "objectID": "Introduction to Jupyter Notebooks and programming in python.html#python-libraries",
    "href": "Introduction to Jupyter Notebooks and programming in python.html#python-libraries",
    "title": "1  Introduction to Jupyter Notebooks and programming in python",
    "section": "1.4 Python libraries",
    "text": "1.4 Python libraries\nThere are several built-in functions in python like print(), abs(), max(), sum() etc., which do not require importing any library. However, these functions will typically be insufficient for a analyzing data. Some of the popular libraries in data science and their primary purposes are as follows:\n\nNumPy: Performing numerical operations and efficiently storing numerical data.\nPandas: Reading, cleaning and manipulating data.\nMatplotlib, Seaborn: Visualizing data.\nSciPy: Performing scientific computing such as solving differential equations, optimization, statistical tests, etc.\nScikit-learn: Data pre-processing and machine learning, with a focus on prediction.\nStatsmodels: Developing statistical models with a focus on inference\n\nA library can be imported using the import keyword. For example, a NumPy library can be imported as:\n\nimport numpy as np\n\nUsing the as keyboard, the NumPy library has been given the name np. All the functions and attributes of the library can be called using the ‘np.’ prefix. For example, let us generate a sequence of whole numbers upto 10 using the NumPy function arange():\n\nnp.arange(8)\n\narray([0, 1, 2, 3, 4, 5, 6, 7])\n\n\nGenerating random numbers is very useful in python for performing simulations (we’ll see in later chapters). The library random is used to generate random numbers such as integers, real numbers based on different probability distributions, etc.\nBelow is an example of using the randint() function of the library for generating random numbers in [a, b], where a and b are integers.\n\nimport random as rm\nrm.randint(5,10) #This will generate a random number in [5,10]\n\n7"
  },
  {
    "objectID": "Introduction to Jupyter Notebooks and programming in python.html#debugging-and-errors",
    "href": "Introduction to Jupyter Notebooks and programming in python.html#debugging-and-errors",
    "title": "1  Introduction to Jupyter Notebooks and programming in python",
    "section": "1.5 Debugging and errors",
    "text": "1.5 Debugging and errors\nRead sections 1.3 - 1.6 from http://openbookproject.net/thinkcs/python/english3e/way_of_the_program.html"
  },
  {
    "objectID": "Introduction to Jupyter Notebooks and programming in python.html#terms-used-in-programming",
    "href": "Introduction to Jupyter Notebooks and programming in python.html#terms-used-in-programming",
    "title": "1  Introduction to Jupyter Notebooks and programming in python",
    "section": "1.6 Terms used in programming",
    "text": "1.6 Terms used in programming\nRead section 1.11 from http://openbookproject.net/thinkcs/python/english3e/way_of_the_program.html"
  },
  {
    "objectID": "Variable_expressions_statements.html#data-types",
    "href": "Variable_expressions_statements.html#data-types",
    "title": "2  Variables, expressions and statements",
    "section": "2.1 Data types",
    "text": "2.1 Data types\nSome of the commonly used objects in python are numbers - integer and float, strings and bool (true/false). The data type of the object can be identified using the in-built python function type(). For example, see the following objects and their types:\n\ntype(4)\n\nint\n\n\n\ntype(4.4)\n\nfloat\n\n\n\ntype('4')\n\nstr\n\n\n\ntype(True)\n\nbool\n\n\n\n2.1.1 Practice exercise 1\nWhat is the datatype of the following objects?\n\n‘This is False’\n“This is a number”\n1000\n65.65\nFalse"
  },
  {
    "objectID": "Variable_expressions_statements.html#constants-and-variables",
    "href": "Variable_expressions_statements.html#constants-and-variables",
    "title": "2  Variables, expressions and statements",
    "section": "2.2 Constants and Variables",
    "text": "2.2 Constants and Variables\nA constant is a value that cannot be changed. It may be a number, string or any other datatype. Below are some examples of printing a constant:\n\nprint(4)\n\n4\n\n\n\nprint(\"This is a string and also a constant\")\n\nThis is a string and also a constant\n\n\n\nprint(False)\n\nFalse\n\n\nA variable is an object whose value can be changed. For example, consider the object below:\n\nx = 2\n\nIn the above code the variable x has been assigned a value of 2. However, the value of x can be changed:\n\nx = 3\nprint(\"x =\", x)\n\nx = 3\n\n\nThus, the object x in the above code is a variable that refers to a memory location storing the constant value of 3.\n\n2.2.1 Variable names\nThere are a some rules for naming variables:\n\nA variable name must start with a letter or underscore _\nA variable name may consist of letters, numbers, and underscores only\n\nFor example, some of the valid variable names are *salary, text10, _varname. Some of the invalid variable names are salary% 10text, varname)*\n\nVariable names are case-sensitive. For example, the variable Varname will be different from varname.\nThere are certain reserved words in python that have some meaning, and cannot be used as variable names. These reserved words are:\n\n\n\n\n\n\nBest coding practice: Variables should be named such that they are informative of the value they are storing. For example, suppose we wish to compute the income tax a person has to pay based on their income and tax rate. Below are two ways of naming variables to do this computation:\n\nincome = 80000\ntax_rate = 0.15\nprint(\"Income tax = \",income*tax_rate)\n\nIncome tax =  12000.0\n\n\n\na = 80000\nb = 0.15\nprint(\"Income tax = \",a*b)\n\nIncome tax =  12000.0\n\n\nThe former code chuck is better than the latter one as it makes the code easy to read and understand.\n\n\n2.2.2 Practice exercise 2\n\n2.2.2.1 Variables or constants?\nIn the statements below, classify the objects as variables or constants?\n\nvalue = “name”\nconstant = 7\nanother_const = “variable”\nTrue_False = True\n\n\n\n2.2.2.2 Valid variable names?\nWhich of the following variable names are valid?\n\nvar.name\nvar9name\n_varname\nvarname*"
  },
  {
    "objectID": "Variable_expressions_statements.html#assignment-statements",
    "href": "Variable_expressions_statements.html#assignment-statements",
    "title": "2  Variables, expressions and statements",
    "section": "2.3 Assignment statements",
    "text": "2.3 Assignment statements\nValues are assigned to variables with the assignment statement (=). An assignment statement may have a constant or an expression on the right hand side of the (=) sign, and a variable name on the left hand side.\nFor example, the code lines below are assignment statements\n\nvar = 2\nvar = var + 3"
  },
  {
    "objectID": "Variable_expressions_statements.html#expressions",
    "href": "Variable_expressions_statements.html#expressions",
    "title": "2  Variables, expressions and statements",
    "section": "2.4 Expressions",
    "text": "2.4 Expressions\nThe mathematical operations and their corresponding operators are as follows:\n\nExponent: **\nRemainder: %\nMultiplication: *\nDivision: /\nAddition: +\nSubtraction: -\n\nThe operators above are in decreasing order of precedence, i.e., an exponent will be evaluated before a remainder, a remainder will be evaluated before a multiplication, and so on.\nFor example, check the precedence of operators in the computation of the following expression:\n\n2+3%4*2\n\n8\n\n\nIn case an expression becomes too complicated, use of parenthesis may help clarify the precendence of operators. Parenthesis takes precendence over all the operators listed above. For example, in the expression below, the terms within parenthesis are evaluated first:\n\n2+3%(4*2)\n\n5\n\n\n\n2.4.1 Practice exercise 3\nWhich of the following statements is an assignment statement:\n\nx = 5\nprint(x)\ntype(x)\nx + 4\n\nWhat will be the result of the following expression:\n\n1%2**3*2+1"
  },
  {
    "objectID": "Variable_expressions_statements.html#converting-datatypes",
    "href": "Variable_expressions_statements.html#converting-datatypes",
    "title": "2  Variables, expressions and statements",
    "section": "2.5 Converting datatypes",
    "text": "2.5 Converting datatypes\nSometimes a value may have a datatype that is not suitable for using it. For example, consider the variable called annual_income in the code below:\n\nannual_income = \"80000\"\n\nSuppose we wish to divide annual_income by 12 to get the monthly income. We cannot use the variable monthly_income directly as its datatype is a string and not a number. Thus, numerical operations cannnot be performed on the variable annual_income.\nWe’ll need to convert annual_income to an integer. For that we will use the python’s in-built int() function:\n\nannual_income = int(annual_income)\nmonthly_income = annual_income/12\nprint(\"monthly income = \", monthly_income)\n\nmonthly income =  6666.666666666667\n\n\nSimilarly, datatypes can be converted from one type to another using in-built python functions as shown below:\n\n#Converting integer to string\nstr(9)\n\n'9'\n\n\n\n#Converting string to float\nfloat(\"4.5\")\n\n4.5\n\n\n\n#Converting bool to integer\nint(True)\n\n1\n\n\nSometimes, conversion of a value may not be possible. For example, it is not possible to convert the variable greeting defined below to a number:\n\ngreeting = \"hello\"\n\nHowever, in some cases, mathematical operators such as + and * can be applied on strings. The operator + concatenates multiple strings, while the operator * can be used to concatenate a string to itself multiple times:\n\n\"Hi\" + \" there!\"\n\n'Hi there!'\n\n\n\n\"5\" + '3'\n\n'53'\n\n\n\n\"5\"*8\n\n'55555555'"
  },
  {
    "objectID": "Variable_expressions_statements.html#user-input",
    "href": "Variable_expressions_statements.html#user-input",
    "title": "2  Variables, expressions and statements",
    "section": "2.6 User input",
    "text": "2.6 User input\nPython’s in-built input() function can be used to accept an input from the user. For example, suppose we wish the user to onput their age:\n\nage = input(\"Enter your age:\")\n\nEnter your age:34\n\n\nThe entered value is stored in the variable age and can be used for computation.\n\n2.6.1 Practice exercise 4\nAsk the user to input their year of birth, and print their age."
  },
  {
    "objectID": "Variable_expressions_statements.html#commenting-code",
    "href": "Variable_expressions_statements.html#commenting-code",
    "title": "2  Variables, expressions and statements",
    "section": "2.7 Commenting code",
    "text": "2.7 Commenting code\nThe # symbol can be used to comment the code. Anything after the # sign is ignored by python. Commenting a code may have several purposes, such as:\n\nDescribe what is going to happen in a sequence of code\nDocument who wrote the code or other ancillary information\nTurn off a line of code - perhaps temporarily\n\nFor example, below is code with a comment to describe the purpose of the code:\n\n#Computing number of hours of lecture in this course\nprint(\"Total lecture hours of STAT201=\",10*3*(5/6))\n\nTotal lecture hours of STAT201= 25.0\n\n\n\n2.7.1 Practice exercise 5\nWhich of the following lines is a comment:\n\n#this is a comment\n##this may be a comment\nA comment#"
  },
  {
    "objectID": "Variable_expressions_statements.html#programming-errors",
    "href": "Variable_expressions_statements.html#programming-errors",
    "title": "2  Variables, expressions and statements",
    "section": "2.8 Programming errors",
    "text": "2.8 Programming errors\nThere are 3 types of errors that can occur in a program - syntax errors, run-time errors, and semantic errors.\n\n2.8.1 Syntax errors\nSyntax errors occur if the code is written in a way that it does not comply with the rules / standards / laws of the language (python in this case). For example, suppose a values is assigned to a variable as follows:\n\n9value = 2\n\nThe above code when executed will indicate a syntax error as it violates the rule that a variable name must not start with a number.\n\n\n2.8.2 Run-time errors\nRun-time errors occur when a code is syntactically correct, but there are other issues with the code such as:\n\nMisspelled or incorrectly capitalized variable and function names\nAttempts to perform operations (such as math operations) on data of the wrong type (ex. attempting to subtract two variables that hold string values)\nDividing by zero\nAttempts to use a type conversion function such as int on a value that can’t be converted to an int\n\nFor example, suppose a number is multipled as follws:\n\nmultiplication_result = x * 4\n\nThe above code is syntactically correct. However, it will generate an error as the variable x has not been defined as a number.\n\n\n2.8.3 Semantic errors\nSemantic errors occur when the code executes without an error being indicated by the compiler. However, it does not work as inteded by the user. For example, consider the following code of mutiplying the number 6 by 3:\n\nx = '6'\nx * 3\n\n'666'\n\n\nIf it was intended to multiply the number 6, then the variable x should have been defined as x=6 so that x has a value of type integer. However, in the above code 6 is a string type value. When a string is multiplied by an integer, say n, it concatenates with itself n times.\n\n\n2.8.4 Practice exercise 6\nSuppose we wish to compute tax using the income and the tax rate. Identify the type of error from amongst syntax error, semantic error and run-time error in the following pieces of code.\n\nincome = 2000\ntax = .08 * Income\nprint(\"tax on\", income, \"is:\", tax)\n\n\nincome = 2000\ntax = .08 x income\nprint(\"tax on\", income, \"is:\", tax)\n\n\nincome = 2000\ntax = .08 ** income\nprint(\"tax on\", income, \"is:\", tax)"
  },
  {
    "objectID": "Variable_expressions_statements.html#practice-exercise-7",
    "href": "Variable_expressions_statements.html#practice-exercise-7",
    "title": "2  Variables, expressions and statements",
    "section": "2.9 Practice exercise 7",
    "text": "2.9 Practice exercise 7\nThe formula for computing final amount if one is earning compund interest is given by: \\[A = P\\bigg(1+\\frac{r}{n}\\bigg)^{nt},\\]\nwhere:\nP = Principal amount (initial investment),\nr = annual nominal interest rate,\nn = number of times the interest is computed per year,\nt = number of years\nWrite a Python program that assigns the principal amount of $10000 to variable P, assign to n the value 12, and assign to r the interest rate of 8%. Then have the program prompt the user for the number of years t that the money will be compounded for. Calculate and print the final amount after t years.\nWhat is the amount if the user enters t as 4 years?"
  },
  {
    "objectID": "Control flow incomplete.html#conditonal-execution",
    "href": "Control flow incomplete.html#conditonal-execution",
    "title": "3  Control flow statements",
    "section": "3.1 Conditonal execution",
    "text": "3.1 Conditonal execution\nThe first type of control flow satement is if-elif-else. This statement helps with conditional execution of code, i.e., the piece of code to be executed is selected based on certain condition(s).\n\n3.1.1 Comparison operators\nFor testing if conditions are true or false, first we need to learn the operators that can be used for comparison. For example, suppose we want to check if two objects are equal, we use the == operator:\n\n5==6\n\nFalse\n\n\n\nx = \"hi\"\ny = \"hi\"\nx==y\n\nTrue\n\n\nBelow are the python comparison operators and their meanings.\n\n\n\nPython code\nMeaning\n\n\n\n\nx==y\nProduce True if … x is equal to y\n\n\nx != y\n… x is not equal to y\n\n\nx > y\n… x is greater than y\n\n\nx < y\n… x is less than y\n\n\nx >= y\n… x is greater than or equal to y\n\n\nx <= y\n… x is less than or equal to y\n\n\n\n\n\n3.1.2 Logical operators\nSometimes we may need to check multiple conditions simultaneously. The logical operator and is used to check if all the conditions are true, while the logical operator or is used to check if either of the conditons is true.\n\n#Checking if both the conditions are true using 'and'\n5==5 and 67==68\n\nFalse\n\n\n\n#Checking if either condition is true using 'or'\nx = 6; y = 90\nx<0 or y>50\n\nTrue\n\n\n\n\n3.1.3 if-elif-else statement\nThe if-elif-else statements can check several conditions, and execute the code corresponding to the condition that is true. Note that there can be as many elif statements as required.\nSyntax: Python uses indentation to identify the code to be executed if a condition is true. All the code indented within a condition is executed if the condition is true.\nExample: Input an integer. Print whether it is positive or negative.\n\nnumber = input(\"Enter a number:\")  #Input an integer\nnumber_integer = int(number)       #Convert the integer to 'int' datatype\nif number_integer>0:               #Check if the integer is positive\n    print(\"Number is positive\")\nelse:\n    print(\"Number is negative\")\n\nEnter a number:-9\nNumber is negative\n\n\nIn the above code, note that anything entered by the user is taken as a string datatype by python. However, a string cannot be positive or negative. So, we converted the number input by the user to integer to check if it was positive or negative.\nThere may be multiple statements to be executed if a condition is true. See the example below.\nExample: Input a number. Print whether it is positive, negative or zero. If it is negative, print its absolute value.\n\nnumber = input(\"Enter a number:\")\nnumber_integer = int(number)\nif number_integer>0:\n    print(\"Number is positive\")\nelif number_integer==0:\n    print(\"Number is zero\")\nelse:\n    print(\"Number is negative\")\n    print(\"Absolute value of number = \", abs(number_integer))\n\nEnter a number:0\nNumber is zero\n\n\n\n\n3.1.4 Practice exercise 1\nInput a number. Print whether its odd or even.\n\n\n3.1.5 Try-except\nIf we suspect that some lines of code may produce an error, we can put them in a try block, and if an error does occur, we can use the except block to instead execute an alternative piece of code. This way the program will not stop if an error occurs within the try block, and instead will be directed to execute the code within the except block.\nExample: Input an integer from the user. If the user inputs a valid integer, print whether it is a multiple of 3. However, if the user does not input a valid integer, print a message saying that the input is invalid.\n\nnum = input(\"Enter an integer:\")\n\n#The code lines within the 'try' block will execute as long as they run without error  \ntry:\n    #Converting the input to integer, as user input is a string\n    num_int = int(num)  \n    \n    #checking if the integer is a multiple of 3\n    if num_int%3==0:            \n        print(\"Number is a multiple of 3\")\n    else:\n        print(\"Number is not a multiple of 3\")\n        \n#The code lines within the 'except' block will execute only if the code lines within the 'try' block throw an error        \nexcept:\n    print(\"Input must be an integer\")\n\nEnter an integer:hi\nInput must be an integer\n\n\n\n\n3.1.6 Practice exercise 2\n\n3.1.6.1 \nAsk the user to enter their exam score. Print the grade based on their score as follows:\n\n\n\nScore\nGrade\n\n\n\n\n(90,100]\nA\n\n\n(80,90]\nB\n\n\n[0,80]\nC\n\n\n\nIf the user inputs a score which is not a number, print “Exam score must be a number”. If the input is a number, but not in [0,100], print “Exam score must be in [0, 100]”.\n\n\n3.1.6.2 \nNested if-elif-else statements: This question will lead you to create nested if statements, i.e., an if statement within another if statement.\nThink of a number in [1,5]. Ask the user to guess the number.\n\nIf the user guesses the number correctly, print “Correct in the first attempt!”, and stop the program. Otherwise, print “Incorrect! Try again” and give them another chance to guess the number.\nIf the user guesses the number correctly in the second attempt, print “Correct in the second attempt”, otherwise print “Incorrect in both the attempts, the correct number is:”, and print the correct number."
  },
  {
    "objectID": "Control flow incomplete.html#loops",
    "href": "Control flow incomplete.html#loops",
    "title": "3  Control flow statements",
    "section": "3.2 Loops",
    "text": "3.2 Loops\nWith loops, a piece of code can be executed repeatedly for a fixed number of times or until a condition is satistified.\n\n3.2.1 for loop\nWith a for loop, a piece of code is executed a fixed number of times.\nWe typically use for loops with an in-built python function called range() that supports for loops. Below is its description.\nrange(): The range() function returns a sequence of evenly-spaced integer values. It is commonly used in for loops to define the sequence of elements over which the iterations are performed.\nBelow is an example where the range() function is used to create a sequence of whole numbers upto 10. Ignore the list() function in the code below, as it will be introduced later.\n\nprint(list(range(10)))\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\nNote that the last element is one less than the integer specified in the range() function.\nUsing the range() function, the for loop can iterate over a sequence of numbers. See the example below.\nExample: Print the first n elements of the Fibonacci sequence, where n is an integer input by the user, such that n>2. In a fibonacci sequence, each number is the sum of the preceding two numbers, and the sequence starts from 0,1. The sequence is as follows:\n0,1,1,2,3,5,8,13,….\n\nn=int(input(\"Enter number of elements:\"))\n\n#Initializing the sequence to start from 0, 1\nn1=0;n2=1\n\n#Printing the first two numbers of the sequence\nprint(n1)\nprint(n2)\n\nfor i in range(n-2):  #Since two numbers of the sequence are already printed, n-2 numbers are required\n    \n    #Computing the next number of the sequence as the summation of the previous two numbers\n    n3 = n1+n2\n    print(n3)\n    \n    #As 'n3' is already printed, it is no longer the next number of the sequence. \n    #Thus, we move the values of the variables n1 and n2 one place to the right to compute the next number of the sequence.\n    n1 = n2\n    n2 = n3  \n    \nprint(\"These are the first\", n, \"elements of the fibonacci series\")\n\nEnter number of elements:6\n0\n1\n1\n2\n3\n5\nThese are the first 6 elements of the fibonacci series\n\n\nAs in the if-elif-else statement, the for loop uses identation to indicate the piece of code to be run repeatedly.\nNote that we have used an in-built python function\n\n\n3.2.2 while loop\nWith a while loops, a piece of code is executed repeatedly until certain condition(s) hold.\nExample: Print all the elements of the Fibonacci sequence less than n, where n is an integer input by the user, such that n>2. In a fibonacci sequence, each number is the sum of the preceding two numbers, and the sequence starts from 0,1. The sequence is as follows:\n0,1,1,2,3,5,8,13,….\n\nn=int(input(\"Enter the value of n:\"))\n\n#Initializing the sequence to start from 0, 1\nn1=0;n2=1\n\n#Printing the first number of the sequence\nprint(n1)\n\nwhile n2<n:\n    \n    #Print the next number of the sequence\n    print(n2)\n    \n    #Comptuing the next number of the sequence as the summation of the previous two numbers\n    n3 = n1+n2\n    \n    #As n2 is already printed, assigning n2 to n3, so that the next number of the sequence (i.e., currently n3) is printed if the program enters the loop again\n    #Assigning n1 to n2 as n1 has already been used to compute the next number of the seqeunce (i.e., currently n3). \n    n1 = n2\n    n2 = n3  \nprint(\"These are all the elements of the fibonacci series less than\", n)\n\nEnter the value of n:50\n0\n1\n1\n2\n3\n5\n8\n13\n21\n34\nThese are all the elements of the fibonacci series less than 50\n\n\n\n\n3.2.3 Practice exercise 3\n\n3.2.3.1 \nWrite a program that identifies whether a number input by the user is prime or not.\n\n\n3.2.3.2 \nUpdate the program above to print the prime numbers starting from 2, and less than n where n is a positive integer input by the user."
  },
  {
    "objectID": "Control flow incomplete.html#break-statement",
    "href": "Control flow incomplete.html#break-statement",
    "title": "3  Control flow statements",
    "section": "3.3 break statement",
    "text": "3.3 break statement\nThe break statement is used to unconditionally exit the innermost loop.\nFor example, suppose we need to keep asking the user to input year of birth and compute the corresponding age, until the user enters 1900 as the year of birth.\n\n#The loop will continue to run indefinitely as the condition 'True' is always true\nwhile True:\n    year = int(input(\"Enter year of birth:\"))\n    if year==1900:\n        break        #If the user inputs 1900, then break out of the loop\n    else:\n        print(\"Age = \",2022-year)    #Otherwise compute and print the age\n\nEnter year of birth:1987\nAge =  35\nEnter year of birth:1995\nAge =  27\nEnter year of birth:2001\nAge =  21\nEnter year of birth:1900\n\n\n\n3.3.1 Practice exercise 4\nWrite a program that finds and prints the largest factor of a number input by the user. Check the output if the user inputs 133."
  },
  {
    "objectID": "Control flow incomplete.html#continue-statement",
    "href": "Control flow incomplete.html#continue-statement",
    "title": "3  Control flow statements",
    "section": "3.4 continue statement",
    "text": "3.4 continue statement\nThe continue statement is used to continue with the next iteration of the loop without executing the lines of code below it.\nFor example, consider the following code:\n\nfor i in range(10):\n    if i%2==0:\n        continue\n    print(i)\n\n1\n3\n5\n7\n9\n\n\nWhen the control flow reads the statement continue, it goes back to the beginning of the for loop, and ignores the lines of code below the statement.\n\n3.4.1 Practice exercise 5:\nWrite a program that asks the user the question, “How many stars are in the Milky Way (in billions)?”. If the user answers 100, the program should print correct, and stop. However, if the user answers incorrectly, the program should print “incorrect”, and ask them if they want to try again. The program should continue to run until the user answers correctly, or they want to stop trying."
  },
  {
    "objectID": "Control flow incomplete.html#loops-with-strings",
    "href": "Control flow incomplete.html#loops-with-strings",
    "title": "3  Control flow statements",
    "section": "3.5 Loops with strings",
    "text": "3.5 Loops with strings\nLoops can be used to iterate over a string, just like we used them to iterate over a sequence of integers.\nConsider the following string:\n\nsentence = \"She sells sea shells on the sea shore\"\n\nThe \\(i^{th}\\) character of the string can be retrieved by its index. For example, the first character of the string sentence is:\n\nsentence[0]\n\n'S'\n\n\nSlicing a string:\nA part of the string can be sliced by passing the starting index (say start) and the stopping index (say stop) as start:stop to the index operator []. This is called slicing a string. For a string S, the characters starting from the index start upto the index stop, but not including stop, can be sliced as S[start:stop].\nFor example, the slice of the string sentence from index 4 to index 9, but not including 9 is:\n\nsentence[4:9]\n\n'sells'\n\n\nExample:\nInput a string, and count and print the number of “t”s.\n\nstring = input(\"Enter a sentence:\")\n\n#Initializing a variable 'count_t' which will store the number of 't's in the string\ncount_t = 0\n\n#Iterating over the entire length of the string. \n#The length of the string is given by the len() function\nfor i in range(len(string)):\n    \n    #If the ith character of the string is 't', then we count it\n    if string[i]=='t':\n        count_t = count_t+1\n\nprint(\"Number of 't's in the string = \",count_t)\n\nEnter a sentence:Getting a tatto is not a nice experience\nNumber of 't's in the string =  6\n\n\n\n3.5.1 Practice exercise 6\nWrite a program that asks the user to input a string, and print the number of “the”s in the string."
  },
  {
    "objectID": "Datasets.html",
    "href": "Datasets.html",
    "title": "Appendix A — Datasets",
    "section": "",
    "text": "Datasets used in the book can be found here"
  }
]