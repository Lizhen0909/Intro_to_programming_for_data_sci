[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to programming for data science",
    "section": "",
    "text": "This book is currently being written for the course STAT201."
  },
  {
    "objectID": "Introduction to Jupyter Notebooks and programming in python.html",
    "href": "Introduction to Jupyter Notebooks and programming in python.html",
    "title": "1  Introduction to Jupyter Notebooks and programming in python",
    "section": "",
    "text": "This chapter is a very brief introduction to python and Jupyter notebooks. We only discuss the content relevant for applying python to analyze data."
  },
  {
    "objectID": "Introduction to Jupyter Notebooks and programming in python.html#installation",
    "href": "Introduction to Jupyter Notebooks and programming in python.html#installation",
    "title": "1  Introduction to Jupyter Notebooks and programming in python",
    "section": "1.1 Installation",
    "text": "1.1 Installation\nAnaconda: If you are new to python, we recommend downloading the Anaconda installer and following the instructions for installation. Once installed, we’ll use the Jupyter Notebook interface to write code.\nQuarto: We’ll use Quarto to publish the **.ipynb* file containing text, python code, and the output. Download and install Quarto from here."
  },
  {
    "objectID": "Introduction to Jupyter Notebooks and programming in python.html#jupyter-notebook",
    "href": "Introduction to Jupyter Notebooks and programming in python.html#jupyter-notebook",
    "title": "1  Introduction to Jupyter Notebooks and programming in python",
    "section": "1.2 Jupyter notebook",
    "text": "1.2 Jupyter notebook\n\n1.2.1 Introduction\nJupyter notebook is an interactive platform, where you can write code and text, and make visualizations. You can access Jupyter notebook from the Anaconda Navigator, or directly open the Jupyter Notebook application itself. It should automatically open up in your default browser. The figure below shows a Jupyter Notebook opened with Google Chrome. This page is called the landing page of the notebook.\n\n\n\n\n\nTo create a new notebook, click on the New button and select the Python 3 option. You should see a blank notebook as in the figure below.\n\n\n\n\n\n\n\n1.2.2 Writing and executing code\nCode cell: By default, a cell is of type Code, i.e., for typing code, as seen as the default choice in the dropdown menu below the Widgets tab. Try typing a line of python code (say, 2+3) in an empty code cell and execute it by pressing Shift+Enter. This should execute the code, and create an new code cell. Pressing Ctlr+Enter for Windows (or Cmd+Enter for Mac) will execute the code without creating a new cell.\nCommenting code in a code cell: Comments should be made while writing the code to explain the purpose of the code or a brief explanation of the tasks being performed by the code. A comment can be added in a code cell by preceding it with a # sign. For example, see the comment in the code below.\nWriting comments will help other users understand your code. It is also useful for the coder to keep track of the tasks being performed by their code.\n\n#This code adds 3 and 5\n3+5\n\n8\n\n\nMarkdown cell: Although a comment can be written in a code cell, a code cell cannot be used for writing headings/sub-headings, and is not appropriate for writing lengthy chunks of text. In such cases, change the cell type to Markdown from the dropdown menu below the Widgets tab. Use any markdown cheat sheet found online, for example, this one to format text in the markdown cells.\nGive a name to the notebook by clicking on the text, which says ‘Untitled’.\n\n\n1.2.3 Saving and loading notebooks\nSave the notebook by clicking on File, and selecting Save as, or clicking on the Save and Checkpoint icon (below the File tab). Your notebook will be saved as a file with an exptension ipynb. This file will contain all the code as well as the outputs, and can be loaded and edited by a Jupyter user. To load an existing Jupyter notebook, navigate to the folder of the notebook on the landing page, and then click on the file to open it.\n\n\n1.2.4 Rendering notebook as HTML\nWe’ll use Quarto to print the **.ipynb* file as HTML. Check the procedure for rendering a notebook as HTML here. You have several options to format the file.\nYou will need to open the command prompt, navigate to the directory containing the file, and use the command: quarto render filename.ipynb --to html."
  },
  {
    "objectID": "Introduction to Jupyter Notebooks and programming in python.html#in-class-exercise",
    "href": "Introduction to Jupyter Notebooks and programming in python.html#in-class-exercise",
    "title": "1  Introduction to Jupyter Notebooks and programming in python",
    "section": "1.3 In-class exercise",
    "text": "1.3 In-class exercise\n\nCreate a new notebook.\nSave the file as In_class_exercise_1.\nGive a heading to the file - First HTML file.\nPrint Today is day 1 of my programming course.\nCompute and print the number of seconds in a day.\n\nThe HTML file should look like the picture below."
  },
  {
    "objectID": "Introduction to Jupyter Notebooks and programming in python.html#python-libraries",
    "href": "Introduction to Jupyter Notebooks and programming in python.html#python-libraries",
    "title": "1  Introduction to Jupyter Notebooks and programming in python",
    "section": "1.4 Python libraries",
    "text": "1.4 Python libraries\nThere are several built-in functions in python like print(), abs(), max(), sum() etc., which do not require importing any library. However, these functions will typically be insufficient for a analyzing data. Some of the popular libraries in data science and their primary purposes are as follows:\n\nNumPy: Performing numerical operations and efficiently storing numerical data.\nPandas: Reading, cleaning and manipulating data.\nMatplotlib, Seaborn: Visualizing data.\nSciPy: Performing scientific computing such as solving differential equations, optimization, statistical tests, etc.\nScikit-learn: Data pre-processing and machine learning, with a focus on prediction.\nStatsmodels: Developing statistical models with a focus on inference\n\nA library can be imported using the import keyword. For example, a NumPy library can be imported as:\n\nimport numpy as np\n\nUsing the as keyboard, the NumPy library has been given the name np. All the functions and attributes of the library can be called using the ‘np.’ prefix. For example, let us generate a sequence of whole numbers upto 10 using the NumPy function arange():\n\nnp.arange(8)\n\narray([0, 1, 2, 3, 4, 5, 6, 7])\n\n\nGenerating random numbers is very useful in python for performing simulations (we’ll see in later chapters). The library random is used to generate random numbers such as integers, real numbers based on different probability distributions, etc.\nBelow is an example of using the randint() function of the library for generating random numbers in [a, b], where a and b are integers.\n\nimport random as rm\nrm.randint(5,10) #This will generate a random number in [5,10]\n\n7"
  },
  {
    "objectID": "Introduction to Jupyter Notebooks and programming in python.html#debugging-and-errors",
    "href": "Introduction to Jupyter Notebooks and programming in python.html#debugging-and-errors",
    "title": "1  Introduction to Jupyter Notebooks and programming in python",
    "section": "1.5 Debugging and errors",
    "text": "1.5 Debugging and errors\nRead sections 1.3 - 1.6 from http://openbookproject.net/thinkcs/python/english3e/way_of_the_program.html"
  },
  {
    "objectID": "Introduction to Jupyter Notebooks and programming in python.html#terms-used-in-programming",
    "href": "Introduction to Jupyter Notebooks and programming in python.html#terms-used-in-programming",
    "title": "1  Introduction to Jupyter Notebooks and programming in python",
    "section": "1.6 Terms used in programming",
    "text": "1.6 Terms used in programming\nRead section 1.11 from http://openbookproject.net/thinkcs/python/english3e/way_of_the_program.html"
  },
  {
    "objectID": "Variable_expressions_statements.html",
    "href": "Variable_expressions_statements.html",
    "title": "2  Variables, expressions and statements",
    "section": "",
    "text": "Some of the commonly used objects in python are numbers - integer and float, strings and bool (true/false). The data type of the object can be identified using the in-built python function type(). For example, see the following objects and their types:\n\ntype(4)\n\nint\n\n\n\ntype(4.4)\n\nfloat\n\n\n\ntype('4')\n\nstr\n\n\n\ntype(True)\n\nbool\n\n\n\n\nWhat is the datatype of the following objects?\n\n‘This is False’\n“This is a number”\n1000\n65.65\nFalse"
  },
  {
    "objectID": "Variable_expressions_statements.html#constants-and-variables",
    "href": "Variable_expressions_statements.html#constants-and-variables",
    "title": "2  Variables, expressions and statements",
    "section": "2.2 Constants and Variables",
    "text": "2.2 Constants and Variables\nA constant is a value that cannot be changed. It may be a number, string or any other datatype. Below are some examples of printing a constant:\n\nprint(4)\n\n4\n\n\n\nprint(\"This is a string and also a constant\")\n\nThis is a string and also a constant\n\n\n\nprint(False)\n\nFalse\n\n\nA variable is an object whose value can be changed. For example, consider the object below:\n\nx = 2\n\nIn the above code the variable x has been assigned a value of 2. However, the value of x can be changed:\n\nx = 3\nprint(\"x =\", x)\n\nx = 3\n\n\nThus, the object x in the above code is a variable that refers to a memory location storing the constant value of 3.\n\n2.2.1 Variable names\nThere are a some rules for naming variables:\n\nA variable name must start with a letter or underscore _\nA variable name may consist of letters, numbers, and underscores only\n\nFor example, some of the valid variable names are *salary, text10, _varname. Some of the invalid variable names are salary% 10text, varname)*\n\nVariable names are case-sensitive. For example, the variable Varname will be different from varname.\nThere are certain reserved words in python that have some meaning, and cannot be used as variable names. These reserved words are:\n\n\n\n\n\n\nBest coding practice: Variables should be named such that they are informative of the value they are storing. For example, suppose we wish to compute the income tax a person has to pay based on their income and tax rate. Below are two ways of naming variables to do this computation:\n\nincome = 80000\ntax_rate = 0.15\nprint(\"Income tax = \",income*tax_rate)\n\nIncome tax =  12000.0\n\n\n\na = 80000\nb = 0.15\nprint(\"Income tax = \",a*b)\n\nIncome tax =  12000.0\n\n\nThe former code chuck is better than the latter one as it makes the code easy to read and understand.\n\n\n2.2.2 In-class exercise\n\nIn the statements below, classify the objects as variables or constants:\n\nvalue = “name”\nconstant = 7\nanother_const = “variable”\nTrue_False = True\n\nWhich of the following variable names are valid:\n\nvar.name\nvar9name\n_varname\nvarname*"
  },
  {
    "objectID": "Variable_expressions_statements.html#assignment-statements",
    "href": "Variable_expressions_statements.html#assignment-statements",
    "title": "2  Variables, expressions and statements",
    "section": "2.3 Assignment statements",
    "text": "2.3 Assignment statements\nValues are assigned to variables with the assignment statement (=). An assignment statement may have a constant or an expression on the right hand side of the (=) sign, and a variable name on the left hand side.\nFor example, the code lines below are assignment statements\n\nvar = 2\nvar = var + 3"
  },
  {
    "objectID": "Variable_expressions_statements.html#expressions",
    "href": "Variable_expressions_statements.html#expressions",
    "title": "2  Variables, expressions and statements",
    "section": "2.4 Expressions",
    "text": "2.4 Expressions\nThe mathematical operations and their corresponding operators are as follows:\n\nExponent: **\nRemainder: %\nMultiplication: *\nDivision: /\nAddition: +\nSubtraction: -\n\nThe operators above are in decreasing order of precedence, i.e., an exponent will be evaluated before a remainder, a remainder will be evaluated before a multiplication, and so on.\nFor example, check the precedence of operators in the computation of the following expression:\n\n2+3%4*2\n\n8\n\n\nIn case an expression becomes too complicated, use of parenthesis may help clarify the precendence of operators. Parenthesis takes precendence over all the operators listed above. For example, in the expression below, the terms within parenthesis are evaluated first:\n\n2+3%(4*2)\n\n5\n\n\n\n2.4.1 In-class exercise\nWhich of the following statements is an assignment statement:\n\nx = 5\nprint(x)\ntype(x)\nx + 4\n\nWhat will be the result of the following expression:\n\n1%2**3*2+1\n\n3"
  },
  {
    "objectID": "Variable_expressions_statements.html#converting-datatypes",
    "href": "Variable_expressions_statements.html#converting-datatypes",
    "title": "2  Variables, expressions and statements",
    "section": "2.5 Converting datatypes",
    "text": "2.5 Converting datatypes\nSometimes a value may have a datatype that is not suitable for using it. For example, consider the variable called annual_income in the code below:\n\nannual_income = \"80000\"\n\nSuppose we wish to divide annual_income by 12 to get the monthly income. We cannot use the variable monthly_income directly as its datatype is a string and not a number. Thus, numerical operations cannnot be performed on the variable annual_income.\nWe’ll need to convert annual_income to an integer. For that we will use the python’s in-built int() function:\n\nannual_income = int(annual_income)\nmonthly_income = annual_income/12\nprint(\"monthly income = \", monthly_income)\n\nmonthly income =  6666.666666666667\n\n\nSimilarly, datatypes can be converted from one type to another using in-built python functions as shown below:\n\n#Converting integer to string\nstr(9)\n\n'9'\n\n\n\n#Converting string to float\nfloat(\"4.5\")\n\n4.5\n\n\n\n#Converting bool to integer\nint(True)\n\n1\n\n\nSometimes, conversion of a value may not be possible. For example, it is not possible to convert the variable greeting defined below to a number:\n\ngreeting = \"hello\"\n\nHowever, in some cases, mathematical operators such as + and * can be applied on strings. The operator + concatenates multiple strings, while the operator * can be used to concatenate a string to itself multiple times:\n\n\"Hi\" + \" there!\"\n\n'Hi there!'\n\n\n\n\"5\" + '3'\n\n'53'\n\n\n\n\"5\"*8\n\n'55555555'"
  },
  {
    "objectID": "Variable_expressions_statements.html#user-input",
    "href": "Variable_expressions_statements.html#user-input",
    "title": "2  Variables, expressions and statements",
    "section": "2.6 User input",
    "text": "2.6 User input\nPython’s in-built input() function can be used to accept an input from the user. For example, suppose we wish the user to onput their age:\n\nage = input(\"Enter your age:\")\n\nEnter your age:34\n\n\nThe entered value is stored in the variable age and can be used for computation.\n\n2.6.1 In-class exercise\nAsk the user to input their year of birth, and print their age."
  },
  {
    "objectID": "Variable_expressions_statements.html#commenting-code",
    "href": "Variable_expressions_statements.html#commenting-code",
    "title": "2  Variables, expressions and statements",
    "section": "2.7 Commenting code",
    "text": "2.7 Commenting code\nThe # symbol can be used to comment the code. Anything after the # sign is ignored by python. Commenting a code may have several purposes, such as:\n\nDescribe what is going to happen in a sequence of code\nDocument who wrote the code or other ancillary information\nTurn off a line of code - perhaps temporarily\n\nFor example, below is code with a comment to describe the purpose of the code:\n\n#Computing number of hours of lecture in this course\nprint(\"Total lecture hours of STAT201=\",10*3*(5/6))\n\nTotal lecture hours of STAT201= 25.0\n\n\n\n2.7.1 In-class exercise\nWhich of the following lines is a comment:\n\n#this is a comment\n##this may be a comment\nA comment#"
  },
  {
    "objectID": "Variable_expressions_statements.html#programming-errors",
    "href": "Variable_expressions_statements.html#programming-errors",
    "title": "2  Variables, expressions and statements",
    "section": "2.8 Programming errors",
    "text": "2.8 Programming errors\nThere are 3 types of errors that can occur in a program - syntax errors, run-time errors, and semantic errors.\n\n2.8.1 Syntax errors\nSyntax errors occur if the code is written in a way that it does not comply with the rules / standards / laws of the language (python in this case). For example, suppose a values is assigned to a variable as follows:\n\n9value = 2\n\nThe above code when executed will indicate a syntax error as it violates the rule that a varible name must not start with a number.\n\n\n2.8.2 Run-time errors\nRun-time errors occur when a code is syntactically correct, but there are other issues with the code such as:\n\nMisspelled or incorrectly capitalized variable and function names\nAttempts to perform operations (such as math operations) on data of the wrong type (ex. attempting to subtract two variables that hold string values)\nDividing by zero\nAttempts to use a type conversion function such as int on a value that can’t be converted to an int\n\nFor example, suppose a number is multipled as follws:\n\nmultiplication_result = x * 4\n\nThe above code is syntactically correct. However, it will generate an error as the variable x has not been defined as a number.\n\n\n2.8.3 Semantic errors\nSemantic errors occur when the code executes without an error being indicated by the compiler. However, it does not work as inteded by the user. For example, consider the following code of mutiplying the number 6 by 3:\n\nx = '6'\nx * 3\n\n'666'\n\n\nIf it was intended to multiply the number 6, then the variable x should have been defined as x=6 so that x has a value of type integer. However, in the above code 6 is a string type value. When a string is multiplied by an integer, say n, it concatenates with itself n times.\n\n\n2.8.4 In-class exercises:\nIdentify the type of error from amongst syntax error, semantic error and run-time error\n\nincome = 2000\ntax = .08 * Income\nprint(\"tax on\", income, \"is:\", tax)\n\n\nincome = 2000\ntax = .08 x income\nprint(\"tax on\", income, \"is:\", tax)\n\n\nincome = 2000\ntax = .08 ** income\nprint(\"tax on\", income, \"is:\", tax)"
  },
  {
    "objectID": "Variable_expressions_statements.html#in-class-exercise-5",
    "href": "Variable_expressions_statements.html#in-class-exercise-5",
    "title": "2  Variables, expressions and statements",
    "section": "2.9 In-class exercise",
    "text": "2.9 In-class exercise\nThe formula for computing final amount if one is earning compund interest is given by: \\[A = P\\bigg(1+\\frac{r}{n}\\bigg)^{nt},\\]\nwhere:\nP = Principal amount (initial investment),\nr = annual nominal interest rate,\nn = number of times the interest is computed per year,\nt = number of years\nWrite a Python program that assigns the principal amount of $10000 to variable P, assign to n the value 12, and assign to r the interest rate of 8%. Then have the program prompt the user for the number of years t that the money will be compounded for. Calculate and print the final amount after t years.\nWhat is the amount if the user enters t as 4 years?\n\n\nNumber of years:4\n\n\n25870.703854994306"
  },
  {
    "objectID": "Control flow.html",
    "href": "Control flow.html",
    "title": "3  Control flow statements",
    "section": "",
    "text": "A control flow statement in a computer program determines the individual lines of code to be executed and/or the order in which they will be executed. In this chapter, we’ll learn about 3 types of control flow statements:"
  },
  {
    "objectID": "Control flow.html#conditonal-execution",
    "href": "Control flow.html#conditonal-execution",
    "title": "3  Control flow statements",
    "section": "3.1 Conditonal execution",
    "text": "3.1 Conditonal execution\nThe first type of control flow satement is if-elif-else. This statement helps with conditional execution of code, i.e., the piece of code to be executed is selected based on certain condition(s).\n\n3.1.1 Comparison operators\nFor testing if conditions are true or false, first we need to learn the opeartors that can be used for comparison. For example, suppose we want to check if two objects are equal, we use the == operator:\n\n5==6\n\nFalse\n\n\n\nx = \"hi\"\ny = \"hi\"\nx==y\n\nTrue\n\n\nBelow are the python comparison operators and their meanings.\n\n\n\nPython code\nMeaning\n\n\n\n\nx==y\nProduce True if … x is equal to y\n\n\nx != y\n… x is not equal to y\n\n\nx > y\n… x is greater than y\n\n\nx < y\n… x is less than y\n\n\nx >= y\n… x is greater than or equal to y\n\n\nx <= y\n… x is less than or equal to y\n\n\n\n\n\n3.1.2 Logical operators\nSometimes we may need to check multiple conditions simultaneously. The logical operator and is used to check if all the conditions are true, while the logical operator or is used to check if either of the conditons is true.\n\n#Checking if both the conditions are true using 'and'\n5==5 and 67==68\n\nFalse\n\n\n\n#Checking if either condition is true using 'or'\nx = 6; y = 90\nx<0 or y>50\n\nTrue\n\n\n\n\n3.1.3 if-elif-else statement\nThe if-elif-else statements can check several conditions, and execute the code corresponding to the condition that is true. Note that there can be as many elif statements as required.\nSyntax: Python uses indentation to identify the code to be executed if a condition is true. All the code indented within a condition is executed if the condition is true.\nExample: Input an integer. Print whether it is positive or negative.\n\nnumber = input(\"Enter a number:\")  #Input an integer\nnumber_integer = int(number)       #Convert the integer to 'int' datatype\nif number_integer>0:               #Check if the integer is positive\n    print(\"Number is positive\")\nelse:\n    print(\"Number is negative\")\n\nEnter a number:-9\nNumber is negative\n\n\nIn the above code, note that anything entered by the user is taken as a string datatype by python. However, a string cannot be positive or negative. So, we converted the number input by the user to integer to check if it was positive or negative.\nThere may be multiple statements to be executed if a condition is true. See the example below.\nExample: Input a number. Print whether it is positive, negative or zero. If it is negative, print its absolute value.\n\nnumber = input(\"Enter a number:\")\nnumber_integer = int(number)\nif number_integer>0:\n    print(\"Number is positive\")\nelif number_integer==0:\n    print(\"Number is zero\")\nelse:\n    print(\"Number is negative\")\n    print(\"Absolute value of number = \", abs(number_integer))\n\nEnter a number:0\nNumber is zero\n\n\n\n\n3.1.4 Practice exercise 1\nInput a number. Print whether its odd or even.\nSolution:\n\nnum = int(input(\"Enter a number: \"))\nif num%2==0:           #Checking if the number is divisible by 2\n    print(\"Number is even\")\nelse:\n    print(\"Number is odd\")\n\nEnter a number: 5\nNumber is odd\n\n\n\n\n3.1.5 Try-except\nIf we suspect that some lines of code may produce an error, we can put them in a try block, and if an error does occur, we can use the except block to instead execute an alternative piece of code. This way the program will not stop if an error occurs within the try block, and instead will be directed to execute the code within the except block.\nExample: Input an integer from the user. If the user inputs a valid integer, print whether it is a multiple of 3. However, if the user does not input a valid integer, print a message saying that the input is invalid.\n\nnum = input(\"Enter an integer:\")\n\n#The code lines within the 'try' block will execute as long as they run without error  \ntry:\n    num_int = int(num)\n    if num_int%3==0:\n        print(\"Number is a multiple of 3\")\n    else:\n        print(\"Number is not a multiple of 3\")\n        \n#The code lines within the 'except' block will execute only if the code lines within the 'try' block throw an error        \nexcept:\n    print(\"Input must be an integer\")\n\nEnter an integer:hi\nInput must be an integer\n\n\n\n\n3.1.6 Practice exercise 2\n\n3.1.6.1 \nAsk the user to enter their exam score. Print the grade based on their score as follows:\n\n\n\nScore\nGrade\n\n\n\n\n(90,100]\nA\n\n\n(80,90]\nB\n\n\n[0,80]\nC\n\n\n\nIf the user inputs a score which is not a number in [0,100], print invalid entry.\nSolution:\n\nscore = input(\"Enter exam score:\")\ntry:\n    score_num = float(score)\n    if score_num>90 and score_num<=100:\n        print(\"Grade: A\")\n    elif score_num>80 and score_num<=90:\n        print(\"Grade: B\")\n    elif score_num>=0 and score_num<=80:\n        print(\"Grade: C\")\n    else:\n        print(\"Invalid score\")     #If a number is less than 0 or more than 100\nexcept:\n    print(\"Invalid input\")         #If the input is not a number\n\nEnter exam score:90\nGrade: B\n\n\n\n\n3.1.6.2 \nNested if-elif-else statements: This question will lead you to create nested if statements, i.e., an if statement within another if statement.\nThink of a number in [1,5]. Ask the user to guess the number.\n\nIf the user guesses the number correctly, print “Correct in the first attempt!”, and stop the program. Otherwise, print “Incorrect! Try again” and give them another chance to guess the number.\nIf the user guesses the number correctly in the second attempt, print “Correct in the second attempt”, otherwise print “Incorrect in both the attempts, the correct number is:”, and print the correct number."
  },
  {
    "objectID": "Control flow.html#loops",
    "href": "Control flow.html#loops",
    "title": "3  Control flow statements",
    "section": "3.2 Loops",
    "text": "3.2 Loops\nWith loops, a piece of code can be executed repeatedly for a fixed number of times or until a condition is satistified.\n\n3.2.1 for loop\nWith a for loop, a piece of code is executed a fixed number of times.\nWe typically use for loops with an in-built python function called range() that supports for loops. Below is its description.\nrange(): The range() function returns a sequence of evenly-spaced integer values. It is commonly used in for loops to define the sequence of elements over which the iterations are performed.\nBelow is an example where the range() function is used to create a sequence of whole numbers upto 10. Ignore the list() function in the code below, as it will be introduced later.\n\nprint(list(range(10)))\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\nNote that the last element is one less than the integer specified in the range() function.\nUsing the range() function, the for loop can iterate over a sequence of numbers. See the example below.\nExample: Print the first n elements of the Fibonacci sequence, where n is an integer input by the user, such that n>2. In a fibonacci sequence, each number is the sum of the preceding two numbers, and the sequence starts from 0,1. The sequence is as follows:\n0,1,1,2,3,5,8,13,….\n\nn=int(input(\"Enter number of elements:\"))\nn1=0;n2=1\nprint(n1)\nprint(n2)\nfor i in range(n-2):  #Since two numbers of the sequence are already printed, n-2 numbers are required\n    n3 = n1+n2\n    print(n3)\n    n1 = n2\n    n2 = n3  \nprint(\"These are the first\", n, \"elements of the fibonacci series\")\n\nEnter number of elements:6\n0\n1\n1\n2\n3\n5\nThese are the first 6 elements of the fibonacci series\n\n\nAs in the if-elif-else statement, the for loop uses identation to indicate the piece of code to be run repeatedly.\nNote that we have used an in-built python function\n\n\n3.2.2 while loop\nWith a while loops, a piece of code is executed repeatedly until certain condition(s) hold.\nExample: Print all the elements of the Fibonacci sequence less than n, where n is an integer input by the user, such that n>2. In a fibonacci sequence, each number is the sum of the preceding two numbers, and the sequence starts from 0,1. The sequence is as follows:\n0,1,1,2,3,5,8,13,….\n\nn=int(input(\"Enter the value of n:\"))\nn1=0;n2=1\nprint(n1)\nwhile n2<n:\n    print(n2)\n    n3 = n1+n2\n    n1 = n2\n    n2 = n3  \nprint(\"These are all the elements of the fibonacci series less than\", n)\n\nEnter the value of n:50\n0\n1\n1\n2\n3\n5\n8\n13\n21\n34\nThese are all the elements of the fibonacci series less than 50\n\n\n\n\n3.2.3 Practice exercise 3\nPrint the prime numbers starting from 2, and less than n where n is a positive integer input by the user."
  },
  {
    "objectID": "data_structures.html",
    "href": "data_structures.html",
    "title": "4  Data structures",
    "section": "",
    "text": "In this chapter we’ll learn about the python data structures that are often used or appear while analyzing data."
  },
  {
    "objectID": "data_structures.html#tuple",
    "href": "data_structures.html#tuple",
    "title": "4  Data structures",
    "section": "4.1 Tuple",
    "text": "4.1 Tuple\nTuple is a sequence of python objects, with two key characeterisics: (1) the number of objects are fixed, and (2) the objects are immutable, i.e., they cannot be changed.\nTuple can be defined as a sequence of python objects separated by commas, and enclosed in rounded brackets (). For example, below is a tuple containing three integers.\n\ntuple_example = (2,7,4)\n\nWe can check the data type of a python object using the type() function. Let us check the data type of the object tuple_example.\n\ntype(tuple_example)\n\ntuple\n\n\nElements of a tuple can be extracted using their index within square brackets. For example the second element of the tuple tuple_example can be extracted as follows:\n\ntuple_example[1]\n\n7\n\n\nNote that an object of a tuple cannot be modified. For example, consider the following attempt in changing the second element of the tuple tuple_example.\n\ntuple_example[1] = 8\n\nTypeError: 'tuple' object does not support item assignment\n\n\nThe above code results in an error as tuple elements cannot be modified.\n\n4.1.1 Concatenating tuples\nTuples can be concatenated using the + operator to produce a longer tuple:\n\n(2,7,4) + (\"another\", \"tuple\") + (\"mixed\",\"datatypes\",5)\n\n(2, 7, 4, 'another', 'tuple', 'mixed', 'datatypes', 5)\n\n\nMultiplying a tuple by an integer results in repeitition of the tuple:\n\n(2,7,\"hi\") * 3\n\n(2, 7, 'hi', 2, 7, 'hi', 2, 7, 'hi')\n\n\n\n\n4.1.2 Unpacking tuples\nIf tuples are assigned to an expression containing multiple variables, the tuple will be unpacked and each variable will be assigned a value as per the order in which is appears. See the example below.\n\nx,y,z  = (4.5, \"this is a string\", ((\"Nested tuple\",5)))\n\n\nx\n\n4.5\n\n\n\ny\n\n'this is a string'\n\n\n\nz\n\n('Nested tuple', 5)\n\n\nIf we are interested in retrieving only some values of the tuple, the expression *_ can be used to discard the other values. Let’s say we are interested in retrieving only the first and the last two values of the tuple:\n\nx,*_,y,z  = (4.5, \"this is a string\", ((\"Nested tuple\",5)),\"99\",99)\n\n\nx\n\n4.5\n\n\n\ny\n\n'99'\n\n\n\nz\n\n99\n\n\n\n\n4.1.3 Tuple methods\nA couple of useful tuple methods are count, which counts the occurences of an element in the tuple and index, which returns the position of the first occurance of an element in the tuple:\n\ntuple_example = (2,5,64,7,2,2)\n\n\ntuple_example.count(2)\n\n3\n\n\n\ntuple_example.index(2)\n\n0\n\n\nNow that we have an idea about tuple, let us try to think where it can be used."
  },
  {
    "objectID": "data_structures.html#list",
    "href": "data_structures.html#list",
    "title": "4  Data structures",
    "section": "4.2 List",
    "text": "4.2 List\nList is a sequence of python objects, with two key characeterisics that differentiate them from tuples: (1) the number of objects are variable, i.e., objects can be added or removed from a list, and (2) the objects are mutable, i.e., they can be changed.\nList can be defined as a sequence of python objects separated by commas, and enclosed in square brackets []. For example, below is a list containing three integers.\n\nlist_example = [2,7,4]\n\n\n4.2.1 Adding and removing elements in a list\nWe can add elements at the end of the list using the append method. For example, we append the string ‘red’ to the list list_example below.\n\nlist_example.append('red')\n\n\nlist_example\n\n[2, 7, 4, 'red']\n\n\nNote that the objects of a list or tuple can be of different datatypes.\nAn element can be added at a specific location of the list using the insert method. For example, if we wish to insert the number 2.32 as the second element of the list list_example, we can do it as follows:\n\nlist_example.insert(1,2.32)\n\n\nlist_example\n\n[2, 2.32, 7, 4, 'red']\n\n\nFor removing an element from the list, the pop and remove methods may be used. The pop method removes an element at particular index, while the remove method removes the element’s first occurence in the list by its value. See the examples below.\nLet us say, we need to remove the third element of the list.\n\nlist_example.pop(2)\n\n7\n\n\n\nlist_example\n\n[2, 2.32, 4, 'red']\n\n\nLet us say, we need to remove the element ‘red’.\n\nlist_example.remove('red')\n\n\nlist_example\n\n[2, 2.32, 4]\n\n\n\n#If there are multiple occurences of an element in the list, the first occurence will be removed\nlist_example2 = [2,3,2,4,4]\nlist_example2.remove(2)\nlist_example2\n\n[3, 2, 4, 4]\n\n\nFor removing multiple elements in a list, either pop or remove can be used in a for loop, or a for loop can be used with a condition. See the examples below.\nLet’s say we need to remove intergers less than 100 from the following list.\n\nlist_example3 = list(range(95,106))\nlist_example3\n\n[95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105]\n\n\n\n#Method 1: For loop with remove\nlist_example3_filtered = list(list_example3) #\nfor element in list_example3:\n    #print(element)\n    if element<100:\n        list_example3_filtered.remove(element)\nprint(list_example3_filtered)\n\n[100, 101, 102, 103, 104, 105]\n\n\n\\(\\color{red}{\\text{Q: What's the need to define a new variable `list\\_example3\\_filtered` in the above code?}}\\)\nReplace list_example3_filtered with list_example3 and identify the issue.\n\n#Method 2: For loop with condition\n[element for element in list_example3 if element>100]\n\n[101, 102, 103, 104, 105]\n\n\n\n\n4.2.2 Concatenating lists\nAs in tuples, lists can be concatenated using the + operator:\n\nimport time as tm\n\n\nlist_example4 = [5,'hi',4] \nlist_example4 = list_example4 + [None,'7',9]\nlist_example4\n\n[5, 'hi', 4, None, '7', 9]\n\n\nFor adding elements to a list, the extend method is preferred over the + operator. This is because using the + operator creates a new list, while the extend method adds elements to an existing list.\n\nlist_example4 = [5,'hi',4]\nlist_example4.extend([None, '7', 9])\nlist_example4\n\n[5, 'hi', 4, None, '7', 9]\n\n\n\n\n4.2.3 Sorting a list\nA list can be sorted using the sort method:\n\nlist_example5 = [6,78,9]\nlist_example5.sort(reverse=True) #the reverse argument is used to specify if the sorting is in ascending or descending order\nlist_example5\n\n[78, 9, 6]\n\n\n\n\n4.2.4 Slicing a list\nWe may extract or update a section of the list by passing the starting index (say start) and the stopping index (say stop) as start:stop to the index operator []. This is called slicing a list. For example, see the following example.\n\nlist_example6 = [4,7,3,5,7,1,5,87,5]\n\nLet us extract a slice containing all the elements starting from the the 3rd position upto the 7th position.\n\nlist_example6[2:7]\n\n[3, 5, 7, 1, 5]\n\n\nNote that while the element at the start index is included, the element with the stop index is excluded in the above slice.\nIf either the start or stop index is not mentioned, the slicing will be done from the beginning or utop the end of the list, respectively.\n\nlist_example6[:7]\n\n[4, 7, 3, 5, 7, 1, 5]\n\n\n\nlist_example6[2:]\n\n[3, 5, 7, 1, 5, 87, 5]\n\n\nTo slice the list relative to the end, we can use negative indices:\n\nlist_example6[-4:]\n\n[1, 5, 87, 5]\n\n\n\nlist_example6[-4:-2:]\n\n[1, 5]\n\n\nAn extra colon (‘:’) can be used to slice every ith element of a list.\n\n#Selecting every 3rd element of a list\nlist_example6[::3]\n\n[4, 5, 5]\n\n\n\n#Selecting every 3rd element of a list from the end\nlist_example6[::-3]\n\n[5, 1, 3]\n\n\n\n#Selecting every element of a list from the end or reversing a list \nlist_example6[::-1]\n\n[5, 87, 5, 1, 7, 5, 3, 7, 4]\n\n\nNow that we have an idea about lists, let us try to think where it can be used.\n\n\n\n\n\n \n        \n\n\nNow that we have learned about lists and tuples, let us compare them.\n\\(\\color{red}{\\text{Q: A list seems to be much more flexible than tuple, and can replace a tuple almost everywhere. Then why use tuple at all?}}\\)\nA: The additional flexibility of a list comes at the cost of efficiency. Some of the advatages of a tuple over a list are as follows:\n\nSince a list can be extended, space is over-allocated when creating a list. A tuple takes less storage space as compared to a list of the same length.\nTuples are not copied. If a tuple is assigned to another tuple, both tuples point to the same memory location. However, if a list is assigned to another list, a new list is created consuming the same memory space as the orignial list.\nTuples refer to their element directly, while in a list, there is an extra layer of pointers that refers to their elements. Thus it is faster to retrieve elements from a tuple.\n\nThe examples below illustrate the above advantages of a tuple.\n\n#Example showing tuples take less storage space than lists for the same elements\ntuple_ex = (1, 2, 'Obama')\nlist_ex = [1, 2, 'Obama']\nprint(\"Space taken by tuple =\",tuple_ex.__sizeof__(),\" bytes\")\nprint(\"Space taken by list =\",list_ex.__sizeof__(),\" bytes\")\n\nSpace taken by tuple = 48  bytes\nSpace taken by list = 64  bytes\n\n\n\n#Examples showing that a tuples are not copied, while lists can be copied\ntuple_copy = tuple(tuple_ex)\nprint(\"Is tuple_copy same as tuple_ex?\", tuple_ex is tuple_copy)\nlist_copy = list(list_ex)\nprint(\"Is list_copy same as list_ex?\",list_ex is list_copy)\n\nIs tuple_copy same as tuple_ex? True\nIs list_copy same as list_ex? False\n\n\n\n#Examples showing tuples takes lesser time to retrieve elements\nimport time as tm\ntt = tm.time()\nlist_ex = list(range(1000000)) #List containinig whole numbers upto 1 million\na=(list_ex[::-2])\nprint(\"Time take to retrieve every 2nd element from a list = \", tm.time()-tt)\n\ntt = tm.time()\ntuple_ex = tuple(range(1000000)) #tuple containinig whole numbers upto 1 million\na=(tuple_ex[::-2])\nprint(\"Time take to retrieve every 2nd element from a tuple = \", tm.time()-tt)\n\nTime take to retrieve every 2nd element from a list =  0.03579902648925781\nTime take to retrieve every 2nd element from a tuple =  0.02684164047241211"
  },
  {
    "objectID": "data_structures.html#dictionary",
    "href": "data_structures.html#dictionary",
    "title": "4  Data structures",
    "section": "4.3 Dictionary",
    "text": "4.3 Dictionary\nA dictionary consists of key-value pairs, where the keys and values are python objects. While values can be any python object, keys need to be immutable python objects, like strings, intergers, tuples, etc. Thus, a list can be a value, but not a key, as a elements of list can be changed. A dictionary is defined using the keyword dict along with curly braces, colons to separate keys and values, and commas to separate elements of a dictionary:\n\ndict_example = {'USA':'Joe Biden', 'India':'Narendra Modi', 'China':'Xi Jinping'}\n\nElements of a dictionary can be retrieved by using the corresponding key.\n\ndict_example['India']\n\n'Narendra Modi'\n\n\n\n4.3.1 Adding and removing elements in a dictionary\nNew elements can be added to a dictionary by defining a key in square brackets and assiging it to a value:\n\ndict_example['Japan'] = 'Fumio Kishida'\ndict_example['Countries'] = 4\ndict_example\n\n{'USA': 'Joe Biden',\n 'India': 'Narendra Modi',\n 'China': 'Xi Jinping',\n 'Japan': 'Fumio Kishida',\n 'Countries': 4}\n\n\nElements can be removed from the dictionary using the del method or the pop method:\n\n#Removing the element having key as 'Countries'\ndel dict_example['Countries']\n\n\ndict_example\n\n{'USA': 'Joe Biden',\n 'India': 'Narendra Modi',\n 'China': 'Xi Jinping',\n 'Japan': 'Fumio Kishida'}\n\n\n\n#Removing the element having key as 'USA'\ndict_example.pop('USA')\n\n'Joe Biden'\n\n\n\ndict_example\n\n{'India': 'Narendra Modi', 'China': 'Xi Jinping', 'Japan': 'Fumio Kishida'}\n\n\nNew elements can be added, and values of exisiting keys can be changed using the update method:\n\ndict_example = {'USA':'Joe Biden', 'India':'Narendra Modi', 'China':'Xi Jinping','Countries':3}\ndict_example\n\n{'USA': ['Joe Biden'],\n 'India': 'Narendra Modi',\n 'China': 'Xi Jinping',\n 'Countries': 3}\n\n\n\ndict_example.update({'Countries':4, 'Japan':'Fumio Kishida'})\n\n\ndict_example\n\n{'USA': 'Joe Biden',\n 'India': 'Narendra Modi',\n 'China': 'Xi Jinping',\n 'Countries': 4,\n 'Japan': 'Fumio Kishida'}"
  },
  {
    "objectID": "data_structures.html#functions",
    "href": "data_structures.html#functions",
    "title": "4  Data structures",
    "section": "4.4 Functions",
    "text": "4.4 Functions\nIf an algorithm or block of code is being used several times in a code, then it can be separatey defined as a function. This makes the code more organized and readable. For example, let us define a function that prints prime numbers between a and b, and returns the number of prime numbers found.\n\n#Function definition\ndef prime_numbers (a,b=100):\n    num_prime_nos = 0\n    \n    #Iterating over all numbers between a and b\n    for i in range(a,b):\n        num_divisors=0\n        \n        #Checking if the ith number has any factors\n        for j in range(2, i):\n            if i%j == 0:\n                num_divisors=1;break;\n                \n        #If there are no factors, then printing and counting the number as prime        \n        if num_divisors==0:\n            print(i)\n            num_prime_nos = num_prime_nos+1\n            \n    #Return count of the number of prime numbers\n    return num_prime_nos\n\nIn the above function, the keyword def is used to define the function, prime_numbers is the name of the function, a and b are the arguments that the function uses to compute the output.\nLet us use the defined function to print and count the prime numbers between 40 and 60.\n\n#Printing prime numbers between 40 and 60\nnum_prime_nos_found = prime_numbers(40,60)\n\n41\n43\n47\n53\n59\n\n\n\nnum_prime_nos_found\n\n5\n\n\nIf the user calls the function without specifying the value of the argument b, then it will take the default value of 100, as mentioned in the function definition. However, for the argument a, the user will need to specify a value, as their is no value defined as a default value in the function definition.\n\n4.4.1 Global and local variables with respect to a function\nA variable defined within a function is local to that function, while a variable defined outside the function is global with respect to that function. In case a variable with the same name is defined both outside and inside a function, it will refer to its global or local value, depending on where it occurs.\nThe example below shows a variable with the name var referring to its local value when called within the function, and global value when called outside the function.\n\nvar = 5\ndef sample_function(var):    \n    print(\"Local value of 'var' within 'sample_function()'= \",var)\n\nsample_function(4)\nprint(\"Global value of 'var' outside 'sample_function()' = \",var)\n\nLocal value of 'var' within 'sample_function()'=  4\nGlobal value of 'var' outside 'sample_function()' =  5"
  },
  {
    "objectID": "functions.html",
    "href": "functions.html",
    "title": "5  Functions",
    "section": "",
    "text": "As the words suggests, functions are a piece of code that have a specific function or purpose. As an analogy, if a human is a computer program, then the mind can be considered to be a function, which has purpose of thinking, eyes can be another function, which have a purpose of seeing. These functions are called upon by the human when needed.\nSimilarly, in case of a computer program, functions are a piece of code, that perform a specific task, when called upon by the program. Instead of being defined as a function, the piece of code can also be used directly whenever it is needed in a program. However, defining a frequently-used piece of code as a function has the following benefits:\n\nIt reduces the number of lines of code, as the lines of code need to be written just once in the function definition. Thereafter, the function is called by its name, wherever needed in the program. This makes the code compact, and enhances readibility.\nIt makes the process of writing code easier, as the user needs to just type the name of the function, wherever it is needed, instead of pasting lines of code.\nIt can be used in different programs, thereby saving time in writing other programs.\n\nTo put it more formally, a function is a piece of code that takes arguments (if any) as input, performs computations or tasks, and then returns a result or results."
  },
  {
    "objectID": "functions.html#defining-a-function",
    "href": "functions.html#defining-a-function",
    "title": "5  Functions",
    "section": "5.2 Defining a function",
    "text": "5.2 Defining a function\nLook at the function defined below. It asks the user to input a number, and prints whether the number is odd or even.\n\n#This is an example of a function definition\n\n#A function definition begins with the 'def' keyword followed by the name of the function.\n#Note that 'odd_even()' is the name of the function below.\ndef odd_even():           \n    num = int(input(\"Enter an integer:\"))\n    if num%2==0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")   #Function definition ends here\n        \nprint(\"This line is not a part of the function as it is not indented\") #This line is not a part of the function\n\nThis line is not a part of the function as it is not indented\n\n\nNote that the function is defined using the def keyword. All the lines within the function definition are indented. The indentation shows the lines of code that below to the function. When the indentation stops, the function definition is considered to have ended.\nWhenever the user wishes to input a number and print whether it is odd or even, they can call the function defined above by its name as follows:\n\nodd_even()\n\nEnter an integer:5\nOdd"
  },
  {
    "objectID": "functions.html#arguments-of-a-function",
    "href": "functions.html#arguments-of-a-function",
    "title": "5  Functions",
    "section": "5.3 Arguments of a function",
    "text": "5.3 Arguments of a function\nNote that the function defined above needs no input when called. However, sometimes we may wish to define a function that takes input(s), and performs computations on the inputs to produce an output. These input(s) are called argument(s) of a function.\n\n5.3.1 Function with an argument\nLet us change the previous example to write a function that takes an integer as an input argument, and prints whether it is odd or even:\n\n#This is an example of a function definition that has an argument\ndef odd_even(num):           \n    if num%2==0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")\n\nWe can use the function whenever we wish to find a number is odd or even. For example, if we wish to find that a number input by the user is odd or even, we can call the function with the user input as its argument.\n\nnumber = int(input(\"Enter an integer:\"))\nodd_even(number)\n\nEnter an integer:6\nEven\n\n\nNote that the above function needs an argument as per the function definition. It will produce an error if called without an argument:\n\nodd_even()\n\nTypeError: odd_even() missing 1 required positional argument: 'num'\n\n\n\n\n5.3.2 Function with an argument having a default value\nTo avoid errors as above, sometimes is a good idea to assign a default value to the argument in the function definition:\n\n#This is an example of a function definition that has an argument with a default value\ndef odd_even(num=0):           \n    if num%2==0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")\n\nNow, we can call the function without an argument. The function will use the default value of the argument specified in the function definition.\n\nodd_even()\n\nEven\n\n\n\n\n5.3.3 Function with multiple arguments\nA function can have as many arguments as needed. Multiple arguments are separated by commas. For example, below is a function that inputs two strings, concatenates them with a space in between, and prints the output:\n\ndef concat_string(string1, string2):\n    print(string1+' '+string2)\n\n\nconcat_string(\"Hi\", \"there\")\n\nHi there"
  },
  {
    "objectID": "functions.html#functions-that-return-objects",
    "href": "functions.html#functions-that-return-objects",
    "title": "5  Functions",
    "section": "5.4 Functions that return objects",
    "text": "5.4 Functions that return objects\nUntil now, we saw functions"
  }
]