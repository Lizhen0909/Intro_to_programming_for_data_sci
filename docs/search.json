[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to programming for data science",
    "section": "",
    "text": "Preface\nThis book serves as the course notes for STAT201 Winter 2025, and it is an evolving resource developed to support the learning objectives of the course. It builds upon the foundational work of the original iteration, authored and maintained by Professor Arvind Krishna. We are deeply grateful for Professor Krishna’s contributions, as his work has provided a robust framework and valuable content upon which this version of the book is based.\nAs the course progresses during this quarter, the notes will be continually updated and refined to reflect the content taught in real time. The modifications aim to enhance the clarity, depth, and relevance of the material to better align with the current teaching objectives and methodologies.\nThis book is a living document, and we welcome feedback, suggestions, and contributions from students, instructors, and the broader academic community to help improve its quality and utility.\nThank you for being part of this journey, and we hope this resource serves as a helpful guide throughout the course.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "venv_setup.html",
    "href": "venv_setup.html",
    "title": "1  Setting up your environment with VS Code",
    "section": "",
    "text": "1.1 Learning Objectives\nBy completing this lecture, you will be able to:",
    "crumbs": [
      "Getting started: Coding environment",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting up your environment with VS Code</span>"
    ]
  },
  {
    "objectID": "venv_setup.html#learning-objectives",
    "href": "venv_setup.html#learning-objectives",
    "title": "1  Setting up your environment with VS Code",
    "section": "",
    "text": "Install and configure Visual Studio Code (VS Code) for Python programming.\nLeverage Jupyter Notebook within VS Code for your data science Python programming.\nUse Quarto to create HTML documents for your upcoming homework submissions.",
    "crumbs": [
      "Getting started: Coding environment",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting up your environment with VS Code</span>"
    ]
  },
  {
    "objectID": "venv_setup.html#introduction-to-visual-studio-code-vs-code",
    "href": "venv_setup.html#introduction-to-visual-studio-code-vs-code",
    "title": "1  Setting up your environment with VS Code",
    "section": "1.2 Introduction to Visual Studio Code (VS Code)",
    "text": "1.2 Introduction to Visual Studio Code (VS Code)\nVisual Studio Code (VS Code) is a free, open-source, and lightweight code editor developed by Microsoft. It’s widely used for coding, debugging, and working with various programming languages and frameworks. Here’s an overview of its key features and functionalities:\n\n1.2.1 Core Features\n\nMulti-language Support: VS Code supports a wide range of programming languages out of the box, including Python, JavaScript, TypeScript, HTML, CSS, and more. Additional language support can be added via extensions.\nExtensibility: The editor has a rich ecosystem of extensions available through the Visual Studio Code Marketplace. These extensions add support for additional programming languages, themes, debuggers, and tools like Git integration.\nIntelliSense: Provides intelligent code completion, parameter info, quick info, and code navigation for many languages, enhancing productivity and reducing errors.\nIntegrated Terminal: Allows you to run command-line tools directly from the editor, making it easy to execute scripts, install packages, and more without leaving the coding environment.\nVersion Control Integration: Seamless integration with Git and other version control systems, allowing you to manage source code repositories, stage changes, commit, and view diffs within the editor.\nDebugging: Supports debugging with breakpoints, call stacks, and an interactive console for various languages and frameworks.\n\n\n\n1.2.2 User Interface\n\nEditor: The main area to edit your files. You can open as many editors as you like side by side vertically and horizontally.\nPrimary Side Bar: Contains different views like the Explorer to assist you while working on your project.\nActivity Bar: Located on the far left-hand side. Lets you switch between views and gives you additional context-specific indicators, like the number of outgoing changes when Git is enabled. You can change the position of the Activity Bar.\nPanel: An additional space for views below the editor region. By default, it contains output, debug information, errors and warnings, and an integrated terminal. The Panel can also be moved to the left or right for more vertical space.\n\n\n\nCommand Palette: Accessed with Ctrl+Shift+P (or Cmd+Shift+P on macOS), it provides a quick way to execute commands, switch themes, change settings, and more.\n\n\n\n\n1.2.3 Extensions\n\nLanguage Extensions: Add support for additional languages such as Rust, Go, C++, and more.\nLinters and Formatters: Extensions like ESLint, Prettier, and Pylint help with code quality and formatting.\nDevelopment Tools: Extensions for Docker, Kubernetes, database management, and more.\nProductivity Tools: Extensions for snippets, file explorers, and workflow enhancements.\n\n\n\n\n1.2.4 Use Cases\n\nWeb Development: VS Code is popular among web developers for its robust support for HTML, CSS, JavaScript, and front-end frameworks like React, Angular, and Vue.\nPython Development: With the Python extension, it provides features like IntelliSense, debugging, linting, and Jupyter Notebook support.\nData Science: Supports Jupyter notebooks, allowing data scientists to write and run Python code interactively.\nDevOps and Scripting: Useful for writing and debugging scripts in languages like PowerShell, Bash, and YAML for CI/CD pipelines.\n\n\n\n1.2.5 Cross-Platform\n\nAvailable on Windows, macOS, and Linux, making it accessible to developers across different operating systems.\n\nOverall, VS Code is a versatile and powerful tool for a wide range of development activities, from simple scripting to complex software projects.",
    "crumbs": [
      "Getting started: Coding environment",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting up your environment with VS Code</span>"
    ]
  },
  {
    "objectID": "venv_setup.html#installing-visual-studio-code",
    "href": "venv_setup.html#installing-visual-studio-code",
    "title": "1  Setting up your environment with VS Code",
    "section": "1.3 Installing Visual Studio Code",
    "text": "1.3 Installing Visual Studio Code\n\nStep 1: Download VS Code:\n\nGo to the official VS Code website and download the installer for your operating system.\n\nStep 2: Install VS Code:\n\nRun the installer and follow the prompts to complete the installation.\n\nStep 3: Launch VS Code:\n\nOpen VS Code after installation to ensure it’s working correctly.",
    "crumbs": [
      "Getting started: Coding environment",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting up your environment with VS Code</span>"
    ]
  },
  {
    "objectID": "venv_setup.html#setting-up-python-development-environment-in-vs-code-using-python-venv",
    "href": "venv_setup.html#setting-up-python-development-environment-in-vs-code-using-python-venv",
    "title": "1  Setting up your environment with VS Code",
    "section": "1.4 Setting Up Python Development Environment in VS Code using python venv",
    "text": "1.4 Setting Up Python Development Environment in VS Code using python venv\nUnlike Spyder and PyCharm, which are specifically designed for Python development, VS Code is a versatile code editor with multi-language support. As a result, setting up the Python environment requires some additional configuration.\nThis step-by-step guide will walk you through setting up your Python environment in Visual Studio Code from scratch using venv.\n\n1.4.1 Install Python\nFor this course, any version of Python 3 works. You don’t need to worry about having the latest version of Python, as long as you have Python 3 installed.\nIf Python 3 is already installed on your computer, you can skip this step.\n\nDownload Python:\n\nGo to the official Python website and download the latest version of Python for your operating system.\nEnsure that you check the box “Add Python to PATH” during installation if it exists.\n\nVerify Python Installation:\n\nOpen a terminal (Command Prompt on Windows, Terminal on macOS/Linux) and type:\npython --version\nYou should see the installed Python version. If the command line doesn’t work, you might see an error message like:\n\npython is not recognized\npython command is not found\n\nThis issue is often caused by Python not being added to the PATH environment variable. Please refer to the instructions to resolve this issue.\n\n\nNote:\nBefore moving forward, ensure that the command python --version successfully prints the version of your installed Python. If it does not, you may need to troubleshoot your Python installation or add it to the PATH environment variable.\n\n\n1.4.2 Install Visual Studio Code Extensions\n\nOpen VS Code.\nGo to Extensions:\n\nClick on the Extensions icon on the sidebar or press Ctrl+Shift+X.\n\nInstall Python Extension:\n\nSearch for the “Python” extension by Microsoft and install it.\n\nInstall Jupyter Extension:\n\nSearch for the “Jupyter” extension by Microsoft and install it.\n\n\n\n\n1.4.3 Set Up a Python Workspace for this course\n\nCreate a New Folder:\n\nCreate a new folder on your computer where you want to store your Python code for this course.\n\nOpen Folder in VS Code:\n\nGo to File &gt; Open Folder and select the newly created folder.\n\n\n\n\n1.4.4 Create a Notebook for your work\n\nIn VS Code, go to File &gt; New File and select Jupyter Notebook. You should see a blank notebook named Untitled-1.ipynb as in the figure below. The .ipynb extension stands for IPython Notebook.\n:\n\nJupyter Notebook is an interactive platform that allows you to write code, add text, and create visualizations. Data scientists love using Jupyter Notebooks as an alternative to working directly with Python files because of their interactivity and flexibility.\n\n\n1.4.5 Create a Python environment for your work - GUI method\n\nWhen you start a Jupyter Notebook in VS Code, you need to choose a kernel. Kernel is the “engine” that runs your code within your Jupyter notebook, and it is tied to a specific Python interpreter or environment.\n\nWhat’s the difference between an interpreter and an environment? An interpreter is a program that runs your Python code. An environment, on the other hand, is a standalone “space” where your code runs. It’s like a container that holds its own interpreter and environment-specific libraries/dependencies, so each project can have its own environment setup without affecting others.\nWhy do we prefer creating an environment for this course rather than using the global interpreter that comes with your Python installation? As a data scientist, you may work on multiple projects and attend different courses that require different sets of packages, dependencies, or even Python versions. By creating a separate environment, you can prevent conflicts between libraries, dependencies, and Python versions across your projects (dependency hell) and also ensure code reproducibility. It is always good practice to work within python environments, especially when you have different projects going on.\nLet’s create a Python environment for the upcoming coursework.\n\n\nCreate using venv in the current workspace\n:\nWhat is venv\nIn Python, venv stands for Virtual Environment, which is a tool used to create isolated environments for Python projects. This helps manage dependencies and avoid conflicts between different projects that may require different versions of Python or different packages.\nChoose a specific python interpreter for your environment:\n\n\nCongratulations! A virtual environment named .venv has been successfully created in your project folder.\n\n\n1.4.6 Choose the .venv environment as the kernel to run the notebook\nFor all your upcoming work in this project, you can select this environment to ensure a consistent setup.\n\n\n1.4.7 Installing ipykernel for your notebook\nCreate a code cell in the notebook and run it. The first time you run a code cell, you will run into\n - After installing ipykernel, you should be able to run the following cell.\n\n\nCode\nimport sys\nprint(\"Current Python executable:\", sys.executable)\n\n\nCurrent Python executable: c:\\Users\\lsi8012\\OneDrive - Northwestern University\\FA24\\303-1\\test_env\\.venv\\Scripts\\python.exe\n\n\nsys.executable is an attribute in the Python sys module that returns the path to the Python interpreter that is currently executing your code.",
    "crumbs": [
      "Getting started: Coding environment",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting up your environment with VS Code</span>"
    ]
  },
  {
    "objectID": "venv_setup.html#jupyter-notebooks-in-vs-code",
    "href": "venv_setup.html#jupyter-notebooks-in-vs-code",
    "title": "1  Setting up your environment with VS Code",
    "section": "1.5 Jupyter Notebooks in VS Code",
    "text": "1.5 Jupyter Notebooks in VS Code\nAfter setting up your environment and successfully running your notebook using the created environment, follow this instruction to become familiar with the native support for Jupyter Notebooks in VS Code\n\n1.5.1 Writing and executing code\nCode cell: By default, a cell is of type Code, i.e., for typing code, as seen as the default choice in the dropdown menu below the Widgets tab. Try typing a line of python code (say, 2+3) in an empty code cell and execute it by pressing Shift+Enter. This should execute the code, and create an new code cell. Pressing Ctlr+Enter for Windows (or Cmd+Enter for Mac) will execute the code without creating a new cell.\nCommenting code in a code cell: Comments should be made while writing the code to explain the purpose of the code or a brief explanation of the tasks being performed by the code. A comment can be added in a code cell by preceding it with a # sign. For example, see the comment in the code below.\nWriting comments will help other users understand your code. It is also useful for the coder to keep track of the tasks being performed by their code.\n\n\nCode\n#This code adds 3 and 5\n3+5\n\n\n8\n\n\nPlease refer to the Style Guide for Python Code to develop good coding habits from the start.\nMarkdown cell: Although a comment can be written in a code cell, a code cell cannot be used for writing headings/sub-headings, and is not appropriate for writing lengthy chunks of text. In such cases, change the cell type to Markdown from the dropdown menu below the Widgets tab. Use any markdown cheat sheet found online, for example, this one to format text in the markdown cells.\nJupyter Notebook shortcuts: Jupyter Notebook shortcuts are handy and quick. Here is a list of commonly used shortcuts for beginners:\n\nShift + Enter: Run the cell and move to the next one.\nA: Insert a cell above.\nB: Insert a cell below.\nD, D: Delete the selected cell.\nY: Change the cell to Code type.\nM: Change the cell to Markdown type.\n\n\n\n1.5.2 Saving and loading notebooks\nTo save the notebook in VS Code, click on File and select Save As, or use the keyboard shortcut CTRL+S. Your notebook will be saved as a file with the extension .ipynb. This file will contain all the code and outputs and can be opened and edited with VS Code or any Jupyter-compatible environment.\nTo open an existing Jupyter notebook with VS Code: 1. Navigate to the file in your system’s file explorer. 2. Right-click on the file. 3. Select Open with VS Code.",
    "crumbs": [
      "Getting started: Coding environment",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting up your environment with VS Code</span>"
    ]
  },
  {
    "objectID": "venv_setup.html#rendering-notebook-as-html-using-quarto",
    "href": "venv_setup.html#rendering-notebook-as-html-using-quarto",
    "title": "1  Setting up your environment with VS Code",
    "section": "1.6 Rendering notebook as HTML using Quarto",
    "text": "1.6 Rendering notebook as HTML using Quarto\nQuarto is designed for high-quality, customizable, and publishable outputs, making it suitable for reports, blogs, or presentations. We’ll use Quarto to print the **.ipynb* file as HTML for your assignment submission.\n\n1.6.1 Installing and Verifying Quarto\n\nDownload and install Quarto from the official website.\nFollow the installation instructions for your operating system.\nOpen your terminal within VS Code:\n\nGo to Terminal -&gt; New Terminal.\n\nRun the following command to verify that Quarto and its dependencies are correctly installed: quarto --version\nYou should see the installed quarto version. If the command line doesn’t work, you might see an error message like:\n- `quarto is not recognized`\n- `quarto command is not found` \nThis issue is often caused by Quarto not being added to the PATH environment variable. Similar to how you added the Python path to the environment variable above, you need to add the Quarto path to the system environment variable so that the command can be recognized by your operating system’s shell.\nOn Windows, if you used the default installation path (without changing it), Quarto is installed in: C:\\Users\\&lt;USER&gt;\\AppData\\Local\\Programs\\Quarto\\bin\n\nNote:\nBefore moving forward, ensure that the command quarto --version successfully prints the version of your installed quarto. If it does not, you may need to troubleshoot your quarto installation or add it to the PATH environment variable.\n\n\n1.6.2 Converting the Notebook to HTML\nCheck the procedure for rendering a notebook as HTML here. You have several options to format the file. Here are some points to remember when using Quarto to render your notebook as HTML:\n\nThe Raw NBConvert cell type is used to render different code formats into HTML or LaTeX. This information is stored in the notebook metadata and converted appropriately. Use this cell type to put the desired formatting settings for the HTML file.\nIn the formatting settings, remember to use the setting embed-resources: true. This will ensure that the rendered HTML file is self-contained, and is not dependent on other files. This is especially important when you are sending the HTML file to someone, or uploading it somewhere. If the file is self-contained, then you can send the file by itself without having to attach the dependent files with it.\n\nOnce you have entered the desired formatting setting in the Raw NBConver cell, you are ready to render the notebook to HTML. Open the terminal, navigate to the directory containing the notebook (.ipynb file), and use the command: quarto render filename.ipynb --to html.",
    "crumbs": [
      "Getting started: Coding environment",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting up your environment with VS Code</span>"
    ]
  },
  {
    "objectID": "venv_setup.html#in-class-exercise",
    "href": "venv_setup.html#in-class-exercise",
    "title": "1  Setting up your environment with VS Code",
    "section": "1.7 In-class exercise",
    "text": "1.7 In-class exercise\n\nCreate a new notebook.\nSave the file as In_class_exercise_1.\nGive a heading to the file - First HTML file.\nPrint Today is day 1 of my programming course.\nCompute and print the number of seconds in a day.\nGenerate html from the notebook using Quarto\n\nThe HTML file should look like the picture below.",
    "crumbs": [
      "Getting started: Coding environment",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting up your environment with VS Code</span>"
    ]
  },
  {
    "objectID": "venv_setup.html#reference",
    "href": "venv_setup.html#reference",
    "title": "1  Setting up your environment with VS Code",
    "section": "1.8 Reference",
    "text": "1.8 Reference\n\nGetting Started with VS Code\nJupyter Notebooks in VS Code\nQuarto",
    "crumbs": [
      "Getting started: Coding environment",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting up your environment with VS Code</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements.html",
    "href": "Variable_expressions_statements.html",
    "title": "2  Variables, expressions and statements",
    "section": "",
    "text": "2.1 Commenting code\nThe # symbol can be used to comment the code. Anything after the # sign is ignored by python. Commenting a code may have several purposes, such as:\nFor example, below is code with a comment to describe the purpose of the code:\n#Computing number of hours of lecture in this course\nprint(\"Total lecture hours of STAT201=\",10*3*(5/6))\n\nTotal lecture hours of STAT201= 25.0",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Variables, expressions and statements</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements.html#commenting-code",
    "href": "Variable_expressions_statements.html#commenting-code",
    "title": "2  Variables, expressions and statements",
    "section": "",
    "text": "Describe what is going to happen in a sequence of code\nDocument who wrote the code or other ancillary information\nTurn off a line of code - perhaps temporarily\n\n\n\n\n2.1.1 Practice exercise 1\nWhich of the following lines is a comment:\n\n#this is a comment\n##this may be a comment\nA comment#",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Variables, expressions and statements</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements.html#print-function-in-python",
    "href": "Variable_expressions_statements.html#print-function-in-python",
    "title": "2  Variables, expressions and statements",
    "section": "2.2 print() function in python",
    "text": "2.2 print() function in python\nThe print() function is a fundamental tool for displaying information.\n\n2.2.1 Basic Examples\n\n# Printing a simple string\nprint(\"Hello, World!\")\n\nHello, World!\n\n\n\n# Printing a string with a number\nprint (\"The total number of seconds in a day is\", 24*60*60)\n\nThe total number of seconds in a day is 86400\n\n\n\n# combine multiple strings using the + operator\nprint(\"Hello, \" + \"World!\")\n\nHello, World!\n\n\n\n\n2.2.2 concatenating strings and variables/expressions in print() function\n\n2.2.2.1 Using f-Strings (Formatted String Literals)\nf-strings provide a concise way to embed expressions inside strings. Introduced in Python 3.6, they improve readability and efficiency.\n\n\n2.2.2.2 Syntax\n\nUse f or F before the string.\nEmbed variables or expressions in {}.\n\n\n# Example 1: Basic Variable Substitution\nname = \"Alice\"\nage = 30\nprint(f\"My name is {name} and I am {age} years old.\")\n\n\n# Example 2: Arithmetic Expressions\na = 10\nb = 5\nprint(f\"The sum of {a} and {b} is {a + b}.\")\n\n\n# Example 3: Formatting Numbers\npi = 3.14159\nprint(f\"Pi rounded to 2 decimal places is {pi:.2f}.\")\nprint(f\"Pi rounded to 2 decimal places is {pi:.0f}.\")\n\n\nMy name is Alice and I am 30 years old.\nThe sum of 10 and 5 is 15.\nPi rounded to 2 decimal places is 3.14.\nPi rounded to 2 decimal places is 3.\n\n\n\nvalue = 123456789\nprint(f\"Rounded With commas: ${value:,}\")\n\nRounded With commas: $123,456,789\n\n\n\n\n2.2.2.3 Using str.format() Method\nThe str.format() method allows you to format strings by placing placeholders {} in the string and replacing them with variables or values.\n\"Your text here {}\".format(variable_or_expression)\n\n# Example 1: Basic Variable Substitution\nname = \"Bob\"\nage = 25\nprint(\"My name is {} and I am {} years old.\".format(name, age))\n\n\n# Example 2: Using Positional Arguments\nprint(\"The sum of {0} and {1} is {2}.\".format(a, b, a + b))\n\n\n# Example 3: Using Keyword Arguments\nprint(\"Pi rounded to 2 decimal places is {value:.2f}.\".format(value=pi))\nprint(\"Pi rounded to 2 decimal places is {value:.0f}.\".format(value=pi))\n\nMy name is Bob and I am 25 years old.\nThe sum of 10 and 5 is 15.\nPi rounded to 2 decimal places is 3.14.\nPi rounded to 2 decimal places is 3.\n\n\n\n\n\n2.2.3 Customizing output formatting\nThe print() function in Python is highly customizable. By default, it adds a newline character (\\n) at the end of each output and separates multiple arguments with a space (). However, these default behaviors can be changed using the end and sep parameters.\n\n2.2.3.1 Default Behavior of print()\nWhen you call print() multiple times, each statement starts on a new line:\n\nprint(\"Hello\")\nprint(\"World\")  # this is printed on a new line\n\nHello\nWorld\n\n\n\n\n2.2.3.2 Changing the end Parameter\nTo avoid automatic line breaks and control what is appended at the end of the output, use the end parameter.\n\nprint(\"Hello\", end=\" \")\nprint(\"World\") # this is printed on the same line\n\nHello World\n\n\n\nprint(\"Loading\", end=\"...\")\nprint(\"Complete\")\n\nLoading...Complete\n\n\n\nprint(\"Line 1\", end=\"\")\nprint(\"Line 2\")\n\nLine 1Line 2\n\n\n\n\n2.2.3.3 Changing the sep Parameter\nWhen printing multiple arguments, the default separator between them is a space. You can change this behavior using the sep parameter.\n\nprint(\"apple\", \"banana\", \"cherry\", sep=\", \")\n# Output: apple, banana, cherry\n\napple, banana, cherry\n\n\n\nprint(\"A\", \"B\", \"C\", sep=\"\")\n\nABC\n\n\n\nprint(\"python\", \"java\", \"c++\", sep=\"\\n\")\n\npython\njava\nc++\n\n\n\n\n2.2.3.4 Combining end and sep\nBoth end and sep can be used together for more control:\n\nprint(\"1\", \"2\", \"3\", sep=\"-\", end=\".\")\nprint(\" Done!\")\n\n1-2-3. Done!\n\n\n\n\n2.2.3.5 Takeaway:\n\nThe end parameter changes what is appended at the end of the output (default: \\n).\nThe sep parameter modifies how multiple arguments are separated (default: space).\nBoth can be combined to create customized output formatting.\n\n\n\n\n2.2.4 Practice exercise 2\nUse the print() function to:\n\nDisplay your name, age, and favorite hobby.\nFormat the output neatly using f-strings.\nUse sep and end to produce this output: apple:banana:cherry.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Variables, expressions and statements</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements.html#data-types",
    "href": "Variable_expressions_statements.html#data-types",
    "title": "2  Variables, expressions and statements",
    "section": "2.3 Data types",
    "text": "2.3 Data types\nPython provides several built-in data types for storing different kinds of information in variables. These data types can be broadly categorized into primitive data types and collection (containers) data types as shown at the beginning of this chapter. While collection data types will be covered in Chapter 5, this chapter focuses on primitive data types, which are used to represent a single value.\n\n2.3.1 Primitive Data Types\nThey represent a single value. In Python, primitive data types include:\n\nInteger (int): Whole numbers (e.g., 10, -3).\nFloating-point number (float): Numbers with decimals (e.g., 3.14, -2.7).\nBoolean (bool): Logical values True or False.\nNone type (None): Represents the absence of a value.\nString (str): A sequence of characters (e.g., \"hello\", 'world').\n\nThe data type of the object can be identified using the in-built python function type(). For example, see the following objects and their types:\n\ntype(4)\n\nint\n\n\n\ntype(4.4)\n\nfloat\n\n\n\ntype('4')\n\nstr\n\n\n\ntype(True)\n\nbool\n\n\n\n\n2.3.2 Practice exercise 3\nWhat is the datatype of the following objects?\n\n‘This is False’\n“This is a number”\n1000\n65.65\nFalse\n\n\n\n2.3.3 Commonly Used Built-in methods associated with each data type\n\n2.3.3.1 Strings\nStrings are sequences of characters and are immutable in Python.\nBelow are Commonly used Methods for strings:\n\nlower(): returns a string with every letter of the original in lowercase\nupper(): returns a string with every letter of the original in uppercase\nreplace(x,y): returns a string with every occurrence of x replaced by y\ncount(x): counts the number of occurrences of x in the string\nindex(x): returns the location of the first occurrence of x\nformat(): format strings\nisalpha(): returns True if every character of the string is a letter\n\nFor a more comprehensive list of string methods, please refer to here\n\n# Example Methods:\ns = \"Hello, World!\"\n\n# Returns the length of the string\nlen(s) \nprint(\"the length of the string is\", len(s))\n\n# Converts string to uppercase\ns.upper()\nprint(\"the string in uppercase is\", s.upper())\n\n# Converts string to lowercase\ns.lower()\nprint(\"the string in lowercase is\", s.lower())\n\n# Capitalizes the first character of the string\ns.capitalize()\nprint(\"the string with first letter capitalized is\", s.capitalize())\n\n# Finds the first occurrence of a substring\ns.find(\"World\")\nprint(\"the first occurrence of the substring is at\", s.find(\"World\"))\n\n# Replaces a substring with another string\ns.replace(\"World\", \"Python\")\nprint(\"the string after replacement is\", s.replace(\"World\", \"Python\"))\n\n# Splits the string into a list\ns.split(\", \")\nprint(\"the string after splitting is\", s.split(\", \"))\n\n# Strips leading/trailing whitespace\ns.strip()\nprint(\"the string after stripping is\", s.strip())\n\n# count the number of occurrences of a substring\ns.count(\"l\")\nprint(\"the number of occurrences of the substring is\", s.count(\"l\"))\n\n# Checks if the string is alphanumeric\ns.isalnum()\nprint(\"is the string alphanumeric?\", s.isalnum())\n\nthe length of the string is 13\nthe string in uppercase is HELLO, WORLD!\nthe string in lowercase is hello, world!\nthe string with first letter capitalized is Hello, world!\nthe first occurrence of the substring is at 7\nthe string after replacement is Hello, Python!\nthe string after splitting is ['Hello', 'World!']\nthe string after stripping is Hello, World!\nthe number of occurrences of the substring is 3\nis the string alphanumeric? False\n\n\n\n\n2.3.3.2 Single quotes ' and double quotes \" to define strings\nin Python, you can use either single quotes (') or double quotes (\") to define strings. Both are functionally equivalent, and you can choose based on preference or readability. Here’s an example:\n\n# Using single quotes\nstring1 = 'Hello, world!'\nprint(string1)\n\n# Using double quotes\nstring2 = \"Hello, world!\"\nprint(string2)\n\nHello, world!\nHello, world!\n\n\nWhen to use one over the other\n\nSingle quotes (') are often preferred for simple strings without embedded quotes.\nDouble quotes (\") are useful when your string contains a single quote, as it avoids the need for escaping:\n\n\n# Single quote in a double-quoted string\nmessage = \"It's a beautiful day!\"\nprint(message)\n\n# Double quote in a single-quoted string\nmessage = 'He said, \"Hello!\"'\nprint(message)\n\nIt's a beautiful day!\nHe said, \"Hello!\"\n\n\nEscaping quotes: If your string contains both single and double quotes, you can use the backslash (\\) to escape them:\n\n# Escaping single quotes in a single-quoted string\nstring_with_escape1 = 'It\\'s a sunny day.'\nprint(string_with_escape1)\n\n# Escaping double quotes in a double-quoted string\nstring_with_escape2 = \"He said, \\\"Hello!\\\"\"\nprint(string_with_escape2)\n\nIt's a sunny day.\nHe said, \"Hello!\"\n\n\nYou can also use triple quotes (''' or \"\"\") for strings that span multiple lines or contain both types of quotes without escaping:\n\nmulti_line_string = \"\"\"This string spans\nmultiple lines and can include 'single quotes' and \"double quotes\".\"\"\"\n\nprint(multi_line_string)\n\nThis string spans\nmultiple lines and can include 'single quotes' and \"double quotes\".\n\n\nDefine a f-string\n\nlanguage = \"Python\"\nlevel = \"beginner\"\ngreeting1 = \"I'm learning {} at a {} level.\".format(language, level)\nprint(greeting1 )\n\ngreeting2 = f\"I'm learning {language} at a {level} level.\"\nprint(greeting2)\n\nI'm learning Python at a beginner level.\nI'm learning Python at a beginner level.\n\n\nString Concatenation: Using the + Operator * Use the + operator to join strings together. * All operands must be strings; otherwise, you’ll get a TypeError. * * Use str() to convert non-strings to strings when necessary.\n\n# Basic Concatenation\ngreeting = \"Hello\"\nname = \"Alice\"\nmessage = greeting + \", \" + name + \"!\"\nprint(message)\n\n# Concatenating String Literals\nprint(\"Python\" + \" is \" + \"fun!\")\n\n# Concatenating with Variables\nlang = \"Python\"\nlevel = \"beginner\"\nprint(\"I'm learning \" + lang + \" as a \" + level + \" programmer.\")\n\nHello, Alice!\nPython is fun!\nI'm learning Python as a beginner programmer.\n\n\nString Repetition: String repetition is achieved using the * operator. It creates a new string by repeating an existing string a specified number of times.\n\n# Creating Patterns\nprint(\"*\" * 10)\n\n**********\n\n\n\nrepeat_count = 4\nprint(\"Python! \" * repeat_count)\n\nPython! Python! Python! Python! \n\n\n\n\n2.3.3.3 Integers\nIntegers are whole numbers, either positive or negative.\nCommonly used Methods:\n\n# Example:\nn = -42\n\n# Returns the absolute value\nabs(n)\nprint(\"the absolute value of the number is\", abs(n))\n\n# Converts to binary string\nbin(n)\nprint(\"the binary string of the number is\", bin(n)) \n\n# Converts to hexadecimal string\nhex(n)\nprint(\"the hexadecimal string of the number is\", hex(n))\n\n# Converts to octal string\noct(n)\nprint(\"the octal string of the number is\", oct(n))\n\n# Returns the power of a number\npow(n, 2)  # n^2\nprint(\"the power of the number is\", pow(n, 2))\n\n# Checks if a number is an integer\nisinstance(n, int)\nprint(\"is the number an integer?\", isinstance(n, int))\n\nthe absolute value of the number is 42\nthe binary string of the number is -0b101010\nthe hexadecimal string of the number is -0x2a\nthe octal string of the number is -0o52\nthe power of the number is 1764\nis the number an integer? True\n\n\n\n\n2.3.3.4 Floats\nFloats represent real numbers and are used for decimal or fractional values.\nCommonly Used Methods:\n\n# Example:\nf = 3.14159\n\n# Returns the absolute value\nabs(f)\nprint(\"the absolute value of the number is\", abs(f))\n\n# Rounds to the nearest integer\nround(f)\nprint(\"the number rounded to the nearest integer is\", round(f))\n\n# Converts to integer by truncating\nint(f)\nprint(\"the number converted to integer is\", int(f))\n\n# Checks if a number is a float\nisinstance(f, float)\nprint(\"is the number a float?\", isinstance(f, float))\n\nthe absolute value of the number is 3.14159\nthe number rounded to the nearest integer is 3\nthe number converted to integer is 3\nis the number a float? True\n\n\n\n\n2.3.3.5 Booleans\nBooleans represent logical values True or False.\nCommonly Used Methods:\n\n# Example:\nb = True\n\n# Converts to integer (True -&gt; 1, False -&gt; 0)\nint(b)\nprint(\"the integer value of the boolean is\", int(b))\n\n# Converts to string\nstr(b)\nprint(\"the string value of the boolean is\", str(b))\n\n# Logical operations:\nnot b  # Negates the boolean\nprint(\"the negation of the boolean is\", not b)\n\nthe integer value of the boolean is 1\nthe string value of the boolean is True\nthe negation of the boolean is False",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Variables, expressions and statements</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements.html#variables",
    "href": "Variable_expressions_statements.html#variables",
    "title": "2  Variables, expressions and statements",
    "section": "2.4 Variables",
    "text": "2.4 Variables\nA variable is a container for storing data values. Variables in Python are dynamically typed, meaning you don’t need to specify their type when declaring them.\n\n2.4.1 Variable Declaration:\n\nYou can create a variable by assigning a value to it using the = operator.\n\nFor example:\n\nx = 10 # Integer\nname = \"Alice\" # String\npi = 3.14 # Float\nis_active = True # Boolean\n\n\n\n2.4.2 Dynamic Typing:\n\nThe type of a variable is determined by the value assigned to it.\n\nFor example:\n\nx = 10 # x is an integer\ny = x # y is also an integer\n\n\n\n2.4.3 Variable Naming Rules:\n\nNames must start with a letter (a-z, A-Z) or an underscore (_).\nNames can only contain letters, numbers (0-9), and underscores.\nNames are case-sensitive (name and Name are different variables).\nReserved keywords (e.g., if, for, while) cannot be used as variable names.\n\n\nThere are certain reserved words in python that have some meaning, and cannot be used as variable names. These reserved words are:\n\n\n\n\n\n\n\n\n2.4.4 Best Practices:\nPython style guide: Please refer to the python style guide for best coding practices, such as naming variables, using spaces, tabs, and styling the different components of your code.\nFor example:\n\n# use descriptive variable names:\ntotal_price = 100\n\n\n# use snake_case for variable names\nuser_age = 25\n\n\n\n2.4.5 Checking Variable Types\nYou can use the type() function to check the type of a variable.\n\nx = 10\nprint(type(x)) \n\ny = \"Python\"\nprint(type(y))  \n\n&lt;class 'int'&gt;\n&lt;class 'str'&gt;\n\n\n\n\n2.4.6 Practice exercise 4\nWhich of the following variable names are valid?\n\nvar.name\nvar9name\n_varname\nvarname*\n\nIn the statements below, determine the variable type\n\nvalue = “name”\nconstant = 7\nanother_const = “variable”\nTrue_False = True",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Variables, expressions and statements</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements.html#assignment-statements",
    "href": "Variable_expressions_statements.html#assignment-statements",
    "title": "2  Variables, expressions and statements",
    "section": "2.5 Assignment statements",
    "text": "2.5 Assignment statements\nValues are assigned to variables with the assignment statement (=). An assignment statement may have a constant or an expression on the right hand side of the (=) sign, and a variable name on the left hand side.\nFor example, the code lines below are assignment statements\n\nvar = 2\nvar = var + 3",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Variables, expressions and statements</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements.html#expressions",
    "href": "Variable_expressions_statements.html#expressions",
    "title": "2  Variables, expressions and statements",
    "section": "2.6 Expressions",
    "text": "2.6 Expressions\n\n2.6.1 Mathematical Operations and Their Operators in Python\nPython provides the following operators for performing mathematical operations:\n\nExponentiation (**): Raises a number to the power of another.\n\nExample: 2 ** 3 results in 8.\n\nModulo (%): Returns the remainder of a division.\n\nExample: 10 % 3 results in 1.\n\nMultiplication (*): Multiplies two numbers.\n\nExample: 4 * 5 results in 20.\n\nDivision (/): Divides one number by another, resulting in a float.\n\nExample: 10 / 2 results in 5.0.\n\nAddition (+): Adds two numbers.\n\nExample: 7 + 3 results in 10.\n\nSubtraction (-): Subtracts one number from another.\n\nExample: 9 - 4 results in 5.\n\n\n\n\n2.6.2 Operator Precedence in Python\nThe operators listed above are in decreasing order of precedence, meaning:\n\nExponentiation (**) is evaluated first.\nModulo (%) is evaluated next.\nMultiplication (*) follows.\nDivision (/), if present, has the same precedence as multiplication.\nAddition (+) and Subtraction (-) are evaluated last, from left to right.\n\n\n2.6.2.1 Example: Precedence in Action\nConsider the expression: 2 + 3 % 4 * 2\nTo evaluate this, Python follows the precedence rules:\n\nModulo (%) is evaluated first:\n\n\n3 % 4\n\n3\n\n\nMultiplication (*) is evaluated next:\n\n3 * 2\n\n6\n\n\nAddition (+) is evaluated last:\n\n2+6\n\n8\n\n\nThus, the result of the expression 2 + 3 % 4 * 2 is 8.\n\n\n2.6.2.2 Key Takeaways\n\nPrecedence determines the order in which operations are performed in an expression.\nParentheses () can be used to override the default precedence and control the order of evaluation.\n\n\nresult = (2 + 3) % (4 * 2)\nprint(result)\n\n5\n\n\n\n\n\n2.6.3 Practice exercise 5\nWhich of the following statements is an assignment statement:\n\nx = 5\nprint(x)\ntype(x)\nx + 4\n\nWhat will be the result of the following expression:\n\n1%2**3*2+1",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Variables, expressions and statements</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements.html#user-input",
    "href": "Variable_expressions_statements.html#user-input",
    "title": "2  Variables, expressions and statements",
    "section": "2.7 User input",
    "text": "2.7 User input\nPython’s in-built input() function is used to take input from the user during program execution. It reads a line of text entered by the user and returns it as a string.\n\n# suppose we wish the user to onput their age:\nage = input(\"Enter your age:\")\n\nThe entered value is stored in the variable age and can be used for computation.\n\n2.7.0.1 Key Point\n\nThe input() is always returned as a string, even if the user enters a number.\nYou can convert the input to other types (e.g., int, float) using type conversion functions.\nThe program execution pauses until the user provides input.\n\n\n\n2.7.1 Examples\n\n# basic input\nname = input(\"Enter your name: \")\nprint(\"Hello, \" + name)\n\n\n# using f-string for formatted output\nname = input(\"Enter your name: \")\nprint(f\"Hello, {name}!\")\n\n\n# To take numeric input, you need to convert the string to an appropriate data type:\nage = int(input(\"Enter your age: \"))\nprint(f\"You will be {age + 1} years old next year.\")\n\n\n# input for calculating the area of a circle\nradius = float(input(\"Enter the radius of the circle: \"))\narea = 3.14 * radius ** 2\nprint(f\"The area of the circle is {area}\")\n\n\n\n2.7.2 Practice exercise 6\nAsk the user to input their year of birth, and print their age.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Variables, expressions and statements</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements.html#converting-data-types-in-python",
    "href": "Variable_expressions_statements.html#converting-data-types-in-python",
    "title": "2  Variables, expressions and statements",
    "section": "2.8 Converting data types in Python",
    "text": "2.8 Converting data types in Python\n\n2.8.1 Why Convert Data Types in Python?\nData type conversion is essential in Python for several reasons:\n\nCompatibility: Some operations or functions require specific data types to work correctly.\n\nExample: Performing arithmetic operations like addition or multiplication requires numeric types such as int or float. If the input is in another type, such as a string, it must be converted first.\n\n\n\n# Example: Converting strings to numbers\nprice = \"19.99\"\ntax = 0.07\ntotal_price = float(price) * (1 + tax)  # Convert string to float\nprint(total_price)  # Output: 21.3893\n\n21.3893\n\n\n\nData Processing: When working with input data (e.g., user input, etc), the data may need to be converted to the appropriate type for further analysis.\n\nExample: Converting strings to numbers to perform calculations\n\n# Example: Arithmetic requires numeric types\nnum_str = \"42\"\nresult = int(num_str) + 10  # Converts the string \"42\" to integer\nprint(result)  # Output: 52\n\n52\n\n\n\nError Prevention: Converting data types ensures consistency and prevents runtime errors caused by type mismatches.\n\n\n# Example: Avoiding type mismatch errors\nage = 25\nmessage = \"Your age is \" + str(age)  # Convert integer to string for concatenation\nprint(message)  # Output: \"Your age is 25\"\n\nYour age is 25\n\n\n\n\n2.8.2 How to Convert Data Types in Python\nPython provides several built-in functions for type conversion.\nCommon Conversion Functions:\n\n\n\n\n\n\n\n\nFunction\nDescription\nExample\n\n\n\n\nint()\nConverts to an integer (from float or string)\nint(\"42\") → 42\n\n\nfloat()\nConverts to a float\nfloat(\"3.14\") → 3.14\n\n\nstr()\nConverts to a string\nstr(42) → \"42\"\n\n\nbool()\nConverts to a boolean\nbool(1) → True\n\n\n\nHowever, in some cases, mathematical operators such as + and * can be applied on strings. The operator + concatenates multiple strings, while the operator * can be used to concatenate a string to itself multiple times:\n\n\"Hi\" + \" there!\"\n\n'Hi there!'\n\n\n\n\"5\" + '3'\n\n'53'\n\n\n\n\"5\"*8\n\n'55555555'",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Variables, expressions and statements</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements.html#errors-and-exceptions",
    "href": "Variable_expressions_statements.html#errors-and-exceptions",
    "title": "2  Variables, expressions and statements",
    "section": "2.9 Errors and Exceptions",
    "text": "2.9 Errors and Exceptions\nErrors and Exceptions are common while writing and executing Python code.\n\n2.9.1 Syntax errors\nSyntax errors occur if the code is written in a way that it does not comply with the rules / standards / laws of the language (python in this case). It occur when the Python parser encounters invalid syntax.\nFor example, suppose a values is assigned to a variable as follows:\n\n9value = 2\n\nThe above code when executed will indicate a syntax error as it violates the rule that a variable name must not start with a number.\n\n# another example\nprint(\"Hello World\"\n\nSolution: Fix the syntax issue by ensuring correct punctuation or structure.\n\n\n2.9.2 Exceptions\nEven if a statement or expression is syntactically correct, it may cause an error when an attempt is made to execute it. Errors detected during execution are called exceptions and are not unconditionally fatal:\nExceptions come in different types, and the type is printed as part of the message: below are the common ones:\n\nMisspelled or incorrectly capitalized variable and function names\nAttempts to perform operations (such as math operations) on data of the wrong type (ex. attempting to subtract two variables that hold string values)\nDividing by zero\nAttempts to use a type conversion function such as int on a value that can’t be converted to an int\n\nFor example, suppose a number is multipled as follws:\n\nmultiplication_result = misy * 4\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[29], line 1\n----&gt; 1 multiplication_result = misy * 4\n\nNameError: name 'misy' is not defined\n\n\n\nThe above code is syntactically correct. However, it will generate an error as the variable misy has not been defined as a number.\n\nint(\"abc\")\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[25], line 1\n----&gt; 1 int(\"abc\")\n\nValueError: invalid literal for int() with base 10: 'abc'\n\n\n\n\nprint(\"2\" + 3)\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[24], line 1\n----&gt; 1 print(\"2\" + 3)\n\nTypeError: can only concatenate str (not \"int\") to str\n\n\n\n\nprint(10 / 0)\n\n\n---------------------------------------------------------------------------\nZeroDivisionError                         Traceback (most recent call last)\nCell In[27], line 1\n----&gt; 1 print(10 / 0)\n\nZeroDivisionError: division by zero\n\n\n\n\n\n2.9.3 Exception Handling\nWhen an error occurs, or exception as we call it, Python will normally stop and generate an error message.\nIf we suspect that some lines of code may produce an error, we can put them in a try block, and if an error does occur, we can use the except block to instead execute an alternative piece of code. This way the program will not stop if an error occurs within the try block, and instead will be directed to execute the code within the except block.\nThese exceptions can be handled Using the Try-Except Blocks\n\n\ntry:\n    print(10 / 0)\nexcept:\n    print(\"Cannot divide by zero!\")\n\n\nCannot divide by zero!\n\n\nSince the try block raises an error, the except block will be executed. Without the try block, the program will crash and raise an error:\nThe finally block, if specified, will be executed regardless if the try block raises an error or not.\n\ntry:\n    print(10 / 0)\nexcept:\n    print(\"Cannot divide by zero!\")\nfinally:\n    print(\"This will always execute.\")\n\nCannot divide by zero!\nThis will always execute.\n\n\n\n\n2.9.4 Practice exercise 7\nSuppose we wish to compute tax using the income and the tax rate. Identify the type of error from amongst syntax error, semantic error and run-time error in the following pieces of code.\n\nincome = 2000\ntax = .08 * Income\nprint(\"tax on\", income, \"is:\", tax)\n\n\nincome = 2000\ntax = .08 x income\nprint(\"tax on\", income, \"is:\", tax)\n\n\nincome = 2000\ntax = .08 ** income\nprint(\"tax on\", income, \"is:\", tax)\n\n\n\n2.9.5 Practice exercise 8\nInput an integer from the user. If the user inputs a valid integer, print whether it is a multiple of 3. However, if the user does not input a valid integer, print a message saying that the input is invalid.\n\nnum = input(\"Enter an integer:\")\n\n#The code lines within the 'try' block will execute as long as they run without error  \ntry:\n    #Converting the input to integer, as user input is a string\n    num_int = int(num)  \n    \n    #checking if the integer is a multiple of 3\n    if num_int % 3 == 0:            \n        print(\"Number is a multiple of 3\")\n    else:\n        print(\"Number is not a multiple of 3\")\n        \n#The code lines within the 'except' block will execute only if the code lines within the 'try' block throw an error        \nexcept:\n    print(\"Input must be an integer\")\n\nInput must be an integer\n\n\n\n\n2.9.6 Semantic errors (bugs)\nSemantic errors occur when the code executes without an error being indicated by the compiler. However, it does not work as inteded by the user. For example, consider the following code of mutiplying the number 6 by 3: x = ‘6’ x * 3 If it was intended to multiply the number 6, then the variable x should have been defined as x=6 so that x has a value of type integer. However, in the above code 6 is a string type value. When a string is multiplied by an integer, say n, it concatenates with itself n times.\n\n\n2.9.7 Practice exercise 9\nThe formula for computing final amount if one is earning compund interest is given by: \\[A = P\\bigg(1+\\frac{r}{n}\\bigg)^{nt},\\]\nwhere:\nP = Principal amount (initial investment),\nr = annual nominal interest rate,\nn = number of times the interest is computed per year,\nt = number of years\nWrite a Python program that assigns the principal amount of $10000 to variable P, assign to n the value 12, and assign to r the interest rate of 8%. Then have the program prompt the user for the number of years t that the money will be compounded for. Calculate and print the final amount after t years.\nWhat is the amount if the user enters t as 4 years?",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Variables, expressions and statements</span>"
    ]
  },
  {
    "objectID": "Control flow.html",
    "href": "Control flow.html",
    "title": "3  Control flow statements",
    "section": "",
    "text": "3.1 Indentation in Python\nA control flow statement in a computer program determines the individual lines of code to be executed and/or the order in which they will be executed. In this chapter, we’ll learn about 3 types of control flow statements:\nSyntax: Python uses indentation to identify the code to be executed if a condition is true. All the code indented within a condition is executed if the condition is true.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Control flow statements</span>"
    ]
  },
  {
    "objectID": "Control flow.html#indentation-in-python",
    "href": "Control flow.html#indentation-in-python",
    "title": "3  Control flow statements",
    "section": "",
    "text": "3.1.1 What is Indentation?\n\nIndentation refers to the spaces or tabs at the beginning of a line of code.\nIn Python, indentation is mandatory and is used to define the structure of the code, such as blocks in loops, conditionals, functions, and classes.\nUnlike some other programming languages, Python does not use braces {} or keywords like begin and end to define blocks of code.\n\n\n\n3.1.2 Rules for Indentation\n\nConsistency is Key:\n\nUse either spaces or tabs for indentation, but do not mix them in the same file.\nThe recommended standard is to use 4 spaces per indentation level (PEP 8).\n\nIndentation Levels:\n\nEach block of code under a statement (e.g., if, for, while, def) must be indented one level deeper than the statement itself.\n\n\n\n\n\n\n\n\n\n3.1.3 Examples\n\n# Example of proper indentation\ndef greet(name):\n    if name:\n        print(f\"Hello, {name}!\")\n    else:\n        print(\"Hello, World!\")",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Control flow statements</span>"
    ]
  },
  {
    "objectID": "Control flow.html#conditonal-execution",
    "href": "Control flow.html#conditonal-execution",
    "title": "3  Control flow statements",
    "section": "3.2 Conditonal execution",
    "text": "3.2 Conditonal execution\nThe first type of control flow satement is if-elif-else. This statement helps with conditional execution of code, i.e., the piece of code to be executed is selected based on certain condition statements(s).\n\n\n\n\n\n\n3.2.1 Comparison operators\nFor testing if conditions are true or false, first we need to learn the operators that can be used for comparison. For example, suppose we want to check if two objects are equal, we use the == operator:\n\n5 == 6\n\nFalse\n\n\nMake sure you can differentiate between the == and = operators: - ==: This is a comparison operator, used to compare two values and return a Boolean result (True or False). - =: This is an assignment operator, used to assign values to variables.\n\nx = \"hi\"\ny = \"hi\"\nx == y\n\nTrue\n\n\nBelow are the python comparison operators and their meanings.\n\n\n\nPython code\nMeaning\n\n\n\n\nx == y\nProduce True if … x is equal to y\n\n\nx != y\n… x is not equal to y\n\n\nx &gt; y\n… x is greater than y\n\n\nx &lt; y\n… x is less than y\n\n\nx &gt;= y\n… x is greater than or equal to y\n\n\nx &lt;= y\n… x is less than or equal to y\n\n\n\n\n\n3.2.2 Logical Operators in Conditional Statements\nLogical operators are used to combine multiple conditions in a conditional statement, allowing for more complex decision-making. Python provides three logical operators:\n\n3.2.2.1 and\n\nDescription: Returns True if both conditions are True.\nExample:\n\n\nx = 5\nif x &gt; 0 and x &lt; 10:\n    print(\"x is a positive single-digit number.\")\n\nx is a positive single-digit number.\n\n\n\n\n3.2.2.2 or\n\nDescription: Returns True if at least one condition is True.\nExample:\n\n\nx = -5\nif x &lt; 0 or x &gt; 10:\n    print(\"x is either negative or greater than 10.\")\n\nx is either negative or greater than 10.\n\n\n\n\n3.2.2.3 not\n\nDescription: Returns the negation of a condition (True becomes False and vice versa).\nExample:\n\n\nx = 5\nif not (x &lt; 0):\n    print(\"x is not negative.\")\n\nx is not negative.\n\n\n\n\n\n3.2.3 if-elif-else statement\nThe if-elif-else statements can check several conditions, and execute the code corresponding to the condition that is true. Note that there can be as many elif statements as required.\nSyntax: Python uses indentation to identify the code to be executed if a condition is true. All the code indented within a condition is executed if the condition is true.\nExample: Input an integer. Print whether it is positive or negative.\n\nnumber = input(\"Enter a number:\")  #Input an integer\nnumber_integer = int(number)       #Convert the integer to 'int' datatype\nif number_integer &gt; 0:               #Check if the integer is positive\n    print(\"Number is positive\")\nelse:\n    print(\"Number is negative\")\n\nNumber is positive\n\n\nIn the above code, note that anything entered by the user is taken as a string datatype by python. However, a string cannot be positive or negative. So, we converted the number input by the user to integer to check if it was positive or negative.\nThere may be multiple statements to be executed if a condition is true. See the example below.\nExample: Input a number. Print whether it is positive, negative or zero. If it is negative, print its absolute value.\n\nnumber = input(\"Enter a number:\")\nnumber_integer = int(number)\nif number_integer &gt; 0:\n    print(\"Number is positive\")\nelif number_integer == 0:\n    print(\"Number is zero\")\nelse:\n    print(\"Number is negative\")\n    print(\"Absolute value of number = \", abs(number_integer))\n\nNumber is positive\n\n\n\n\n3.2.4 Practice exercise 1\nInput a number. Print whether its odd or even.\nSolution:\n\nnum = int(input(\"Enter a number: \"))\nif num%2 == 0:           #Checking if the number is divisible by 2\n    print(\"Number is even\")\nelse:\n    print(\"Number is odd\")\n\nNumber is odd\n\n\n\n\n3.2.5 Practice exercise 2\n\n3.2.5.1 \nAsk the user to enter their exam score. Print the grade based on their score as follows:\n\n\n\nScore\nGrade\n\n\n\n\n(90,100]\nA\n\n\n(80,90]\nB\n\n\n[0,80]\nC\n\n\n\nIf the user inputs a score which is not a number in [0,100], print invalid entry.\nSolution:\n\nscore = input(\"Enter exam score:\")\ntry:\n    \n    #As exam score can be a floating point number (such as 90.65), we need to use 'float' instead of 'int' to convert the user input to a floating point number\n    score_num = float(score)\n    if score_num &gt; 90 and score_num &lt;= 100:\n        print(\"Grade: A\")\n    elif score_num &gt; 80 and score_num &lt;= 90:\n        print(\"Grade: B\")\n    elif score_num &gt;= 0 and score_num &lt;= 80:\n        print(\"Grade: C\")\n    else:\n        print(\"Invalid score\")     #If a number is less than 0 or more than 100\nexcept:\n    print(\"Invalid input\")         #If the input is not a number\n\nGrade: C\n\n\n\n\n3.2.5.2 \nNested if-elif-else statements: This question will lead you to create nested if statements, i.e., an if statement within another if statement.\nThink of a number in [1,5]. Ask the user to guess the number.\n\nIf the user guesses the number correctly, print “Correct in the first attempt!”, and stop the program. Otherwise, print “Incorrect! Try again” and give them another chance to guess the number.\nIf the user guesses the number correctly in the second attempt, print “Correct in the second attempt”, otherwise print “Incorrect in both the attempts, the correct number is:”, and print the correct number.\n\nSolution:\n\n#Let us say we think of the number. Now the user has to guess the number in two attempts.\nrand_no = 3\nguess = input(\"Guess the number:\")\nif int(guess)==rand_no:\n    print(\"Correct in the first attempt!\")\n    \n#If the guess is incorrect, the program will execute the code block below    \nelse:    \n    guess = input(\"Incorrect! Try again:\")\n    if int(guess) == rand_no:\n        print(\"Correct in the second attempt\")\n    else:\n        print(\"Incorrect in the both the attempts, the correct number was:\", rand_no)\n\nIncorrect in the both the attempts, the correct number was: 3",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Control flow statements</span>"
    ]
  },
  {
    "objectID": "Control flow.html#loops-in-python",
    "href": "Control flow.html#loops-in-python",
    "title": "3  Control flow statements",
    "section": "3.3 Loops in Python",
    "text": "3.3 Loops in Python\nPython provides two types of loops: for and while loops. Loops are used to execute a block of code repeatedly until a certain condition is met.\n\n3.3.1 Using range() in for Loops\nThe range() function is commonly used with loops in Python to generate a sequence of numbers. It is particularly useful with for loops.\n\n3.3.1.1 Syntax of range()\nrange(start, stop, step)\n\nstart: (Optional) The starting value of the sequence (default is 0).\nstop: (Required) The endpoint of the sequence (exclusive).\nstep: (Optional) The difference between each number in the sequence (default is 1).\n\nUsing the range() function, the for loop can iterate over a sequence of numbers. See the examples below.\n\nfor i in range(5):\n    print(i)\n\n0\n1\n2\n3\n4\n\n\nNote that the last element is one less than the integer specified in the range() function.\n\n# specify start and stop\nfor i in range(5, 10):\n    print(i)\n\n5\n6\n7\n8\n9\n\n\n\n# use step\nfor i in range(0, 10, 2):\n    print(i)\n\n0\n2\n4\n6\n8\n\n\n\n# A negative step will count down\nfor i in range(10, 0, -2):\n    print(i)\n\n10\n8\n6\n4\n2\n\n\n\n# if start is greater than steop, the range will generate an empty sequence\nfor i in range(10, 0):\n    print(i)\n\nExample: Print the first n elements of the Fibonacci sequence, where n is an integer input by the user, such that n&gt;2. In a fibonacci sequence, each number is the sum of the preceding two numbers, and the sequence starts from 0,1. The sequence is as follows:\n0,1,1,2,3,5,8,13,….\n\nn = int(input(\"Enter number of elements:\"))\n\n#Initializing the sequence to start from 0, 1\nn1, n2 = 0, 1\n\n#Printing the first two numbers of the sequence\nprint(n1)\nprint(n2)\n\nfor i in range(n-2):  #Since two numbers of the sequence are already printed, n-2 numbers are required\n    \n    #Computing the next number of the sequence as the summation of the previous two numbers\n    n3 = n1 + n2\n    print(n3)\n    \n    #As 'n3' is already printed, it is no longer the next number of the sequence. \n    #Thus, we move the values of the variables n1 and n2 one place to the right to compute the next number of the sequence.\n    n1 = n2\n    n2 = n3  \n    \nprint(\"These are the first\", n, \"elements of the fibonacci series\")\n\n0\n1\n1\n2\n3\n5\n8\n13\n21\n34\n55\n89\n144\n233\n377\n610\n987\n1597\n2584\n4181\n6765\n10946\n17711\n28657\n46368\n75025\n121393\n196418\n317811\n514229\n832040\n1346269\n2178309\n3524578\n5702887\n9227465\n14930352\n24157817\n39088169\n63245986\n102334155\n165580141\n267914296\n433494437\n701408733\n1134903170\n1836311903\n2971215073\n4807526976\n7778742049\n12586269025\n20365011074\n32951280099\n53316291173\n86267571272\n139583862445\n225851433717\n365435296162\n591286729879\n956722026041\n1548008755920\n2504730781961\n4052739537881\n6557470319842\n10610209857723\n17167680177565\n27777890035288\n44945570212853\n72723460248141\n117669030460994\n190392490709135\n308061521170129\n498454011879264\n806515533049393\n1304969544928657\n2111485077978050\n3416454622906707\n5527939700884757\nThese are the first 78 elements of the fibonacci series\n\n\nAs in the if-elif-else statement, the for loop uses identation to indicate the piece of code to be run repeatedly.\n\n# nested with range\nfor i in range(5):\n    for j in range(5):\n        print(i, j)\n\n0 0\n0 1\n0 2\n0 3\n0 4\n1 0\n1 1\n1 2\n1 3\n1 4\n2 0\n2 1\n2 2\n2 3\n2 4\n3 0\n3 1\n3 2\n3 3\n3 4\n4 0\n4 1\n4 2\n4 3\n4 4\n\n\n\n\n\n3.3.2 while loop\nWith a while loops, a piece of code is executed repeatedly until certain condition(s) hold.\nExample: Print all the elements of the Fibonacci sequence less than n, where n is an integer input by the user, such that n&gt;2. In a fibonacci sequence, each number is the sum of the preceding two numbers, and the sequence starts from 0,1. The sequence is as follows:\n0,1,1,2,3,5,8,13,….\n\nn = int(input(\"Enter the value of n:\"))\n\n#Initializing the sequence to start from 0, 1\nn1, n2 = 0, 1\n\n#Printing the first number of the sequence\nprint(n1)\n\nwhile n2 &lt; n:\n    \n    #Print the next number of the sequence\n    print(n2)\n    \n    #Comptuing the next number of the sequence as the summation of the previous two numbers\n    n3 = n1 + n2\n    \n    #As n2 is already printed, assigning n2 to n3, so that the next number of the sequence (i.e., currently n3) is printed if the program enters the loop again\n    #Assigning n1 to n2 as n1 has already been used to compute the next number of the seqeunce (i.e., currently n3). \n    n1 = n2\n    n2 = n3  \nprint(\"These are all the elements of the fibonacci series less than\", n)\n\n0\n1\n1\n2\n3\n5\n8\n13\n21\nThese are all the elements of the fibonacci series less than 23\n\n\n\n\n3.3.3 Practice exercise 3\n\n3.3.3.1 \nWrite a program that identifies whether a number input by the user is prime or not.\nSolution:\n\nnumber = int(input(\"Enter a positive integer:\"))\n\n#Defining a variable that will have a value of 0 if there are no divisors\nnum_divisors = 0\n\n#Checking if the number has any divisors from 2 to half of the number\nfor divisor in range(2,int(number/2+1)):\n        if number % divisor == 0:\n            \n            #If the number has a divisor, setting num_divisors to 1, to indicate that the number is not prime\n            num_divisors = 1\n            \n            #If a divisor has been found, there is no need to check if the number has more divisors.\n            #Even if the number has a single divisor, it is not prime. Thus, we 'break' out of the loop that checks for divisors\n            #If you don't 'break', your code will still be correct, it will just do some unnecessary computations\n            break\n            \n#If there are no divisors of the number, it is prime, else not prime      \nif num_divisors == 0:\n    print(\"Prime\")   \nelse:\n    print(\"Not prime\")\n\nNot prime\n\n\n\n\n3.3.3.2 \nUpdate the program above to print the prime numbers starting from 2, and less than n where n is a positive integer input by the user.\nSolution:\n\nn = int(input(\"Enter a positive integer:\"))\n\n#Defining a variable - number_iterator. We will use this variable to iterate over all integers from 2 to n, not including n.\n#While iterating over each integer from 2 to n, we will check if the integer is prime or not. If it is prime, it will be printed\nnumber_iterator = 2\n\nprint(number_iterator) #Since '2' is a prime number, we can print it directly (without checking)\n\n#Continue to check for prime numbers until n (but not including n)\nwhile(number_iterator &lt; n):\n    \n    #After each check, increment the number_iterator to check if the next integer is prime\n    number_iterator = number_iterator + 1\n    \n    #Defining a variable that will have a value of 0 if there are no divisors\n    num_divisors = 0\n    \n    #Checking if the integer has any divisors from 2 to half of the integer being checked \n    for divisor in range(2,int(number_iterator/2 + 1)):\n        if number_iterator % divisor == 0:\n            \n            #If the integer has a divisor, setting num_divisors to 1, to indicate that the number is not prime\n            num_divisors = 1\n            \n            #If a divisor has been found, there is no need to check if the integer has more divisors.\n            #Even if the integer has a single divisor, it is not prime. \n            #Thus, we 'break' out of the loop that checks for divisors\n            break\n            \n    #If there are no divisors of the integer being checked, the integer is a prime number, and we print it\n    if num_divisors == 0:\n        print(number_iterator)   \n\n2\n3\n5\n7\n11\n13\n17\n19\n23\n29\n31\n37\n41\n43",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Control flow statements</span>"
    ]
  },
  {
    "objectID": "Control flow.html#control-flow-statements",
    "href": "Control flow.html#control-flow-statements",
    "title": "3  Control flow statements",
    "section": "3.4 Control flow statements",
    "text": "3.4 Control flow statements\nThey are used to influence the flow of execution in loops or blocks of code. Python provides three such statements: break, continue, and pass.\n\n3.4.1 break statement\nThe break statement is used to exit a loop prematurely before it has iterated through all elements or completed its condition. It is commonly used in both for and while loops to stop the execution of the loop when a specific condition is met.\nFor example\n\nfor i in range(10):\n    if i == 5:\n        print(\"Breaking the loop at i =\", i)\n        break\n    print(i)\n\n0\n1\n2\n3\n4\nBreaking the loop at i = 5\n\n\n\n\n3.4.2 Practice exercise 4\nWrite a program that finds and prints the largest factor of a number input by the user. Check the output if the user inputs 133.\nSolution:\n\nnum = int(input(\"Enter an integer:\"))\n\n#Looping from the half the integer to 0 as the highest factor is likely to be closer to half the integer value than 0\nfor i in range(int(num/2) + 1, 0, -1):\n    if num%i == 0:\n        print(\"Largest factor = \", i)\n        \n        #Exiting the loop if the largest integer is found\n        break\n\nLargest factor =  1\n\n\n\n\n3.4.3 continue statement\nThe continue statement is used to skip the current iteration of a loop and move to the next iteration. Unlike the break statement, it does not terminate the loop but allows the loop to continue running.\nFor example, consider the following code:\n\nfor i in range(5):\n    if i == 3:\n        print(f\"Skipping iteration {i}\")\n        continue\n    print(f\"Processing {i}\")\n\nProcessing 0\nProcessing 1\nProcessing 2\nSkipping iteration 3\nProcessing 4\n\n\nThe continue statement skips the iteration when i == 3 and moves to the next iteration.\n\n\n3.4.4 Practice exercise 5:\nWrite a program that asks the user the question, “How many stars are in the Milky Way (in billions)?”. If the user answers 100, the program should print correct, and stop. However, if the user answers incorrectly, the program should print “incorrect”, and ask them if they want to try again. The program should continue to run until the user answers correctly, or they want to stop trying.\n\n#Defining an infinite while loop as the loop may need to run indefinitely if the user keeps answering incorrectly and trying again\nwhile True:\n    answer = input(\"How many stars are there in the Milky Way? \")\n    if answer == '100':\n        print(\"Correct\")\n        \n        #Exiting the loop if the user answers correctly\n        break\n    else:\n        print(\"Incorrect\")\n        try_again = input(\"Do you want to try again? (Y/N) \")\n        if try_again == 'Y':\n            \n            #Continuing with the infinite loop if the user wants to try again\n            continue\n        else:\n            \n            #Exiting the infinite loop if the user wants to stop tryinh\n            break\n\nIncorrect\n\n\n\n\n3.4.5 pass statement\nThe pass statement in Python is a null statement. It serves as a placeholder and does nothing when executed. It is often used in situations where a statement is syntactically required, but no action is intended, or the code is yet to be implemented. In Chapter 4, we will use this statement when we explore user-defined functions.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Control flow statements</span>"
    ]
  },
  {
    "objectID": "Control flow.html#loops-with-strings",
    "href": "Control flow.html#loops-with-strings",
    "title": "3  Control flow statements",
    "section": "3.5 Loops with strings",
    "text": "3.5 Loops with strings\nStrings in Python are sequences of characters. You can use loops to iterate over strings and perform various operations on each character or a subset of the string.\nConsider the following string:\n\nsentence = \"She sells sea shells on the sea shore\"\n\nThe \\(i^{th}\\) character of the string can be retrieved by its index. For example, the first character of the string sentence is:\n\nsentence[0]\n\n'S'\n\n\nA for loop iterates over each character in a string, one at a time.\n\nfor char in sentence:\n    print(char, end=\" \")\n\nS h e   s e l l s   s e a   s h e l l s   o n   t h e   s e a   s h o r e \n\n\nA while loop can be used to iterate over a string by index.\n\nindex = 0\nwhile index &lt; len(sentence):\n    print(sentence[index], end=\" \")\n    index += 1\n\nS h e   s e l l s   s e a   s h e l l s   o n   t h e   s e a   s h o r e \n\n\n\n3.5.1 The enumerate() Function in Python\nThe enumerate() function adds a counter to an iterable and returns it as an enumerate object, which can be iterated over to get both the index and the value of each element in the iterable.\n\n3.5.1.1 Syntax\nenumerate(iterable, start=0)\n\n# using enumerate\nfor index, char in enumerate(sentence):\n    print(index, char, sep=\": \", end=\" \")\n\n0: S 1: h 2: e 3:   4: s 5: e 6: l 7: l 8: s 9:   10: s 11: e 12: a 13:   14: s 15: h 16: e 17: l 18: l 19: s 20:   21: o 22: n 23:   24: t 25: h 26: e 27:   28: s 29: e 30: a 31:   32: s 33: h 34: o 35: r 36: e \n\n\nSlicing a string:\nA part of the string can be sliced by passing the starting index (say start) and the stopping index (say stop) as start:stop to the index operator []. This is called slicing a string. For a string S, the characters starting from the index start upto the index stop, but not including stop, can be sliced as S[start:stop].\nFor example, the slice of the string sentence from index 4 to index 9, but not including 9 is:\n\nsentence[4:9]\n\n'sells'\n\n\nExample: Counting characters\nInput a string, and count and print the number of “t”s.\n\nstr1 = input(\"Enter a sentence:\")\n\n#Initializing a variable 'count_t' which will store the number of 't's in the string\ncount_t = 0\n\n#Iterating over the entire length of the string. \n#The length of the string is given by the len() function\nfor i in range(len(str1)):\n    \n    #If the ith character of the string is 't', then we count it\n    if str1[i] == 't':\n        count_t = count_t + 1\n\nprint(\"Number of 't's in the str1 = \", count_t)\n\nNumber of 't's in the str1 =  2\n\n\nAnother way to achieve this is to use count()\n\nstr1.count('t')\n\n2\n\n\n\n\n\n3.5.2 Practice exercise 6\nChecking for a Substring\nWrite a program that asks the user to input a string, and print the number of “the”s in the string.\n\nstr2 = input(\"Enter a sentence:\")\n\n#Defining a variable to store the count of the word 'the'\ncount_the = 0\n\n#Looping through the entire length of the string except the last 3 letters.\n#As we are checking three letters at a time starting from the index 'i', the last 3 letters of the string will be checked when 'i' is len(string)-3\nfor i in range(len(str2) - 3):\n    \n    #Slicing 3 letters of the string and checking if they are 'the'\n    if str2[i:(i+3)] == 'the':\n        \n        #Counting the words that are 'the'\n        count_the = count_the + 1\nprint(\"Number of 'the's in the str2 = \", count_the)\n\nNumber of 'the's in the str2 =  3\n\n\n\n# using the count method\nstr2.count('the')\n\n3",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Control flow statements</span>"
    ]
  },
  {
    "objectID": "functions2.html",
    "href": "functions2.html",
    "title": "4  Functions",
    "section": "",
    "text": "4.1 Function Definition\nFunctions are the fundamental building blocks of any Python program. They are organized blocks of reusable code designed to perform a specific task. A function can take one or more inputs (parameters), execute a block of code, and optionally return one or more values.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "functions2.html#introduction",
    "href": "functions2.html#introduction",
    "title": "4  Functions",
    "section": "",
    "text": "It reduces the number of lines of code, as the lines of code need to be written just once in the function definition. Thereafter, the function is called by its name, wherever needed in the program. This makes the code compact, and enhances readability.\nIt makes the process of writing code easier, as the user needs to just type the name of the function, wherever it is needed, instead of pasting lines of code.\nIt can be used in different programs, thereby saving time in writing other programs.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "functions2.html#defining-a-function",
    "href": "functions2.html#defining-a-function",
    "title": "4  Functions",
    "section": "4.4 Defining a function",
    "text": "4.4 Defining a function\nLook at the function defined below. It asks the user to input a number, and prints whether the number is odd or even.\n\n#This is an example of a function definition\n\n#A function definition begins with the 'def' keyword followed by the name of the function.\n#Note that 'odd_even()' is the name of the function below.\ndef odd_even():           \n    num = int(input(\"Enter an integer:\"))\n    if num%2==0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")   #Function definition ends here\n        \nprint(\"This line is not a part of the function as it is not indented\") #This line is not a part of the function\n\nThis line is not a part of the function as it is not indented\n\n\nNote that the function is defined using the def keyword. All the lines within the function definition are indented. The indentation shows the lines of code that below to the function. When the indentation stops, the function definition is considered to have ended.\nWhenever the user wishes to input a number and print whether it is odd or even, they can call the function defined above by its name as follows:\n\nodd_even()\n\nEnter an integer:5\nOdd\n\n\nIn Python, empty parentheses are used when defining a function, even if it doesn’t take any parameters. This is a syntactic requirement to differentiate between variables and functions. It helps Python understand that you are defining a function, not just referencing a variable.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "functions2.html#parameters-and-arguments-of-a-function",
    "href": "functions2.html#parameters-and-arguments-of-a-function",
    "title": "4  Functions",
    "section": "4.5 Parameters and arguments of a function",
    "text": "4.5 Parameters and arguments of a function\nNote that the function defined above needs no input when called. However, sometimes we may wish to define a function that takes input(s), and performs computations on the inputs to produce an output. These input(s) are called parameter(s) of a function. When a function is called, the value(s) of these parameter(s) must be specified as argument(s) to the function.\n\n4.5.1 Function with a parameter\nLet us change the previous example to write a function that takes an integer as an input argument, and prints whether it is odd or even:\n\n#This is an example of a function definition that has an argument\ndef odd_even(num):           \n    if num%2==0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")\n\nWe can use the function whenever we wish to find a number is odd or even. For example, if we wish to find that a number input by the user is odd or even, we can call the function with the user input as its argument.\n\nnumber = int(input(\"Enter an integer:\"))\nodd_even(number)\n\nEnter an integer:6\nEven\n\n\nNote that the above function needs an argument as per the function definition. It will produce an error if called without an argument:\n\nodd_even()\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-8-d86a5f720e3b&gt; in &lt;module&gt;\n----&gt; 1 odd_even()\n\nTypeError: odd_even() missing 1 required positional argument: 'num'\n\n\n\n\n\n4.5.2 Function with a parameter having a default value\nTo avoid errors as above, sometimes is a good idea to assign a default value to the parameter in the function definition:\n\n#This is an example of a function definition that has an argument with a default value\ndef odd_even(num=0):           \n    if num%2==0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")\n\nNow, we can call the function without an argument. The function will use the default value of the parameter specified in the function definition.\n\nodd_even()\n\nEven\n\n\n\n\n4.5.3 Function with multiple parameters\nA function can have as many parameters as needed. Multiple parameters/arguments are separated by commas. For example, below is a function that inputs two strings, concatenates them with a space in between, and prints the output:\n\ndef concat_string(string1, string2):\n    print(string1+' '+string2)\n\n\nconcat_string(\"Hi\", \"there\")\n\nHi there\n\n\n\n\n4.5.4 Practice exercise 1\nWrite a function that prints prime numbers between two real numbers - a and b, where a and b are the parameters of the function. Call the function and check the output with a = 60, b = 80.\nSolution:\n\ndef prime_numbers (a,b=100):\n    num_prime_nos = 0\n    \n    #Iterating over all numbers between a and b\n    for i in range(a,b):\n        num_divisors=0\n        \n        #Checking if the ith number has any factors\n        for j in range(2, i):\n            if i%j == 0:\n                num_divisors=1;break;\n                \n        #If there are no factors, then printing and counting the number as prime        \n        if num_divisors==0:\n            print(i)\nprime_numbers(60,80)\n\n61\n67\n71\n73\n79",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "functions2.html#functions-that-return-objects",
    "href": "functions2.html#functions-that-return-objects",
    "title": "4  Functions",
    "section": "4.6 Functions that return objects",
    "text": "4.6 Functions that return objects\nUntil now, we saw functions that print text. However, the functions did not return any object. For example, the function odd_even prints whether the number is odd or even. However, we did not save this information. In future, we may need to use the information that whether the number was odd or even. Thus, typically, we return an object from the function definition, which consists of the information we may need in the future.\nThe example odd_even can be updated to return the text “odd” or “even” as shown below:\n\n#This is an example of a function definition that has an argument with a default value, and returns an object\ndef odd_even(num=0):           \n    if num%2==0:\n        return(\"Even\")\n    else:\n        return(\"Odd\")\n\nThe function above returns a string “Odd” or “Even”, depending on whether the number is odd or even. This result can be stored in a variable, which can be used later.\n\nresponse=odd_even(3)\nresponse\n\n'Odd'\n\n\nThe variable response now refers to the object where the string “Odd” or “Even” is stored. Thus, the result of the computation is stored, and the variable can be used later on in the program. Note that the control flow exits the function as soon as the first return statement is executed.\nFigure 4.1 below shows the terminology associated with functions.\n\n\n\n\n\n\n\nFigure 4.1: Terminology associated with functions",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "functions2.html#global-and-local-variables-with-respect-to-a-function",
    "href": "functions2.html#global-and-local-variables-with-respect-to-a-function",
    "title": "4  Functions",
    "section": "4.7 Global and local variables with respect to a function",
    "text": "4.7 Global and local variables with respect to a function\nA variable defined within a function is local to that function, while a variable defined outside the function is global with respect to that function. In case a variable with the same name is defined both outside and inside a function, it will refer to its global value outside the function and local value within the function.\nThe example below shows a variable with the name var referring to its local value when called within the function, and global value when called outside the function.\n\nvar = 5\ndef sample_function(var):    \n    print(\"Local value of 'var' within 'sample_function()'= \",var)\n\nsample_function(4)\nprint(\"Global value of 'var' outside 'sample_function()' = \",var)\n\nLocal value of 'var' within 'sample_function()'=  4\nGlobal value of 'var' outside 'sample_function()' =  5",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "functions2.html#built-in-python-functions",
    "href": "functions2.html#built-in-python-functions",
    "title": "4  Functions",
    "section": "4.8 Built-in python functions",
    "text": "4.8 Built-in python functions\nSo far we have seen user-defined functions in this chapter. These functions were defined by us, and are not stored permanently in the python compiler. However, there are some functions that come built-in with python and we can use them directly without defining them. These built-in functions can be see here. For example the built-in function max() computes the max of numeric values:\n\nmax(1,2,3)\n\n3\n\n\nAnother example is the round() function that rounds up floating point numbers:\n\nround(3.7)\n\n4",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "functions2.html#python-libraries",
    "href": "functions2.html#python-libraries",
    "title": "4  Functions",
    "section": "4.9 Python libraries",
    "text": "4.9 Python libraries\nOther than the built-in functions, python has hundreds of thousands of libraries that contain several useful functions. These libraries are contributed by people around the world as python is an open-source platform. Some of the libraries popular in data science, and their purposes are the following:\n\nNumPy: Performing numerical operations and efficiently storing numerical data.\nPandas: Reading, cleaning and manipulating data.\nMatplotlib, Seaborn: Visualizing data.\nSciPy: Performing scientific computing such as solving differential equations, optimization, statistical tests, etc.\nScikit-learn: Data pre-processing and machine learning, with a focus on prediction.\nStatsmodels: Developing statistical models with a focus on inference\n\nA library can be imported using the import keyword. For example, a NumPy library can be imported as:\n\nimport numpy as np\n\nUsing the as keyboard, the NumPy library has been given the name np. All the functions and attributes of the library can be called using the ‘np.’ prefix. For example, let us generate a sequence of whole numbers upto 10 using the NumPy function arange():\n\nnp.arange(8)\n\narray([0, 1, 2, 3, 4, 5, 6, 7])\n\n\nGenerating random numbers is very useful in python for performing simulations (we’ll see in later chapters). The library random is used to generate random numbers such as integers, real numbers based on different probability distributions, etc.\nBelow is an example of using the randint() function of the library for generating random numbers in [a, b], where a and b are integers.\n\nimport random as rm\nrm.randint(5,10) #This will generate a random number in [5,10]\n\n7\n\n\n\n4.9.1 Practice exercise 2\nGenerate a random number between [-5,5]. Do this 10,000 times. Find the mean of all the 10,000 random numbers generated.\nSolution:\n\nimport random as rm\ncounter = 0\nfor i in range(10000):\n    counter = counter + rm.uniform(-5,5)\nprint(\"Mean is:\", counter/10000)\n\nMean is: 0.061433810226516616",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "data_structures-complete.html",
    "href": "data_structures-complete.html",
    "title": "5  Data structures",
    "section": "",
    "text": "5.1 Tuple\nIn this chapter we’ll learn about the python data structures that are often used or appear while analyzing data.\nTuple is a sequence of python objects, with two key characeterisics: (1) the number of objects are fixed, and (2) the objects are immutable, i.e., they cannot be changed.\nTuple can be defined as a sequence of python objects separated by commas, and enclosed in rounded brackets (). For example, below is a tuple containing three integers.\ntuple_example = (2,7,4)\nTuple can be defined without the rounded brackets as well:\ntuple_example = 2, 7, 4\nWe can check the data type of a python object using the type() function. Let us check the data type of the object tuple_example.\ntype(tuple_example)\n\ntuple\nElements of a tuple can be extracted using their index within square brackets. For example the second element of the tuple tuple_example can be extracted as follows:\ntuple_example[1]\n\n7\nNote that an element of a tuple cannot be modified. For example, consider the following attempt in changing the second element of the tuple tuple_example.\ntuple_example[1] = 8\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-6-6ceb38adde52&gt; in &lt;module&gt;\n----&gt; 1 tuple_example[1] = 8\n\nTypeError: 'tuple' object does not support item assignment\nThe above code results in an error as tuple elements cannot be modified.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data structures</span>"
    ]
  },
  {
    "objectID": "data_structures-complete.html#tuple",
    "href": "data_structures-complete.html#tuple",
    "title": "5  Data structures",
    "section": "",
    "text": "5.1.1 Practice exercise 1\nUSA’s GDP per capita from 1960 to 2021 is given by the tuple T in the code cell below. The values are arranged in ascending order of the year, i.e., the first value is for 1960, the second value is for 1961, and so on. Print the years in which the GDP per capita of the US increased by more than 10%.\n\nT = (3007, 3067, 3244, 3375,3574, 3828, 4146, 4336, 4696, 5032,5234,5609,6094,6726,7226,7801,8592,9453,10565,11674,12575,13976,14434,15544,17121,18237,19071,20039,21417,22857,23889,24342,25419,26387,27695,28691,29968,31459,32854,34515,36330,37134,37998,39490,41725,44123,46302,48050,48570,47195,48651,50066,51784,53291,55124,56763,57867,59915,62805,65095,63028,69288)\n\nSolution:\n\n#Iterating over each element of the tuple\nfor i in range(len(T)-1):\n    \n    #Computing percentage increase in GDP per capita in the (i+1)th year\n    increase = (T[i+1]-T[i])/T[i]\n    \n    #Printing the year if the increase in GDP per capita is more than 10%\n    if increase&gt;0.1:\n        print(i+1961)\n\n1973\n1976\n1977\n1978\n1979\n1981\n1984\n\n\n\n\n5.1.2 Concatenating tuples\nTuples can be concatenated using the + operator to produce a longer tuple:\n\n(2,7,4) + (\"another\", \"tuple\") + (\"mixed\",\"datatypes\",5)\n\n(2, 7, 4, 'another', 'tuple', 'mixed', 'datatypes', 5)\n\n\nMultiplying a tuple by an integer results in repetition of the tuple:\n\n(2,7,\"hi\") * 3\n\n(2, 7, 'hi', 2, 7, 'hi', 2, 7, 'hi')\n\n\n\n\n5.1.3 Unpacking tuples\nIf tuples are assigned to an expression containing multiple variables, the tuple will be unpacked and each variable will be assigned a value as per the order in which it appears. See the example below.\n\nx,y,z  = (4.5, \"this is a string\", ((\"Nested tuple\",5)))\n\n\nx\n\n4.5\n\n\n\ny\n\n'this is a string'\n\n\n\nz\n\n('Nested tuple', 5)\n\n\nIf we are interested in retrieving only some values of the tuple, the expression *_ can be used to discard the other values. Let’s say we are interested in retrieving only the first and the last two values of the tuple:\n\nx,*_,y,z  = (4.5, \"this is a string\", ((\"Nested tuple\",5)),\"99\",99)\n\n\nx\n\n4.5\n\n\n\ny\n\n'99'\n\n\n\nz\n\n99\n\n\n\n\n5.1.4 Practice exercise 2\nUSA’s GDP per capita from 1960 to 2021 is given by the tuple T in the code cell below. The values are arranged in ascending order of the year, i.e., the first value is for 1960, the second value is for 1961, and so on.\nWrite a function that has two parameters:\n\nYear : which indicates the year from which the GDP per capita are available in the second parameter\nTuple of GDP per capita’s: Tuple consisting of GDP per capita for consecutive years starting from the year mentioned in the first parameter.\n\nThe function should return a tuple of length two, where the first element of the tuple is the number of years when the increase in GDP per capita was more than 5%, and the second element is the most recent year in which the GDP per capita increase was more than 5%.\nCall the function to find the number of years, and the most recent year in which the GDP per capita increased by more than 5%, since the year 2000. Assign the number of years returned by the function to a variable named num_years, and assign the most recent year to a variable named recent_year. Print the values of num_years and recent_year.\n\nT = (3007, 3067, 3244, 3375,3574, 3828, 4146, 4336, 4696, 5032,5234,5609,6094,6726,7226,7801,8592,9453,10565,11674,12575,13976,14434,15544,17121,18237,19071,20039,21417,22857,23889,24342,25419,26387,27695,28691,29968,31459,32854,34515,36330,37134,37998,39490,41725,44123,46302,48050,48570,47195,48651,50066,51784,53291,55124,56763,57867,59915,62805,65095,63028,69288)\n\n\ndef gdp_inc(year,gdp_tuple):\n    count=0\n    for i in range(len(gdp_tuple)-1):\n        \n        #Computing the increase in GDP per capita for the (i+1)th year\n        increase = (gdp_tuple[i+1]-gdp_tuple[i])/gdp_tuple[i]\n        if increase&gt;0.05:\n            print(year+i)\n            \n            #Over-writing the value of recent_year if the increase in GDP per capita for a more recent year is more than 5%\n            recent_year = year+i+1\n            \n            #Counting the number of years for which the increase in GDP per capita is more than 5%\n            count = count+1\n    return((count,recent_year))\n\nnum_years, recent_year = gdp_inc(2000,T[40:])\nprint(\"Number of years when increase in GDP per capita was more than 5% = \", num_years)\nprint(\"The most recent year in which the increase in GDP per capita was more than 5% = \", recent_year)\n\n2003\n2004\n2020\nNumber of years when increase in GDP per capita was more than 5% =  3\nThe most recent year in which the increase in GDP per capita was more than 5% =  2021\n\n\n\n\n5.1.5 Tuple methods\nA couple of useful tuple methods are count, which counts the occurences of an element in the tuple and index, which returns the position of the first occurance of an element in the tuple:\n\ntuple_example = (2,5,64,7,2,2)\n\n\ntuple_example.count(2)\n\n3\n\n\n\ntuple_example.index(2)\n\n0\n\n\nNow that we have an idea about tuple, let us try to think where it can be used.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data structures</span>"
    ]
  },
  {
    "objectID": "data_structures-complete.html#list",
    "href": "data_structures-complete.html#list",
    "title": "5  Data structures",
    "section": "5.2 List",
    "text": "5.2 List\nList is a sequence of python objects, with two key characeterisics that differentiates it from tuple: (1) the number of objects are variable, i.e., objects can be added or removed from a list, and (2) the objects are mutable, i.e., they can be changed.\nList can be defined as a sequence of python objects separated by commas, and enclosed in square brackets []. For example, below is a list consisting of three integers.\n\nlist_example = [2,7,4]\n\n\n5.2.1 Adding and removing elements in a list\nWe can add elements at the end of the list using the append method. For example, we append the string ‘red’ to the list list_example below.\n\nlist_example.append('red')\n\n\nlist_example\n\n[2, 7, 4, 'red']\n\n\nNote that the objects of a list or a tuple can be of different datatypes.\nAn element can be added at a specific location of the list using the insert method. For example, if we wish to insert the number 2.32 as the second element of the list list_example, we can do it as follows:\n\nlist_example.insert(1,2.32)\n\n\nlist_example\n\n[2, 2.32, 7, 4, 'red']\n\n\nFor removing an element from the list, the pop and remove methods may be used. The pop method removes an element at a particular index, while the remove method removes the element’s first occurence in the list by its value. See the examples below.\nLet us say, we need to remove the third element of the list.\n\nlist_example.pop(2)\n\n7\n\n\n\nlist_example\n\n[2, 2.32, 4, 'red']\n\n\nLet us say, we need to remove the element ‘red’.\n\nlist_example.remove('red')\n\n\nlist_example\n\n[2, 2.32, 4]\n\n\n\n#If there are multiple occurences of an element in the list, the first occurence will be removed\nlist_example2 = [2,3,2,4,4]\nlist_example2.remove(2)\nlist_example2\n\n[3, 2, 4, 4]\n\n\nFor removing multiple elements in a list, either pop or remove can be used in a for loop, or a for loop can be used with a condition. See the examples below.\nLet’s say we need to remove integers less than 100 from the following list.\n\nlist_example3 = list(range(95,106))\nlist_example3\n\n[95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105]\n\n\n\n#Method 1: For loop with remove\nlist_example3_filtered = list(list_example3) #\nfor element in list_example3:\n    if element&lt;100:\n        list_example3_filtered.remove(element)\nprint(list_example3_filtered)\n\n[100, 101, 102, 103, 104, 105]\n\n\n\\(\\color{red}{\\text{Q1}}\\): What’s the need to define a new variable list\\_example3\\_filtered in the above code?\n\\(\\color{blue}{\\text{A1}}\\): Replace list_example3_filtered with list_example3 and identify the issue.\n\n#Method 2: Check this method after reading Section 5.2.6 on slicing a list\nlist_example3 = list(range(95,106))\n\n#Slicing a list using ':' creates a copy of the list, and so \nfor element in list_example3[:]:\n    if element&lt;100:\n        list_example3.remove(element)\nprint(list_example3)\n\n[100, 101, 102, 103, 104, 105]\n\n\n\n#Method 3: For loop with condition\n[element for element in list_example3 if element&gt;100]\n\n[101, 102, 103, 104, 105]\n\n\n\n\n5.2.2 List comprehensions\nList comprehension is a compact way to create new lists based on elements of an existing list or other objects.\nExample: Create a list that has squares of natural numbers from 5 to 15.\n\nsqrt_natural_no_5_15 = [(x**2) for x in range(5,16)]\nprint(sqrt_natural_no_5_15)\n\n[25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225]\n\n\nExample: Create a list of tuples, where each tuple consists of a natural number and its square, for natural numbers ranging from 5 to 15.\n\nsqrt_natural_no_5_15 = [(x,x**2) for x in range(5,16)]\nprint(sqrt_natural_no_5_15)\n\n[(5, 25), (6, 36), (7, 49), (8, 64), (9, 81), (10, 100), (11, 121), (12, 144), (13, 169), (14, 196), (15, 225)]\n\n\n\n\n5.2.3 Practice exercise 3\nBelow is a list consisting of responses to the question: “At what age do you think you will marry?” from students of the STAT303-1 Fall 2022 class.\n\nexp_marriage_age=['24','30','28','29','30','27','26','28','30+','26','28','30','30','30','probably never','30','25','25','30','28','30+ ','30','25','28','28','25','25','27','28','30','30','35','26','28','27','27','30','25','30','26','32','27','26','27','26','28','37','28','28','28','35','28','27','28','26','28','26','30','27','30','28','25','26','28','35','29','27','27','30','24','25','29','27','33','30','30','25','26','30','32','26','30','30','I wont','25','27','27','25','27','27','32','26','25','never','28','33','28','35','25','30','29','30','31','28','28','30','40','30','28','30','27','by 30','28','27','28','30-35','35','30','30','never','30','35','28','31','30','27','33','32','27','27','26','N/A','25','26','29','28','34','26','24','28','30','120','25','33','27','28','32','30','26','30','30','28','27','27','27','27','27','27','28','30','30','30','28','30','28','30','30','28','28','30','27','30','28','25','never','69','28','28','33','30','28','28','26','30','26','27','30','25','Never','27','27','25']\n\nUse list comprehension to:\n\n5.2.3.1 \nRemove the elements that are not integers - such as ‘probably never’, ‘30+’, etc. What is the length of the new list?\nHint: The built-in python function of the str class - isdigit() may be useful to check if the string contains only digits.\n\nexp_marriage_age_num = [x for x in exp_marriage_age if x.isdigit()==True]\nprint(\"Length of the new list = \",len(exp_marriage_age_num))\n\nLength of the new list =  181\n\n\n\n\n5.2.3.2 \nCap the values greater than 80 to 80, in the clean list obtained in (1). What is the mean age when people expect to marry in the new list?\n\nexp_marriage_age_capped = [min(int(x),80) for x in exp_marriage_age_num]\nprint(\"Mean age when people expect to marry = \", sum(exp_marriage_age_capped)/len(exp_marriage_age_capped))\n\nMean age when people expect to marry =  28.955801104972377\n\n\n\n\n5.2.3.3 \nDetermine the percentage of people who expect to marry at an age of 30 or more.\n\nprint(\"Percentage of people who expect to marry at an age of 30 or more =\", str(100*sum([1 for x in exp_marriage_age_capped if x&gt;=30])/len(exp_marriage_age_capped)),\"%\")\n\nPercentage of people who expect to marry at an age of 30 or more = 37.01657458563536 %\n\n\n\n\n\n5.2.4 Concatenating lists\nAs in tuples, lists can be concatenated using the + operator:\n\nimport time as tm\n\n\nlist_example4 = [5,'hi',4] \nlist_example4 = list_example4 + [None,'7',9]\nlist_example4\n\n[5, 'hi', 4, None, '7', 9]\n\n\nFor adding elements to a list, the extend method is preferred over the + operator. This is because the + operator creates a new list, while the extend method adds elements to an existing list. Thus, the extend operator is more memory efficient.\n\nlist_example4 = [5,'hi',4]\nlist_example4.extend([None, '7', 9])\nlist_example4\n\n[5, 'hi', 4, None, '7', 9]\n\n\n\n\n5.2.5 Sorting a list\nA list can be sorted using the sort method:\n\nlist_example5 = [6,78,9]\nlist_example5.sort(reverse=True) #the reverse argument is used to specify if the sorting is in ascending or descending order\nlist_example5\n\n[78, 9, 6]\n\n\n\n\n5.2.6 Slicing a list\nWe may extract or update a section of the list by passing the starting index (say start) and the stopping index (say stop) as start:stop to the index operator []. This is called slicing a list. For example, see the following example.\n\nlist_example6 = [4,7,3,5,7,1,5,87,5]\n\nLet us extract a slice containing all the elements from the the 3rd position to the 7th position.\n\nlist_example6[2:7]\n\n[3, 5, 7, 1, 5]\n\n\nNote that while the element at the start index is included, the element with the stop index is excluded in the above slice.\nIf either the start or stop index is not mentioned, the slicing will be done from the beginning or until the end of the list, respectively.\n\nlist_example6[:7]\n\n[4, 7, 3, 5, 7, 1, 5]\n\n\n\nlist_example6[2:]\n\n[3, 5, 7, 1, 5, 87, 5]\n\n\nTo slice the list relative to the end, we can use negative indices:\n\nlist_example6[-4:]\n\n[1, 5, 87, 5]\n\n\n\nlist_example6[-4:-2:]\n\n[1, 5]\n\n\nAn extra colon (‘:’) can be used to slice every ith element of a list.\n\n#Selecting every 3rd element of a list\nlist_example6[::3]\n\n[4, 5, 5]\n\n\n\n#Selecting every 3rd element of a list from the end\nlist_example6[::-3]\n\n[5, 1, 3]\n\n\n\n#Selecting every element of a list from the end or reversing a list \nlist_example6[::-1]\n\n[5, 87, 5, 1, 7, 5, 3, 7, 4]\n\n\n\n\n5.2.7 Practice exercise 4\nStart with the list [8,9,10]. Do the following:\n\n5.2.7.1 \nSet the second entry (index 1) to 17\n\nL = [8,9,10]\nL[1]=17\n\n\n\n5.2.7.2 \nAdd 4, 5, and 6 to the end of the list\n\nL = L+[4,5,6]\n\n\n\n5.2.7.3 \nRemove the first entry from the list\n\nL.pop(0)\n\n8\n\n\n\n\n5.2.7.4 \nSort the list\n\nL.sort()\n\n\n\n5.2.7.5 \nDouble the list (concatenate the list to itself)\n\nL=L+L\n\n\n\n5.2.7.6 \nInsert 25 at index 3\nThe final list should equal [4,5,6,25,10,17,4,5,6,10,17]\n\nL.insert(3,25)\nL\n\n[4, 5, 6, 25, 10, 17, 4, 5, 6, 10, 17]\n\n\nNow that we have an idea about lists, let us try to think where it can be used.\n\n\n\n\n\n \n        \n\n\nNow that we have learned about lists and tuples, let us compare them.\n\\(\\color{red}{\\text{Q2}}\\): A list seems to be much more flexible than tuple, and can replace a tuple almost everywhere. Then why use tuple at all?\n\\(\\color{blue}{\\text{A2}}\\): The additional flexibility of a list comes at the cost of efficiency. Some of the advatages of a tuple over a list are as follows:\n\nSince a list can be extended, space is over-allocated when creating a list. A tuple takes less storage space as compared to a list of the same length.\nTuples are not copied. If a tuple is assigned to another tuple, both tuples point to the same memory location. However, if a list is assigned to another list, a new list is created consuming the same memory space as the orignial list.\nTuples refer to their element directly, while in a list, there is an extra layer of pointers that refers to their elements. Thus it is faster to retrieve elements from a tuple.\n\nThe examples below illustrate the above advantages of a tuple.\n\n#Example showing tuples take less storage space than lists for the same elements\ntuple_ex = (1, 2, 'Obama')\nlist_ex = [1, 2, 'Obama']\nprint(\"Space taken by tuple =\",tuple_ex.__sizeof__(),\" bytes\")\nprint(\"Space taken by list =\",list_ex.__sizeof__(),\" bytes\")\n\nSpace taken by tuple = 48  bytes\nSpace taken by list = 64  bytes\n\n\n\n#Examples showing that a tuples are not copied, while lists can be copied\ntuple_copy = tuple(tuple_ex)\nprint(\"Is tuple_copy same as tuple_ex?\", tuple_ex is tuple_copy)\nlist_copy = list(list_ex)\nprint(\"Is list_copy same as list_ex?\",list_ex is list_copy)\n\nIs tuple_copy same as tuple_ex? True\nIs list_copy same as list_ex? False\n\n\n\n#Examples showing tuples takes lesser time to retrieve elements\nimport time as tm\ntt = tm.time()\nlist_ex = list(range(1000000)) #List containinig whole numbers upto 1 million\na=(list_ex[::-2])\nprint(\"Time take to retrieve every 2nd element from a list = \", tm.time()-tt)\n\ntt = tm.time()\ntuple_ex = tuple(range(1000000)) #tuple containinig whole numbers upto 1 million\na=(tuple_ex[::-2])\nprint(\"Time take to retrieve every 2nd element from a tuple = \", tm.time()-tt)\n\nTime take to retrieve every 2nd element from a list =  0.03579902648925781\nTime take to retrieve every 2nd element from a tuple =  0.02684164047241211",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data structures</span>"
    ]
  },
  {
    "objectID": "data_structures-complete.html#dictionary",
    "href": "data_structures-complete.html#dictionary",
    "title": "5  Data structures",
    "section": "5.3 Dictionary",
    "text": "5.3 Dictionary\nA dictionary consists of key-value pairs, where the keys and values are python objects. While values can be any python object, keys need to be immutable python objects, like strings, integers, tuples, etc. Thus, a list can be a value, but not a key, as elements of list can be changed. A dictionary is defined using the keyword dict along with curly braces, colons to separate keys and values, and commas to separate elements of a dictionary:\n\ndict_example = {'USA':'Joe Biden', 'India':'Narendra Modi', 'China':'Xi Jinping'}\n\nElements of a dictionary can be retrieved by using the corresponding key.\n\ndict_example['India']\n\n'Narendra Modi'\n\n\n\n5.3.1 Adding and removing elements in a dictionary\nNew elements can be added to a dictionary by defining a key in square brackets and assiging it to a value:\n\ndict_example['Japan'] = 'Fumio Kishida'\ndict_example['Countries'] = 4\ndict_example\n\n{'USA': 'Joe Biden',\n 'India': 'Narendra Modi',\n 'China': 'Xi Jinping',\n 'Japan': 'Fumio Kishida',\n 'Countries': 4}\n\n\nElements can be removed from the dictionary using the del method or the pop method:\n\n#Removing the element having key as 'Countries'\ndel dict_example['Countries']\n\n\ndict_example\n\n{'USA': 'Joe Biden',\n 'India': 'Narendra Modi',\n 'China': 'Xi Jinping',\n 'Japan': 'Fumio Kishida'}\n\n\n\n#Removing the element having key as 'USA'\ndict_example.pop('USA')\n\n'Joe Biden'\n\n\n\ndict_example\n\n{'India': 'Narendra Modi', 'China': 'Xi Jinping', 'Japan': 'Fumio Kishida'}\n\n\nNew elements can be added, and values of exisiting keys can be changed using the update method:\n\ndict_example = {'USA':'Joe Biden', 'India':'Narendra Modi', 'China':'Xi Jinping','Countries':3}\ndict_example\n\n{'USA': 'Joe Biden',\n 'India': 'Narendra Modi',\n 'China': 'Xi Jinping',\n 'Countries': 3}\n\n\n\ndict_example.update({'Countries':4, 'Japan':'Fumio Kishida'})\n\n\ndict_example\n\n{'USA': 'Joe Biden',\n 'India': 'Narendra Modi',\n 'China': 'Xi Jinping',\n 'Countries': 4,\n 'Japan': 'Fumio Kishida'}\n\n\n\n\n5.3.2 Iterating over elements of a dictionary\nThe items() attribute of a dictionary can be used to iterate over elements of a dictionary.\n\nfor key,value in dict_example.items():\n    print(\"The Head of State of\",key,\"is\",value)\n\nThe Head of State of USA is Joe Biden\nThe Head of State of India is Narendra Modi\nThe Head of State of China is Xi Jinping\nThe Head of State of Countries is 4\nThe Head of State of Japan is Fumio Kishida\n\n\n\n\n5.3.3 Practice exercise 5\nThe GDP per capita of USA for most years from 1960 to 2021 is given by the dictionary D given in the code cell below.\nFind:\n\nThe GDP per capita in 2015\nThe GDP per capita of 2014 is missing. Update the dictionary to include the GDP per capita of 2014 as the average of the GDP per capita of 2013 and 2015.\nImpute the GDP per capita of other missing years in the same manner as in (2), i.e., as the average GDP per capita of the previous year and the next year. Note that the GDP per capita is not missing for any two consecutive years.\nPrint the years and the imputed GDP per capita for the years having a missing value of GDP per capita in (3).\n\n\nD = {'1960':3007,'1961':3067,'1962':3244,'1963':3375,'1964':3574,'1965':3828,'1966':4146,'1967':4336,'1968':4696,'1970':5234,'1971':5609,'1972':6094,'1973':6726,'1974':7226,'1975':7801,'1976':8592,'1978':10565,'1979':11674, '1980':12575,'1981':13976,'1982':14434,'1983':15544,'1984':17121,'1985':18237,  '1986':19071,'1987':20039,'1988':21417,'1989':22857,'1990':23889,'1991':24342,  '1992':25419,'1993':26387,'1994':27695,'1995':28691,'1996':29968,'1997':31459,  '1998':32854,'2000':36330,'2001':37134,'2002':37998,'2003':39490,'2004':41725,  '2005':44123,'2006':46302,'2007':48050,'2008':48570,'2009':47195,'2010':48651,  '2011':50066,'2012':51784,'2013':53291,'2015':56763,'2016':57867,'2017':59915,'2018':62805, '2019':65095,'2020':63028,'2021':69288}\n\nSolution:\n\nprint(\"GDP per capita in 2015 =\", D['2015'])\nD['2014'] = (D['2013']+D['2015'])/2\n\n#Iterating over all years from 1960 to 2021\nfor i in range(1960,2021):\n    \n    #Imputing the GDP of the year if it is missing\n    if str(i) not in D.keys():    \n        D[str(i)] = (D[str(i-1)]+D[str(i+1)])/2\n        print(\"Imputed GDP per capita for the year\",i,\"is $\",D[str(i)])\n\nGDP per capita in 2015 = 56763\nImputed GDP per capita for the year 1969 is $ 4965.0\nImputed GDP per capita for the year 1977 is $ 9578.5\nImputed GDP per capita for the year 1999 is $ 34592.0\n\n\n\n\n5.3.4 Practice exercise 6\nThe object deck defined below corresponds to a deck of cards. Estimate the probablity that a five card hand will be a flush, as follows:\n\nWrite a function that accepts a hand of 5 cards as argument, and returns whether the hand is a flush or not.\nRandomly pull a hand of 5 cards from the deck. Call the function developed in (1) to determine if the hand is a flush.\nRepeat (2) 10,000 times.\nEstimate the probability of the hand being a flush from the results of the 10,000 simulations.\n\nYou may use the function shuffle() from the random library to shuffle the deck everytime before pulling a hand of 5 cards.\n\ndeck = [{'value':i, 'suit':c}\nfor c in ['spades', 'clubs', 'hearts', 'diamonds']\nfor i in range(2,15)]\n\nSolution:\n\nimport random as rm\n\n#Function to check if a 5-card hand is a flush\ndef chck_flush(hands):  \n    \n    #Assuming that the hand is a flush, before checking the cards\n    yes_flush =1\n    \n    #Storing the suit of the first card in 'first_suit'\n    first_suit = hands[0]['suit']\n    \n    #Iterating over the remaining 4 cards of the hand\n    for j in range(1,len(hands)):\n        \n        #If the suit of any of the cards does not match the suit of the first card, the hand is not a flush\n        if first_suit!=hands[j]['suit']:\n            yes_flush = 0; \n            \n            #As soon as a card with a different suit is found, the hand is not a flush and there is no need to check other cards. So, we 'break' out of the loop\n            break;\n    return yes_flush\n\nflush=0\nfor i in range(10000):\n    \n    #Shuffling the deck\n    rm.shuffle(deck)\n    \n    #Picking out the first 5 cards of the deck as a hand and checking if they are a flush\n    #If the hand is a flush it is counted\n    flush=flush+chck_flush(deck[0:5])\n    \nprint(\"Probability of obtaining a flush=\", 100*(flush/10000),\"%\")\n\nProbability of obtaining a flush= 0.2 %",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data structures</span>"
    ]
  },
  {
    "objectID": "data_structures-complete.html#practice-exercise-7",
    "href": "data_structures-complete.html#practice-exercise-7",
    "title": "5  Data structures",
    "section": "5.4 Practice exercise 7",
    "text": "5.4 Practice exercise 7\nThe code cell below defines an object having the nutrition information of drinks in starbucks. Assume that the manner in which the information is structured is consistent throughout the object.\n\nstarbucks_drinks_nutrition={'Cool Lime Starbucks Refreshers™ Beverage': [{'Nutrition_type': 'Calories', 'value': 45}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 11}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Strawberry Acai Starbucks Refreshers™ Beverage': [{'Nutrition_type': 'Calories', 'value': 80}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 18}, {'Nutrition_type': 'Fiber', 'value': 1}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Very Berry Hibiscus Starbucks Refreshers™ Beverage': [{'Nutrition_type': 'Calories', 'value': 60}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 14}, {'Nutrition_type': 'Fiber', 'value': 1}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Evolution Fresh™ Organic Ginger Limeade': [{'Nutrition_type': 'Calories', 'value': 110}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 28}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 5}], 'Iced Coffee': [{'Nutrition_type': 'Calories', 'value': 5}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 0}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 5}], 'Iced Espresso Classics - Vanilla Latte': [{'Nutrition_type': 'Calories', 'value': 130}, {'Nutrition_type': 'Fat', 'value': 2.5}, {'Nutrition_type': 'Carb', 'value': 21}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 5}, {'Nutrition_type': 'Sodium', 'value': 65}], 'Iced Espresso Classics - Caffe Mocha': [{'Nutrition_type': 'Calories', 'value': 140}, {'Nutrition_type': 'Fat', 'value': 2.5}, {'Nutrition_type': 'Carb', 'value': 23}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 5}, {'Nutrition_type': 'Sodium', 'value': 90}], 'Iced Espresso Classics - Caramel Macchiato': [{'Nutrition_type': 'Calories', 'value': 130}, {'Nutrition_type': 'Fat', 'value': 2.5}, {'Nutrition_type': 'Carb', 'value': 21}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 5}, {'Nutrition_type': 'Sodium', 'value': 65}], 'Shaken Sweet Tea': [{'Nutrition_type': 'Calories', 'value': 80}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 19}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Tazo® Bottled Berry Blossom White': [{'Nutrition_type': 'Calories', 'value': 60}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 15}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Tazo® Bottled Black Mango': [{'Nutrition_type': 'Calories', 'value': 150}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 38}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 15}], 'Tazo® Bottled Black with Lemon': [{'Nutrition_type': 'Calories', 'value': 140}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 35}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Tazo® Bottled Brambleberry': [{'Nutrition_type': 'Calories', 'value': 140}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 35}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 15}], 'Tazo® Bottled Giant Peach': [{'Nutrition_type': 'Calories', 'value': 150}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 37}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 15}], 'Tazo® Bottled Iced Passion': [{'Nutrition_type': 'Calories', 'value': 70}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 17}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Tazo® Bottled Lemon Ginger': [{'Nutrition_type': 'Calories', 'value': 120}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 31}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Tazo® Bottled Organic Black Lemonade': [{'Nutrition_type': 'Calories', 'value': 140}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 35}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Tazo® Bottled Organic Iced Black Tea': [{'Nutrition_type': 'Calories', 'value': 60}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 15}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Tazo® Bottled Organic Iced Green Tea': [{'Nutrition_type': 'Calories', 'value': 120}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 31}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Tazo® Bottled Plum Pomegranate': [{'Nutrition_type': 'Calories', 'value': 140}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 35}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Tazo® Bottled Tazoberry': [{'Nutrition_type': 'Calories', 'value': 150}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 38}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 15}], 'Tazo® Bottled White Cranberry': [{'Nutrition_type': 'Calories', 'value': 140}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 35}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Teavana® Shaken Iced Black Tea': [{'Nutrition_type': 'Calories', 'value': 30}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 8}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 5}], 'Teavana® Shaken Iced Black Tea Lemonade': [{'Nutrition_type': 'Calories', 'value': 70}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 17}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 0}], 'Teavana® Shaken Iced Green Tea': [{'Nutrition_type': 'Calories', 'value': 30}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 8}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 5}], 'Teavana® Shaken Iced Green Tea Lemonade': [{'Nutrition_type': 'Calories', 'value': 70}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 17}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 5}], 'Teavana® Shaken Iced Passion Tango™ Tea': [{'Nutrition_type': 'Calories', 'value': 30}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 8}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 5}], 'Teavana® Shaken Iced Passion Tango™ Tea Lemonade': [{'Nutrition_type': 'Calories', 'value': 90}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 24}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 0}], 'Teavana® Shaken Iced Peach Green Tea': [{'Nutrition_type': 'Calories', 'value': 60}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 15}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 0}], 'Starbucks Refreshers™ Raspberry Pomegranate': [{'Nutrition_type': 'Calories', 'value': 90}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 27}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 0}], 'Starbucks Refreshers™ Strawberry Lemonade': [{'Nutrition_type': 'Calories', 'value': 90}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 27}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 0}], 'Starbucks® Doubleshot Protein Dark Chocolate': [{'Nutrition_type': 'Calories', 'value': 210}, {'Nutrition_type': 'Fat', 'value': 2.5}, {'Nutrition_type': 'Carb', 'value': 33}, {'Nutrition_type': 'Fiber', 'value': 2}, {'Nutrition_type': 'Protein', 'value': 20}, {'Nutrition_type': 'Sodium', 'value': 115}], 'Starbucks® Doubleshot Protein Vanilla': [{'Nutrition_type': 'Calories', 'value': 200}, {'Nutrition_type': 'Fat', 'value': 2.5}, {'Nutrition_type': 'Carb', 'value': 34}, {'Nutrition_type': 'Fiber', 'value': 2}, {'Nutrition_type': 'Protein', 'value': 20}, {'Nutrition_type': 'Sodium', 'value': 120}], 'Starbucks® Iced Coffee Caramel': [{'Nutrition_type': 'Calories', 'value': 60}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 13}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 1}, {'Nutrition_type': 'Sodium', 'value': 0}], 'Starbucks® Iced Coffee Light Sweetened': [{'Nutrition_type': 'Calories', 'value': 50}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 11}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 1}, {'Nutrition_type': 'Sodium', 'value': 0}], 'Starbucks® Iced Coffee Unsweetened': [{'Nutrition_type': 'Calories', 'value': 10}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 2}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 1}, {'Nutrition_type': 'Sodium', 'value': 0}], 'Blonde Roast': [{'Nutrition_type': 'Calories', 'value': 5}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 0}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 1}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Clover® Brewed Coffee': [{'Nutrition_type': 'Calories', 'value': 10}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 0}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 1}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Decaf Pike Place® Roast': [{'Nutrition_type': 'Calories', 'value': 5}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 0}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 1}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Featured Dark Roast': [{'Nutrition_type': 'Calories', 'value': 5}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 0}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 1}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Nariño 70 Cold Brew': [{'Nutrition_type': 'Calories', 'value': 5}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 0}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 15}], 'Nariño 70 Cold Brew with Milk': [{'Nutrition_type': 'Calories', 'value': 0}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 0}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 0}], 'Nitro Cold Brew': [{'Nutrition_type': 'Calories', 'value': 5}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 0}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Nitro Cold Brew with Sweet Cream': [{'Nutrition_type': 'Calories', 'value': 70}, {'Nutrition_type': 'Fat', 'value': 5.0}, {'Nutrition_type': 'Carb', 'value': 5}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 1}, {'Nutrition_type': 'Sodium', 'value': 20}], 'Pike Place® Roast': [{'Nutrition_type': 'Calories', 'value': 5}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 0}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 1}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Vanilla Sweet Cream Cold Brew': [{'Nutrition_type': 'Calories', 'value': 110}, {'Nutrition_type': 'Fat', 'value': 6.0}, {'Nutrition_type': 'Carb', 'value': 14}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 1}, {'Nutrition_type': 'Sodium', 'value': 25}], 'Hot Chocolate': [{'Nutrition_type': 'Calories', 'value': 320}, {'Nutrition_type': 'Fat', 'value': 9.0}, {'Nutrition_type': 'Carb', 'value': 47}, {'Nutrition_type': 'Fiber', 'value': 4}, {'Nutrition_type': 'Protein', 'value': 14}, {'Nutrition_type': 'Sodium', 'value': 160}], 'Starbucks® Signature Hot Chocolate': [{'Nutrition_type': 'Calories', 'value': 430}, {'Nutrition_type': 'Fat', 'value': 26.0}, {'Nutrition_type': 'Carb', 'value': 45}, {'Nutrition_type': 'Fiber', 'value': 5}, {'Nutrition_type': 'Protein', 'value': 12}, {'Nutrition_type': 'Sodium', 'value': 115}], 'Caffè Latte': [{'Nutrition_type': 'Calories', 'value': 190}, {'Nutrition_type': 'Fat', 'value': 7.0}, {'Nutrition_type': 'Carb', 'value': 19}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 13}, {'Nutrition_type': 'Sodium', 'value': 170}], 'Caffè Mocha': [{'Nutrition_type': 'Calories', 'value': 290}, {'Nutrition_type': 'Fat', 'value': 8.0}, {'Nutrition_type': 'Carb', 'value': 42}, {'Nutrition_type': 'Fiber', 'value': 4}, {'Nutrition_type': 'Protein', 'value': 13}, {'Nutrition_type': 'Sodium', 'value': 140}], 'Cappuccino': [{'Nutrition_type': 'Calories', 'value': 120}, {'Nutrition_type': 'Fat', 'value': 4.0}, {'Nutrition_type': 'Carb', 'value': 12}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 8}, {'Nutrition_type': 'Sodium', 'value': 100}], 'Caramel Macchiato': [{'Nutrition_type': 'Calories', 'value': 250}, {'Nutrition_type': 'Fat', 'value': 7.0}, {'Nutrition_type': 'Carb', 'value': 35}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 10}, {'Nutrition_type': 'Sodium', 'value': 150}], 'Cinnamon Dolce Latte': [{'Nutrition_type': 'Calories', 'value': 260}, {'Nutrition_type': 'Fat', 'value': 6.0}, {'Nutrition_type': 'Carb', 'value': 40}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 11}, {'Nutrition_type': 'Sodium', 'value': 150}], 'Coconutmilk Mocha Macchiato': [{'Nutrition_type': 'Calories', 'value': 250}, {'Nutrition_type': 'Fat', 'value': 9.0}, {'Nutrition_type': 'Carb', 'value': 32}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 12}, {'Nutrition_type': 'Sodium', 'value': 180}], 'Flat White': [{'Nutrition_type': 'Calories', 'value': 180}, {'Nutrition_type': 'Fat', 'value': 7.0}, {'Nutrition_type': 'Carb', 'value': 18}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 12}, {'Nutrition_type': 'Sodium', 'value': 160}], 'Iced Caffè Latte': [{'Nutrition_type': 'Calories', 'value': 130}, {'Nutrition_type': 'Fat', 'value': 4.5}, {'Nutrition_type': 'Carb', 'value': 13}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 8}, {'Nutrition_type': 'Sodium', 'value': 115}], 'Iced Caffè Mocha': [{'Nutrition_type': 'Calories', 'value': 230}, {'Nutrition_type': 'Fat', 'value': 6.0}, {'Nutrition_type': 'Carb', 'value': 36}, {'Nutrition_type': 'Fiber', 'value': 4}, {'Nutrition_type': 'Protein', 'value': 9}, {'Nutrition_type': 'Sodium', 'value': 90}], 'Iced Caramel Macchiato': [{'Nutrition_type': 'Calories', 'value': 250}, {'Nutrition_type': 'Fat', 'value': 7.0}, {'Nutrition_type': 'Carb', 'value': 37}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 10}, {'Nutrition_type': 'Sodium', 'value': 150}], 'Iced Cinnamon Dolce Latte': [{'Nutrition_type': 'Calories', 'value': 200}, {'Nutrition_type': 'Fat', 'value': 4.0}, {'Nutrition_type': 'Carb', 'value': 34}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 7}, {'Nutrition_type': 'Sodium', 'value': 95}], 'Iced Coconutmilk Mocha Macchiato': [{'Nutrition_type': 'Calories', 'value': 260}, {'Nutrition_type': 'Fat', 'value': 9.0}, {'Nutrition_type': 'Carb', 'value': 34}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 11}, {'Nutrition_type': 'Sodium', 'value': 180}], 'Iced Vanilla Latte': [{'Nutrition_type': 'Calories', 'value': 190}, {'Nutrition_type': 'Fat', 'value': 4.0}, {'Nutrition_type': 'Carb', 'value': 30}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 7}, {'Nutrition_type': 'Sodium', 'value': 100}], 'Iced White Chocolate Mocha': [{'Nutrition_type': 'Calories', 'value': 300}, {'Nutrition_type': 'Fat', 'value': 8.0}, {'Nutrition_type': 'Carb', 'value': 47}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 10}, {'Nutrition_type': 'Sodium', 'value': 190}], 'Latte Macchiato': [{'Nutrition_type': 'Calories', 'value': 190}, {'Nutrition_type': 'Fat', 'value': 7.0}, {'Nutrition_type': 'Carb', 'value': 19}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 12}, {'Nutrition_type': 'Sodium', 'value': 160}], 'Starbucks Doubleshot® on Ice Beverage': [{'Nutrition_type': 'Calories', 'value': 45}, {'Nutrition_type': 'Fat', 'value': 1.0}, {'Nutrition_type': 'Carb', 'value': 5}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 3}, {'Nutrition_type': 'Sodium', 'value': 40}], 'Vanilla Latte': [{'Nutrition_type': 'Calories', 'value': 250}, {'Nutrition_type': 'Fat', 'value': 6.0}, {'Nutrition_type': 'Carb', 'value': 37}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 12}, {'Nutrition_type': 'Sodium', 'value': 150}], 'White Chocolate Mocha': [{'Nutrition_type': 'Calories', 'value': 360}, {'Nutrition_type': 'Fat', 'value': 11.0}, {'Nutrition_type': 'Carb', 'value': 53}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 14}, {'Nutrition_type': 'Sodium', 'value': 240}], 'Cinnamon Dolce Frappuccino® Blended Coffee': [{'Nutrition_type': 'Calories', 'value': 350}, {'Nutrition_type': 'Fat', 'value': 4.5}, {'Nutrition_type': 'Carb', 'value': 64}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 15}, {'Nutrition_type': 'Sodium', 'value': 0}], 'Coffee Light Frappuccino® Blended Coffee': [{'Nutrition_type': 'Calories', 'value': 110}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 24}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 3}, {'Nutrition_type': 'Sodium', 'value': 200}], 'Mocha Frappuccino® Blended Coffee': [{'Nutrition_type': 'Calories', 'value': 280}, {'Nutrition_type': 'Fat', 'value': 2.5}, {'Nutrition_type': 'Carb', 'value': 60}, {'Nutrition_type': 'Fiber', 'value': 2}, {'Nutrition_type': 'Protein', 'value': 4}, {'Nutrition_type': 'Sodium', 'value': 220}], 'Mocha Light Frappuccino® Blended Coffee': [{'Nutrition_type': 'Calories', 'value': 140}, {'Nutrition_type': 'Fat', 'value': 0.5}, {'Nutrition_type': 'Carb', 'value': 28}, {'Nutrition_type': 'Fiber', 'value': 1}, {'Nutrition_type': 'Protein', 'value': 4}, {'Nutrition_type': 'Sodium', 'value': 180}], 'Cinnamon Dolce Crème': [{'Nutrition_type': 'Calories', 'value': 200}, {'Nutrition_type': 'Fat', 'value': 6.0}, {'Nutrition_type': 'Carb', 'value': 28}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 10}, {'Nutrition_type': 'Sodium', 'value': 135}], 'Vanilla Crème': [{'Nutrition_type': 'Calories', 'value': 200}, {'Nutrition_type': 'Fat', 'value': 6.0}, {'Nutrition_type': 'Carb', 'value': 28}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 10}, {'Nutrition_type': 'Sodium', 'value': 135}], 'Chocolate Smoothie': [{'Nutrition_type': 'Calories', 'value': 320}, {'Nutrition_type': 'Fat', 'value': 5.0}, {'Nutrition_type': 'Carb', 'value': 53}, {'Nutrition_type': 'Fiber', 'value': 8}, {'Nutrition_type': 'Protein', 'value': 20}, {'Nutrition_type': 'Sodium', 'value': 170}], 'Strawberry Smoothie': [{'Nutrition_type': 'Calories', 'value': 300}, {'Nutrition_type': 'Fat', 'value': 2.0}, {'Nutrition_type': 'Carb', 'value': 60}, {'Nutrition_type': 'Fiber', 'value': 7}, {'Nutrition_type': 'Protein', 'value': 16}, {'Nutrition_type': 'Sodium', 'value': 130}]}\n\nUse the object above to answer the following questions:\n\n5.4.1 \nWhat is the datatype of the object?\n\nprint(\"Datatype=\",type(starbucks_drinks_nutrition)) \n\nDatatype= &lt;class 'dict'&gt;\n\n\n\n5.4.1.1 \nIf the object in (1) is a dictionary, what is the datatype of the values of the dictionary?\n\nprint(\"Datatype=\",type(starbucks_drinks_nutrition[list(starbucks_drinks_nutrition.keys())[0]]))\n\nDatatype= &lt;class 'list'&gt;\n\n\n\n\n5.4.1.2 \nIf the object in (1) is a dictionary, what is the datatype of the elements within the values of the dictionary?\n\nprint(\"Datatype=\",type(starbucks_drinks_nutrition[list(starbucks_drinks_nutrition.keys())[0]][0]))\n\nDatatype= &lt;class 'dict'&gt;\n\n\n\n\n5.4.1.3 \nHow many calories are there in Iced Coffee?\n\nprint(\"Calories = \",starbucks_drinks_nutrition['Iced Coffee'][0]['value'])\n\nCalories =  5\n\n\n\n\n5.4.1.4 \nWhich drink(s) have the highest amount of protein in them, and what is that protein amount?\n\n#Defining an empty dictionary that will be used to store the protein of each drink\nprotein={}\n\nfor key,value in starbucks_drinks_nutrition.items():\n    for nutrition in value:        \n        if nutrition['Nutrition_type']=='Protein':\n            protein[key]=(nutrition['value'])\n\n#Using dictionary comprehension to find the key-value pair having the maximum value in the dictionary\n{key:value for key, value in protein.items() if value == max(protein.values())}\n\n{'Starbucks® Doubleshot Protein Dark Chocolate': 20,\n 'Starbucks® Doubleshot Protein Vanilla': 20,\n 'Chocolate Smoothie': 20}\n\n\n\n\n5.4.1.5 \nWhich drink(s) have a fat content of more than 10g, and what is their fat content?\n\n#Defining an empty dictionary that will be used to store the fat of each drink\nfat={}\nfor key,value in starbucks_drinks_nutrition.items():\n    for nutrition in value:        \n        if nutrition['Nutrition_type']=='Fat':\n            fat[key]=(nutrition['value'])\n            \n#Using dictionary comprehension to find the key-value pair having the value more than 10\n{key:value for key, value in fat.items() if value&gt;=10}\n\n{'Starbucks® Signature Hot Chocolate': 26.0, 'White Chocolate Mocha': 11.0}",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data structures</span>"
    ]
  },
  {
    "objectID": "classes.html",
    "href": "classes.html",
    "title": "6  Object-Oriented Programming",
    "section": "",
    "text": "6.1 Object\nIn Python, everything is an object, which makes it an object-oriented programming language.\nObject-oriented programming is the one in which a program is based on objects. An object is an independent entity within the program and can cooperatively work with other objects. A program can be made up of one or more objects, which can leverage the functionality and information contained in other objects.\nAn object consists of two items:\nWe have already seen several in-built python objects such as string objects, integer objects, float objects, list objects, tuple objects and dictionary objects, in previous chapters. Each of these objects have attributes and methods associated with them.\nFor example, consider a integer object named as integer_example.\ninteger_example = 5\nThe attributes and methods of this integer object can be seen by putting a . next to its name, and pressing the tab key. A dropdown menu consisting of the attributes and methods will appear as shown below.\nA list of all attributes and methods associated with an object can be obtained with the dir() function. Ignore the ones with underscores - these are used by Python itself. The rest of them can be used to perform operations.\n#This code is not executed to avoid printing a long list\ndir(integer_example)\nFor example, an attribute of integer_example is real, which contains the real part of the number:\ninteger_example.real\n\n5\nA example of a method of integer_example is as_integer_ratio(), which returns a tuple containing the numerator and denominator of the integer when it is expressed as a fraction.\ninteger_example.as_integer_ratio()\n\n(5, 1)\nNote that attributes do not have any parenthesis after them as they are just data, and cannot accept arguments. On the other hand methods have parenthesis after them as they are functions that may or may not have arguments.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Object-Oriented Programming</span>"
    ]
  },
  {
    "objectID": "classes.html#object",
    "href": "classes.html#object",
    "title": "6  Object-Oriented Programming",
    "section": "",
    "text": "Attributes - Attributes are the data stored within the object.\nMethods - Methods are the functions defined within the object. Methods can use the object attributes (or data stored within the object) as well as accept additional data as arguments.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Object-Oriented Programming</span>"
    ]
  },
  {
    "objectID": "classes.html#class",
    "href": "classes.html#class",
    "title": "6  Object-Oriented Programming",
    "section": "6.2 Class",
    "text": "6.2 Class\nA class is a template for objects. It contains the attributes and methods associated with the object of the class. As an analaogy, the class Cat will consist of characterisitcs (or attributes) shared by all cats such as breed, fur color, etc., as well as capability to perform functions (or methods) such as run, meow, etc.\nPlease see the python documentation for class.\nInstance: An instance is a specific realization of the object of a particular class. Continuing with the Cat analaogy of a class, a particular cat is an instance of the class Cat. Similarly, in the example above, the object integer_example is an instance of the class integer. The words object and instance are often used interchangeably.\nCreating an instance of a class is called Instantiation.\n\n6.2.1 Creating your own class\nUntil now we saw examples of in-built Python classes, such as integer, List, etc. Now, we’ll learn to create our own class that serves our purpose.\nBelow is a toy example of a class.\n\nclass ToyClass:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def add(self):\n        return self.x + self.y\n    \n    def multiply(self):\n        return self.x*self.y\n\nWe’ll use the example above to explain the following terms:\n\nThe class statement: We use the class statement to create a class. The Python style guide recommends to use CamelCase for class names.\nThe constructor (or the __init__() method): A class typically has a method called __init__. This method is called a constructor and is automatically called when an object or instance of the class is created. The constructor initializes the attributes of the class. In the above example, the constructor accepts two values as arguments, and initializes its attributes x and y with those values.\nThe self argument: This is the first argument to every method in the class. Whenever the class refers to one of its attributes or methods, it must precede them by self. The purpose of self is to distinguish the class’s attributes and methods from other variables and functions in the program.\n\nThe class ToyClass consists of two attributes x and y, a constructor __init__(), and two methods add() and multiply().\nTo create an object or instance of the class ToyClass, we’ll use the class name with the values to be passed as argument to the constructor for initializing the object / instance.\n\ntoy_instance = ToyClass(6,12)\n\nThe x attribute of the class ToyClass can be called using the . operator with the object name:\n\ntoy_instance.x\n\n6\n\n\nTo use the multiply() method of the class ToyClass, we’ll use the . operator with the object name:\n\ntoy_instance.multiply()\n\n72\n\n\n\n\n6.2.2 Example: A class that analyzes a string\nLet us create a class that analyzes a string.\n\nclass AnalyzeString:\n    \n    #Constructor\n    def __init__(self, s):\n        s = s.lower()\n        self.words = s.split()\n    \n    #This method counts the numebr of words\n    def number_of_words(self):\n        return (len(self.words))\n    \n    #This method counts the number of words starting with the string s\n    def starts_with(self,s):\n        return len([x for x in self.words if x[:len(s)]==s])\n    \n    #This method counts the number of words of length n\n    def words_with_length(self,n):\n        return len([x for x in self.words if len(x)==n])\n    \n    #This method returns the frequency of the word w\n    def word_frequency(self,w):\n        return self.words.count(w)\n\nLet us create an instance of the class AnalyzeString() to analyze a sentence.\n\n#Defining a string\nsentence = 'This sentence in an example of a string that we will analyse using a class we have defined'\n\n\n#Creating an instance of class AnalyzeString()\nsentence_analysis = AnalyzeString(sentence)\n\n\n#The attribute 'word' contains the list of words in the sentence\nsentence_analysis.words\n\n['this',\n 'sentence',\n 'in',\n 'an',\n 'example',\n 'of',\n 'a',\n 'string',\n 'that',\n 'we',\n 'will',\n 'analyse',\n 'using',\n 'a',\n 'class',\n 'we',\n 'have',\n 'defined']\n\n\n\n#The method 'word_frequncy()' provides the frequency of a word in the sentence\nsentnce_analysis.word_frequency('we')\n\n2\n\n\n\n#The method 'starts_with()' provides the frequency of number of words starting with a particular string\nsentnce_analysis.starts_with('th')\n\n2\n\n\n\n\n6.2.3 Practice exercise 1\nWrite a class called PasswordManager. The class should have a list called old_passwords that holds all of the user’s past passwords. The last item of the list is the user’s current password. There should be a method called get_password that returns the current password and a method called set_password that sets the user’s password. The set_password method should only change the password if the attempted password is different from all the user’s past passwords. It should either print ‘Password changed successfully!’, or ‘Old password cannot be reused, try again.’ Finally, create a method called is_correct that receives a string and returns a boolean True or False depending on whether the string is equal to the current password or not.\nTo initialize the object of the class, use the list below.\nAfter defining the class:\n\nCheck the attribute old_passwords\nCheck the method get_password()\nTry re-setting the password to ‘ibiza1972’, and then check the current password.\nTry re-setting the password to ‘oktoberfest2022’, and then check the current password.\nCheck the is_correct() method\n\n\npast_passwords = ['titanic1911','ibiza1972','montecarlo799']\n\n\nclass PasswordManager:\n    def __init__(self,past_passwords):\n        self.old_passwords = past_passwords\n        \n    def get_password(self):\n        return self.old_passwords[len(self.old_passwords)-1]\n    \n    def set_password(self,new_password):\n        if new_password not in self.old_passwords:\n            self.old_passwords.append(new_password)\n            print(\"Password changed!\")\n        else:\n            print(\"Old password cannot be reused, try again.\")\n            \n    def is_correct(self,password):\n        if password == self.old_passwords[len(self.old_passwords)-1]:\n            return True\n        return False\n\npasswd = PasswordManager(past_passwords)",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Object-Oriented Programming</span>"
    ]
  },
  {
    "objectID": "classes.html#inheritance",
    "href": "classes.html#inheritance",
    "title": "6  Object-Oriented Programming",
    "section": "6.3 Inheritance",
    "text": "6.3 Inheritance\nIn object-oriented programming there is a concept called inheritance where we can create a new class that builds off of another class. The new class gets all of the variables and methods of the class it is inheriting from (called the base class). It can then define additional variables and methods that are not present in the base class, and it can also override some of the methods of the base class. That is, it can rewrite them to suit its own purposes. Here is a simple example:\n\nclass Parent:\n    \n    def __init__(self, a, b):\n        self.a = a\n        \n    def method1(self):\n        return self.a+' should study!'\n    \n    def method2(self):\n        return self.a+' does not study enough '\n\nclass Child(Parent):\n    \n    def __init__(self, a,b):\n        self.a = a\n        self.b = b\n        \n    def method1(self):\n        return self.a+' should play with ' + self.b\n    \n    def method3(self):\n        return self.a + ' does not play enough'\n\nNote that when inheriting from a class, we indicate the parent class in parentheses in the class statement.\nWe see that method1 is present in both the Parent and Child classes, while method2 is only present in the Parent class. Let us understand how does the Child class use the methods of the Parent class, and what happens if a method with the same name is present in both the parent and child classes.\n\np = Parent('Sam', 'John')\nc = Child('Sam','Pam')\nprint('Parent method 1: ', p.method1())\nprint('Parent method 2: ', p.method2())\nprint()\nprint('Child method 1: ', c.method1())\nprint('Child method 2: ', c.method2())\nprint('Child method 3: ', c.method3())\n\nParent method 1:  Sam should study!\nParent method 2:  Sam does not study enough \n\nChild method 1:  Sam should play with Pam\nChild method 2:  Sam does not study enough \nChild method 3:  Sam does not play enough\n\n\nWe see in the example above that the child has overridden the parent’s method1. The child has inherited the parent’s method2, so it can use it without having to define it. The child also adds some features to the parent class, namely a new variable b and a new method, method3.\n\n6.3.1 Practice exercise 2\nDefine a class that inherits the in-built Python class list, and adds a new method to the class called nunique() which returns the number of unique elements in the list.\nDefine the following list as an object of the class you created. Then:\n\nFind the number of unique elements in the object using the method nunique() of the inherited class.\nCheck if the pop() method of the parent class works to pop an element out of the object.\n\n\nlist_ex = [1,2,5,3,6,5,5,5,12]\n\n\nclass list_v2(list):\n    def nuinque(self):\n        unique_elements = []\n        for x in self:\n            if x not in unique_elements:\n                unique_elements.append(x)\n        return len(unique_elements)\n    \nlist_ex = list_v2(list_ex)\nprint(\"Number of unique elements = \", list_ex.nuinque())\nprint(\"Checking the pop() method, the popped out element is\", list_ex.pop())\n\nNumber of unique elements =  6\nChecking the pop() method, the popped out element is 12\n\n\n\n\n6.3.2 Practice exercise 3\nDefine a class named PasswordManagerUpdated that inherits the class PasswordManager defined in Practice exercise 1. The class PasswordManagerUpdated should have two methods, other than the constructor:\n\nThe method set_password() that sets a new password. The new password must only be accepted if it does not have any punctuations in it, and if it is not the same as one of the old passwords. If the new password is not acceptable, then one of the appropriate messages should be printed - (a) Cannot have punctuation in password, try again, or (b) Old password cannot be reused, try again.\nThe method suggest_password() that randomly sets and returns a password as a string comprising of 15 randomly chosen letters. Letters may be repeated as well.\n\n\nfrom string import punctuation\nimport random as rm\nimport string as st\nclass PasswordManager_updated(PasswordManager):\n    def __init__(self,past_passwords):\n        self.old_passwords = past_passwords.copy()\n    \n    def set_password(self,new_password):\n        if new_password not in self.old_passwords:\n            for punc in punctuation:\n                if punc in new_password:\n                    print(\"Cannot have punctuation in password, try again\")\n                    break\n            self.old_passwords.append(new_password)\n            print(\"password changed!\")\n        else:\n            print(\"Old password cannot be reused, try again.\")\n            \n    def suggest_password(self):\n        suggested_passwd = ''\n        for i in range(15):\n            suggested_passwd = suggested_passwd + st.ascii_lowercase[rm.randint(0,26)]\n        self.old_passwords.append(suggested_passwd)           \n        return suggested_passwd",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Object-Oriented Programming</span>"
    ]
  },
  {
    "objectID": "template_A01_WI25.html",
    "href": "template_A01_WI25.html",
    "title": "Appendix A — Assignment 1",
    "section": "",
    "text": "A.0.1 Instructions",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Assignment 1</span>"
    ]
  },
  {
    "objectID": "template_A01_WI25.html#question-1-4-points",
    "href": "template_A01_WI25.html#question-1-4-points",
    "title": "Appendix A — Assignment 1",
    "section": "A.1 Question 1 (4 points)",
    "text": "A.1 Question 1 (4 points)\n\nCreate a a variable called var_float that contains a decimal number.\nStore a sentence as var_sent that reads exactly as follows: “The square of {} is {}.” Where the first {} is your var_float and the second {} is the square of that variable. Print your sentence.\nPrint the output of using the count method to determine how many spaces are in var_sent.\nRound your var_float to 0 decimal places and convert to an integer. Store this as var_int and print the type to verify this was done correctly.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Assignment 1</span>"
    ]
  },
  {
    "objectID": "template_A01_WI25.html#question-2-3-points",
    "href": "template_A01_WI25.html#question-2-3-points",
    "title": "Appendix A — Assignment 1",
    "section": "A.2 Question 2 (3 points)",
    "text": "A.2 Question 2 (3 points)\nHave a user input 2 Booleans (hint: must be type bool). In a single print line, using only and, or, not functions, have the output return True if both variables are the same, and False is they are different.\nClarification: 1) cannot use conditional if statements 2) this must be capable of printing the correct output for any possible booleans the user could enter, not just the one example that your html will show.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Assignment 1</span>"
    ]
  },
  {
    "objectID": "template_A01_WI25.html#question-3-6-points",
    "href": "template_A01_WI25.html#question-3-6-points",
    "title": "Appendix A — Assignment 1",
    "section": "A.3 Question 3 (6 points)",
    "text": "A.3 Question 3 (6 points)\nAt Northwestern, email addresses are classified as follows:\n\nStudent email addresses end with @u.northwestern.edu.\nProfessor email addresses end with @northwestern.edu (but not @u.northwestern.edu).\n\nWrite a Python program that: 1. Asks the user how many email addresses they will enter. 2. Prompts the user to input each email address. 3. After all email addresses are entered: - Print all professor email addresses under the heading \"Professor Emails:\". - Print all student email addresses under the heading \"Student Emails:\". - If no professor or student emails were entered, print \"None\" under the respective heading.\n\nA.3.1 Requirements:\n\nDo not use lists or other advanced data structures, since we have not covered them yet.\nUse only basic string operations and loops.\nThe program must handle all cases, regardless of uppercase or lowercase in the email addresses.\nTrim any leading or trailing whitespace in the user input before classifying the email.\n\nExample Run:\nHow many email addresses will you be entering? 3  Enter an email address: lshi@northwestern.edu  Enter an email address: jackyu@u.northwestern.edu  Enter an email address: Alexa@u.northwestern.edu \nOutput:\nProfessor Emails:  lshi@northwestern.edu \nStudent Emails:  jackyu@u.northwestern.edu  alexa@u.northwestern.edu",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Assignment 1</span>"
    ]
  },
  {
    "objectID": "template_A01_WI25.html#question-4-3-points",
    "href": "template_A01_WI25.html#question-4-3-points",
    "title": "Appendix A — Assignment 1",
    "section": "A.4 Question 4 (3 points)",
    "text": "A.4 Question 4 (3 points)\nWrite a tip calculator program that asks the user for the price of the meal and the percent tip they want to leave. Then print a sentence that displays both the tip amount and total bill. Example if meal price is 25 dollars and tip is 15 percent:\n                               Your tip amount is $3.75 and your total bill is $28.75.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Assignment 1</span>"
    ]
  },
  {
    "objectID": "template_A01_WI25.html#question-5-3-points",
    "href": "template_A01_WI25.html#question-5-3-points",
    "title": "Appendix A — Assignment 1",
    "section": "A.5 Question 5 (3 points)",
    "text": "A.5 Question 5 (3 points)\nWrite a program that asks the user for a number of seconds and prints out how many minutes and seconds that is. Example:\n                                200 seconds is 3 minutes and 20 seconds.\n                                           \nUse only two lines of code for this question: one line for the input and one line for the print.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Assignment 1</span>"
    ]
  },
  {
    "objectID": "template_A01_WI25.html#question-6-4-points",
    "href": "template_A01_WI25.html#question-6-4-points",
    "title": "Appendix A — Assignment 1",
    "section": "A.6 Question 6 (4 points)",
    "text": "A.6 Question 6 (4 points)\nWrite a program that asks the user to enter two numbers. Have the program return one of the following messages depending on which criteria is met.\n“num1 is greater than num2”; “num 1 is less than num2”; “num1 is equal to num2”; where num1 and num2 are the user inputed values.\nShow the output of the program with any two numbers of your choice.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Assignment 1</span>"
    ]
  },
  {
    "objectID": "template_A01_WI25.html#question-7-4-points",
    "href": "template_A01_WI25.html#question-7-4-points",
    "title": "Appendix A — Assignment 1",
    "section": "A.7 Question 7 (4 points)",
    "text": "A.7 Question 7 (4 points)\n\nUse a single if-elif-else statement to print the smallest of 3 user defined numbers. Show the output of the program with any three numbers of your choice.\nUse a nested conditional statement to print the smallest of 3 user defined numbers. Show the output of the program with any three numbers of your choice.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Assignment 1</span>"
    ]
  },
  {
    "objectID": "template_A01_WI25.html#question-8-6-points",
    "href": "template_A01_WI25.html#question-8-6-points",
    "title": "Appendix A — Assignment 1",
    "section": "A.8 Question 8 (6 points)",
    "text": "A.8 Question 8 (6 points)\nWrite a program that asks the user to enter either rock, paper, or scissors. Use a conditional statement to determine if the user wins, loses, or ties the computer at the game “Rock, Paper, Scissors”. Note: rock beats scissors; scissors beats paper; paper beats rock\nPrint a meaningful sentence that includes the winner, the computer’s choice, and the user’s choice.\n\nHandle case sensitivity (example: if the user enters Rock, it will still run).\nIf the user enters a word other than one of the choices, print “Invalid choice.”.\nShow the output of the program when the user enters Rock (capitalized)\n\n\n# starter code to generate a random choice of rock, paper, scissors\nimport random as rm\ncomp_choice = rm.choice(['rock', 'paper', 'scissors'])\n\n# your solution in this code chunk below",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Assignment 1</span>"
    ]
  },
  {
    "objectID": "template_A01_WI25.html#bonus-6-points",
    "href": "template_A01_WI25.html#bonus-6-points",
    "title": "Appendix A — Assignment 1",
    "section": "A.9 Bonus (6 points)",
    "text": "A.9 Bonus (6 points)\nFor all questions in this assignment that involve accepting user input:\n\nUse a try-except block to handle cases where the user enters invalid input.\nImplement a loop to repeatedly prompt the user for input until they provide a valid value, allowing the program to proceed.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Assignment 1</span>"
    ]
  },
  {
    "objectID": "Datasets.html",
    "href": "Datasets.html",
    "title": "Appendix B — Assignment templates and Datasets",
    "section": "",
    "text": "Assignment templates and datasets used in the book can be found here",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Assignment templates and Datasets</span>"
    ]
  },
  {
    "objectID": "functions2.html#function-definition",
    "href": "functions2.html#function-definition",
    "title": "4  Functions",
    "section": "",
    "text": "4.1.1 Why Use Functions?\nFunctions allow developers to write modular, reusable, and efficient code. Instead of duplicating the same logic multiple times, functions let you define the logic once and call it wherever needed.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "functions2.html#advantages-of-functions",
    "href": "functions2.html#advantages-of-functions",
    "title": "4  Functions",
    "section": "4.2 Advantages of Functions",
    "text": "4.2 Advantages of Functions\n\nIncreases Modularity\n\nFunctions allow the program to be divided into smaller, manageable parts, making it easier to understand, implement, and maintain.\n\nReduces Redundancy\n\nBy defining a function once, you avoid rewriting the same code multiple times. Simply call the function when needed.\n\nMaximizes Code Reusability\n\nFunctions can be used as many times as necessary, enabling you to reuse your code efficiently and reducing overall development effort.\n\nImproves Code Readability\n\nDividing a large program into smaller functions improves the clarity and readability of the code, making it easier to debug and maintain",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "functions2.html#types-of-functions",
    "href": "functions2.html#types-of-functions",
    "title": "4  Functions",
    "section": "4.3 Types of Functions",
    "text": "4.3 Types of Functions\nThere are two types of functions in python:\n\nUser-Defined Functions - these types of functions are defined by the user to perform any specific task\nPredefined Functions - These are built-in functions in python.\n\n\n4.3.1 Built-in Functions\nThese are pre-defined functions that perform common tasks. Built-in functions come from two main sources:\n\nPython Standard Libaries\nThird-Party Libraries\n\n\n4.3.1.1 Python Standard Library\nThe Python Standard Library is an umbrella term for all the modules (A module is a file containing Python code (functions, classes, variables) that can be reused in your programs) and packages that come with Python, including both built-in modules (e.g., __builtins__) and other modules that require importing. Think of the standard library as a toolbox, with some tools always on the table (built-in) and others stored in drawers (import-required). Built-in functions like print(), len(), and type() are available directly without needing to import anything. They are part of Python’s built-in namespace, which is loaded into memory when Python starts.\nMany modules in the Python Standard Library, like math, os, or datetime, are not automatically loaded to keep the startup time and memory usage low. To access functions or classes from these modules, you need to explicitly import them using the import keyword.\nLet’s see different ways to import modules next\n\nBasic Import\n\n\nimport math\n# To use a function from the module, preface it with random followed by a dot, and then the function name\nprint(math.sqrt(16))\n\n4.0\n\n\n\nImport Specific Functions or Classes\n\n\n# import only sqrt function from math module\nfrom math import sqrt, pi\nprint(sqrt(25))\n\n5.0\n\n\n\nImport with Alias:\n\n\nimport numpy as np\nprint(np.array([1, 2, 3]))\n\n[1 2 3]\n\n\n\nWildcard Import (Not Recommended):\n\n\nfrom math import *\nprint(sin(1))\n\n0.8414709848078965\n\n\nThis way imports every function from the module. You should usually avoid doing this, as the module may contain some names that will interfere with your own variable names. For instance if your program uses a variable called total and you import a module that contains a function called total, there can be problems. In contrast, the first way imports an entire module in a way that will not interfere with your variable names. To use a function from the module, preface it with the module name followed by a dot\nLocation: Usually, import statements go at the beginning of the program, but there is no restriction. They can go anywhere as long as they come before the code that uses the module.\n\n\n4.3.1.2 Useful Modules\nHere’s a list of commonly used and useful modules from the Python Standard Library:\n\nos: For interacting with the operating system, such as file paths and environment variables.\nsys: For interacting with the Python runtime environment\nre: For regular expressions and pattern matching\nmath: For mathematical functions and constants\nrandom: For generating random numbers.\ndatetime: For working with dates and times\ntime: For measuring time or introducing delays.\n\n\n4.3.1.2.1 Random Numbers\nGenerating random numbers is very useful in python for performing simulations (we’ll see in later chapters). The library random is used to generate random numbers such as integers, real numbers based on different probability distributions, etc.\nBelow is an example of using the randint() function of the library for generating random numbers in [a, b], where a and b are integers.\n\nimport random as rm\nrm.randint(5,10) #This will generate a random number in [5,10]\n\n7\n\n\nThe random number will be different every time we run the program.\n\n\n4.3.1.2.2 Math Functions\nPython’s math module is part of the standard library and provides access to common mathematical functions and constants. You can use these functions for tasks such as computing square roots, trigonometric operations, logarithms, factorials, and more.\nFor example:\n\nfrom math import sin, pi\nprint(pi)\nprint(pi/2)\nprint('sin(pi/2) =', sin(pi/2))\n\n3.141592653589793\n1.5707963267948966\nsin(pi/2) = 1.0\n\n\n\n\n\n4.3.1.3 Getting Help from Python on a Module\nThere is documentation built into Python. To get help on the random module\n\ndir(rm)\n\n['BPF',\n 'LOG4',\n 'NV_MAGICCONST',\n 'RECIP_BPF',\n 'Random',\n 'SG_MAGICCONST',\n 'SystemRandom',\n 'TWOPI',\n '_ONE',\n '_Sequence',\n '__all__',\n '__builtins__',\n '__cached__',\n '__doc__',\n '__file__',\n '__loader__',\n '__name__',\n '__package__',\n '__spec__',\n '_accumulate',\n '_acos',\n '_bisect',\n '_ceil',\n '_cos',\n '_e',\n '_exp',\n '_fabs',\n '_floor',\n '_index',\n '_inst',\n '_isfinite',\n '_lgamma',\n '_log',\n '_log2',\n '_os',\n '_pi',\n '_random',\n '_repeat',\n '_sha512',\n '_sin',\n '_sqrt',\n '_test',\n '_test_generator',\n '_urandom',\n '_warn',\n 'betavariate',\n 'binomialvariate',\n 'choice',\n 'choices',\n 'expovariate',\n 'gammavariate',\n 'gauss',\n 'getrandbits',\n 'getstate',\n 'lognormvariate',\n 'normalvariate',\n 'paretovariate',\n 'randbytes',\n 'randint',\n 'random',\n 'randrange',\n 'sample',\n 'seed',\n 'setstate',\n 'shuffle',\n 'triangular',\n 'uniform',\n 'vonmisesvariate',\n 'weibullvariate']\n\n\nThis provides a list of all the functions and variables in the random module. You can ignore entries that start with underscores, as they are typically used internally. To get help on a specific function, such as the uniform function, you can type:\n\nhelp(rm.uniform)\n\nHelp on method uniform in module random:\n\nuniform(a, b) method of random.Random instance\n    Get a random number in the range [a, b) or [a, b] depending on rounding.\n\n    The mean (expected value) and variance of the random variable are:\n\n        E[X] = (a + b) / 2\n        Var[X] = (b - a) ** 2 / 12\n\n\n\nFor a comprehensive overview of the entire math module, type:\n\n# help(rm) #This will give you all the functions available in the random module\n\nI encourage you to explore the documentation for a deeper understanding, especially when you need to use a module but are unsure how to get started.\n\n\n\n4.3.2 Practice exercise 1\n\nCan you use math.sqrt(16) without importing the math module? Why or why not?\nIdentify whether the following functions require importing a module:\n\nabs()\nrandom.randint()\ntime.sleep()\n\n\n\n\n4.3.3 Practice exercise 2\nGenerate a random number between [-5,5]. Do this 10,000 times. Find the mean of all the 10,000 random numbers generated.\nSolution:\n\nimport random as rm\ncounter = 0\nfor i in range(10000):\n    counter = counter + rm.uniform(-5,5)\nprint(\"Mean is:\", counter/10000)\n\nMean is: 0.061433810226516616\n\n\n\n4.3.3.1 Third-Party Python libraries\nOther than the Python Standard Library, Python has hundreds of thousands of additional libraries that provide a wealth of useful functions. Since Python is an open-source platform, these libraries are contributed by developers from around the world. Some of the most popular libraries in data science and their purposes are listed below:\n\nNumPy: Performing numerical operations and efficiently storing numerical data.\nPandas: Reading, cleaning and manipulating data.\nMatplotlib, Seaborn: Visualizing data.\nSciPy: Performing scientific computing such as solving differential equations, optimization, statistical tests, etc.\nScikit-learn: Data pre-processing and machine learning, with a focus on prediction.\nStatsmodels: Developing statistical models with a focus on inference\n\nBefore you can use them, you need to install each library and then import it in your code.\nA library can be imported using the import keyword after it has been successfully installed. For example, the NumPy library can be imported as:\n\nimport numpy as np\n\nUsing the as keyboard, the NumPy library has been given the name np. All the functions and attributes of the library can be called using the ‘np.’ prefix. For example, let us generate a sequence of whole numbers upto 10 using the NumPy function arange():\n\nnp.arange(8)\n\narray([0, 1, 2, 3, 4, 5, 6, 7])\n\n\nYou will use these libraries in the upcoming data science courses.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "functions2.html#user-defined-functions",
    "href": "functions2.html#user-defined-functions",
    "title": "4  Functions",
    "section": "4.4 User-defined Functions",
    "text": "4.4 User-defined Functions\nA user-defined function is a function created by the user in Python to perform a specific task. Unlike built-in functions (like print() or len()), user-defined functions allow you to define custom functionality tailored to your program’s needs.\nThe image below provides a helpful breakdown of a Python function definition with labels for each component.\n\n\n\n\n\n\n4.4.1 Key Components (Based on the Diagram)\n\ndef keyword: Indicates the start of a function definition.\nFunction name: A descriptive name for the function, following Python naming conventions.\nParameters: Variables passed into the function inside parentheses (x, y in the example). These are optional.\nColon (:): Signals the end of the function header and the start of the body.\nDocstring: A multi-line string (optional) that describes the purpose and functionality of the function.\nFunction body: Contains the logic and statements of the function.\nreturn statement: Outputs a result back to the caller. This is optional.\n\n\n\n4.4.2 Example\nLook at the function defined below. It asks the user to input a number, and prints whether the number is odd or even.\n\n#This is an example of a function definition\n\ndef odd_even():           \n    num = int(input(\"Enter an integer:\"))\n    if num%2==0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")   #Function definition ends here\n        \nprint(\"This line is not a part of the function as it is not indented\") #This line is not a part of the function\n\nThis line is not a part of the function as it is not indented\n\n\nNote that the function is defined using the def keyword. All the lines within the function definition are indented. The indentation shows the lines of code that below to the function. When the indentation stops, the function definition is considered to have ended.\nWhenever the user wishes to input a number and print whether it is odd or even, they can call the function defined above by its name as follows:\n\nodd_even()\n\nEnter an integer:5\nOdd\n\n\nIn Python, empty parentheses are used when defining a function, even if it doesn’t take any parameters. This is a syntactic requirement to differentiate between variables and functions. It helps Python understand that you are defining a function, not just referencing a variable.\n\n\n4.4.3 Parameters and arguments of a function\nNote that the function defined above needs no input when called. However, sometimes we may wish to define a function that takes input(s), and performs computations on the inputs to produce an output. These input(s) are called parameter(s) of a function. When a function is called, the value(s) of these parameter(s) must be specified as argument(s) to the function.\n\n4.4.3.1 Function with a parameter\nLet us change the previous example to write a function that takes an integer as an input argument, and prints whether it is odd or even:\n\n#This is an example of a function definition that has an argument\ndef odd_even(num):           \n    if num%2==0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")\n\nWe can use the function whenever we wish to find a number is odd or even. For example, if we wish to find that a number input by the user is odd or even, we can call the function with the user input as its argument.\n\nnumber = int(input(\"Enter an integer:\"))\nodd_even(number)\n\nEnter an integer:6\nEven\n\n\nNote that the above function needs an argument as per the function definition. It will produce an error if called without an argument:\n\nodd_even()\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-8-d86a5f720e3b&gt; in &lt;module&gt;\n----&gt; 1 odd_even()\n\nTypeError: odd_even() missing 1 required positional argument: 'num'\n\n\n\n\n\n4.4.3.2 Function with a parameter having a default value\nTo avoid errors as above, sometimes is a good idea to assign a default value to the parameter in the function definition:\n\n#This is an example of a function definition that has an argument with a default value\ndef odd_even(num=0):           \n    if num%2==0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")\n\nNow, we can call the function without an argument. The function will use the default value of the parameter specified in the function definition.\n\nodd_even()\n\nEven\n\n\n\n\n4.4.3.3 Function with multiple parameters\nA function can have as many parameters as needed. Multiple parameters/arguments are separated by commas. For example, below is a function that inputs two strings, concatenates them with a space in between, and prints the output:\n\ndef concat_string(string1, string2):\n    print(string1+' '+string2)\n\n\nconcat_string(\"Hi\", \"there\")\n\nHi there\n\n\n\n\n\n4.4.4 Practice exercise 3\nWrite a function that prints prime numbers between two real numbers - a and b, where a and b are the parameters of the function. Call the function and check the output with a = 60, b = 80.\nSolution:\n\ndef prime_numbers (a,b=100):\n    num_prime_nos = 0\n    \n    #Iterating over all numbers between a and b\n    for i in range(a,b):\n        num_divisors=0\n        \n        #Checking if the ith number has any factors\n        for j in range(2, i):\n            if i%j == 0:\n                num_divisors=1;break;\n                \n        #If there are no factors, then printing and counting the number as prime        \n        if num_divisors==0:\n            print(i)\nprime_numbers(60,80)\n\n61\n67\n71\n73\n79\n\n\n\n\n4.4.5 Functions that return objects\nUntil now, we saw functions that print text. However, the functions did not return any object. For example, the function odd_even prints whether the number is odd or even. However, we did not save this information. In future, we may need to use the information that whether the number was odd or even. Thus, typically, we return an object from the function definition, which consists of the information we may need in the future.\nThe example odd_even can be updated to return the text “odd” or “even” as shown below:\n\n#This is an example of a function definition that has an argument with a default value, and returns an object\ndef odd_even(num=0):           \n    if num%2==0:\n        return(\"Even\")\n    else:\n        return(\"Odd\")\n\nThe function above returns a string “Odd” or “Even”, depending on whether the number is odd or even. This result can be stored in a variable, which can be used later.\n\nresponse=odd_even(3)\nresponse\n\n'Odd'\n\n\nThe variable response now refers to the object where the string “Odd” or “Even” is stored. Thus, the result of the computation is stored, and the variable can be used later on in the program. Note that the control flow exits the function as soon as the first return statement is executed.\n\n\n4.4.6 Global and local variables with respect to a function\nA variable defined within a function is local to that function, while a variable defined outside the function is global with respect to that function. In case a variable with the same name is defined both outside and inside a function, it will refer to its global value outside the function and local value within the function.\nThe example below shows a variable with the name var referring to its local value when called within the function, and global value when called outside the function.\n\nvar = 5\ndef sample_function(var):    \n    print(\"Local value of 'var' within 'sample_function()'= \",var)\n\nsample_function(4)\nprint(\"Global value of 'var' outside 'sample_function()' = \",var)\n\nLocal value of 'var' within 'sample_function()'=  4\nGlobal value of 'var' outside 'sample_function()' =  5\n\n\n\n\n4.4.7 Practice exercise 4: Create a Custom Calculator\nWrite a function calculator that performs basic arithmetic operations: addition, subtraction, multiplication, and division.\nSteps:\n\nDefine a function calculator with three parameters: a, b, and operation (a string indicating the operation, e.g., 'add', 'subtract').\nUse conditional statements to handle the operations.\nReturn the result of the operation.\nHandle invalid operations gracefully.\n\nExpected Output Examples:\nprint(calculator(10, 5, 'add'))        # Output: 15\nprint(calculator(10, 5, 'subtract'))   # Output: 5\nprint(calculator(10, 5, 'multiply'))   # Output: 50\nprint(calculator(10, 5, 'divide'))     # Output: 2.0\n\n\n4.4.8 Bonus Challenge: Palindrome Checker\nWrite a function called is_palindrome that checks if a string is a palindrome (reads the same forward and backward).\nSteps:\n\nDefine the function is_palindrome with one parameter, text.\nIgnore case and spaces.\nReturn True if the string is a palindrome, otherwise False.\n\nExpected OUtput Examples:\nprint(is_palindrome(\"radar\"))         # Output: True\nprint(is_palindrome(\"hello\"))         # Output: False\nprint(is_palindrome(\"A man a plan a canal Panama\"))  # Output: True",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Functions</span>"
    ]
  }
]