[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to programming for data science",
    "section": "",
    "text": "Preface\nThis book serves as the course notes for STAT201 Winter 2025, and it is an evolving resource developed to support the learning objectives of the course. It builds upon the foundational work of the original iteration, authored and maintained by Professor Arvind Krishna. We are deeply grateful for Professor Krishna’s contributions, as his work has provided a robust framework and valuable content upon which this version of the book is based.\nAs the course progresses during this quarter, the notes will be continually updated and refined to reflect the content taught in real time. The modifications aim to enhance the clarity, depth, and relevance of the material to better align with the current teaching objectives and methodologies.\nThis book is a living document, and we welcome feedback, suggestions, and contributions from students, instructors, and the broader academic community to help improve its quality and utility.\nThank you for being part of this journey, and we hope this resource serves as a helpful guide throughout the course.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "venv_setup.html",
    "href": "venv_setup.html",
    "title": "1  Setting up your environment with VS Code for Python Programming",
    "section": "",
    "text": "1.1 Learning Objectives\nBy completing this lecture, you will be able to:",
    "crumbs": [
      "Getting started: Coding environment",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting up your environment with VS Code for Python Programming</span>"
    ]
  },
  {
    "objectID": "venv_setup.html#learning-objectives",
    "href": "venv_setup.html#learning-objectives",
    "title": "1  Setting up your environment with VS Code for Python Programming",
    "section": "",
    "text": "Install and configure Visual Studio Code (VS Code) for Python programming.\nLeverage Jupyter Notebook within VS Code for your data science Python programming.\nUse Quarto to create HTML documents for your upcoming homework submissions.",
    "crumbs": [
      "Getting started: Coding environment",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting up your environment with VS Code for Python Programming</span>"
    ]
  },
  {
    "objectID": "venv_setup.html#introduction-to-visual-studio-code-vs-code",
    "href": "venv_setup.html#introduction-to-visual-studio-code-vs-code",
    "title": "1  Setting up your environment with VS Code for Python Programming",
    "section": "1.2 Introduction to Visual Studio Code (VS Code)",
    "text": "1.2 Introduction to Visual Studio Code (VS Code)\nVisual Studio Code (VS Code) is a free, open-source, and lightweight code editor developed by Microsoft. It’s widely used for coding, debugging, and working with various programming languages and frameworks. Here’s an overview of its key features and functionalities:\n\n1.2.1 Core Features\n\nMulti-language Support: VS Code supports a wide range of programming languages out of the box, including Python, JavaScript, TypeScript, HTML, CSS, and more. Additional language support can be added via extensions.\nExtensibility: The editor has a rich ecosystem of extensions available through the Visual Studio Code Marketplace. These extensions add support for additional programming languages, themes, debuggers, and tools like Git integration.\nIntelliSense: Provides intelligent code completion, parameter info, quick info, and code navigation for many languages, enhancing productivity and reducing errors.\nIntegrated Terminal: Allows you to run command-line tools directly from the editor, making it easy to execute scripts, install packages, and more without leaving the coding environment.\nVersion Control Integration: Seamless integration with Git and other version control systems, allowing you to manage source code repositories, stage changes, commit, and view diffs within the editor.\nDebugging: Supports debugging with breakpoints, call stacks, and an interactive console for various languages and frameworks.\n\n\n\n1.2.2 User Interface\n\nEditor: The main area to edit your files. You can open as many editors as you like side by side vertically and horizontally.\nPrimary Side Bar: Contains different views like the Explorer to assist you while working on your project.\nActivity Bar: Located on the far left-hand side. Lets you switch between views and gives you additional context-specific indicators, like the number of outgoing changes when Git is enabled. You can change the position of the Activity Bar.\nPanel: An additional space for views below the editor region. By default, it contains output, debug information, errors and warnings, and an integrated terminal. The Panel can also be moved to the left or right for more vertical space.\n\n\n\nCommand Palette: Accessed with Ctrl+Shift+P (or Cmd+Shift+P on macOS), it provides a quick way to execute commands, switch themes, change settings, and more.\n\n\n\n\n1.2.3 Extensions\n\nLanguage Extensions: Add support for additional languages such as Rust, Go, C++, and more.\nLinters and Formatters: Extensions like ESLint, Prettier, and Pylint help with code quality and formatting.\nDevelopment Tools: Extensions for Docker, Kubernetes, database management, and more.\nProductivity Tools: Extensions for snippets, file explorers, and workflow enhancements.\n\n\n\n\n1.2.4 Use Cases\n\nWeb Development: VS Code is popular among web developers for its robust support for HTML, CSS, JavaScript, and front-end frameworks like React, Angular, and Vue.\nPython Development: With the Python extension, it provides features like IntelliSense, debugging, linting, and Jupyter Notebook support.\nData Science: Supports Jupyter notebooks, allowing data scientists to write and run Python code interactively.\nDevOps and Scripting: Useful for writing and debugging scripts in languages like PowerShell, Bash, and YAML for CI/CD pipelines.\n\n\n\n1.2.5 Cross-Platform\n\nAvailable on Windows, macOS, and Linux, making it accessible to developers across different operating systems.\n\nOverall, VS Code is a versatile and powerful tool for a wide range of development activities, from simple scripting to complex software projects.",
    "crumbs": [
      "Getting started: Coding environment",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting up your environment with VS Code for Python Programming</span>"
    ]
  },
  {
    "objectID": "venv_setup.html#installing-visual-studio-code",
    "href": "venv_setup.html#installing-visual-studio-code",
    "title": "1  Setting up your environment with VS Code for Python Programming",
    "section": "1.3 Installing Visual Studio Code",
    "text": "1.3 Installing Visual Studio Code\n\nStep 1: Download VS Code:\n\nGo to the official VS Code website and download the installer for your operating system.\n\nStep 2: Install VS Code:\n\nRun the installer and follow the prompts to complete the installation.\n\nStep 3: Launch VS Code:\n\nOpen VS Code after installation to ensure it’s working correctly.",
    "crumbs": [
      "Getting started: Coding environment",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting up your environment with VS Code for Python Programming</span>"
    ]
  },
  {
    "objectID": "venv_setup.html#setting-up-python-development-environment-in-vs-code-using-python-venv",
    "href": "venv_setup.html#setting-up-python-development-environment-in-vs-code-using-python-venv",
    "title": "1  Setting up your environment with VS Code for Python Programming",
    "section": "1.4 Setting Up Python Development Environment in VS Code using python venv",
    "text": "1.4 Setting Up Python Development Environment in VS Code using python venv\nUnlike Spyder and PyCharm, which are specifically designed for Python development, VS Code is a versatile code editor with multi-language support. As a result, setting up the Python environment requires some additional configuration.\nThis step-by-step guide will walk you through setting up your Python environment in Visual Studio Code from scratch using venv.\n\n1.4.1 Install Python\nFor this course, any version of Python 3 works. You don’t need to worry about having the latest version of Python, as long as you have Python 3 installed.\nIf Python 3 is already installed on your computer, you can skip this step.\n\nDownload Python:\n\nGo to the official Python website and download the latest version of Python for your operating system.\nEnsure that you check the box “Add Python to PATH” during installation if it exists.\n\nVerify Python Installation:\n\nOpen a terminal (Command Prompt on Windows, Terminal on macOS/Linux) and type:\npython --version\nYou should see the installed Python version. If the command line doesn’t work, you might see an error message like:\n\npython is not recognized\npython command is not found\n\nThis issue is often caused by Python not being added to the PATH environment variable. Please refer to the instructions to resolve this issue.\n\n\nNote:\nBefore moving forward, ensure that the command python --version successfully prints the version of your installed Python. If it does not, you may need to troubleshoot your Python installation or add it to the PATH environment variable.\n\n\n1.4.2 Install Visual Studio Code Extensions\n\nOpen VS Code.\nGo to Extensions:\n\nClick on the Extensions icon on the sidebar or press Ctrl+Shift+X.\n\nInstall Python Extension:\n\nSearch for the “Python” extension by Microsoft and install it.\n\nInstall Jupyter Extension:\n\nSearch for the “Jupyter” extension by Microsoft and install it.\n\n\n\n\n1.4.3 Set Up a Python Workspace for this course\n\nCreate a New Folder:\n\nCreate a new folder on your computer where you want to store your Python code for this course.\n\nOpen Folder in VS Code:\n\nGo to File &gt; Open Folder and select the newly created folder.\n\n\n\n\n1.4.4 Create a Notebook for your work\n\nIn VS Code, go to File &gt; New File and select Jupyter Notebook. You should see a blank notebook named Untitled-1.ipynb as in the figure below. The .ipynb extension stands for IPython Notebook.\n:\n\nJupyter Notebook is an interactive platform that allows you to write code, add text, and create visualizations. Data scientists love using Jupyter Notebooks as an alternative to working directly with Python files because of their interactivity and flexibility.\n\n\n1.4.5 Create a Python environment for your work - GUI method\n\nWhen you start a Jupyter Notebook in VS Code, you need to choose a kernel. Kernel is the “engine” that runs your code within your Jupyter notebook, and it is tied to a specific Python interpreter or environment.\n\nWhat’s the difference between an interpreter and an environment? An interpreter is a program that runs your Python code. An environment, on the other hand, is a standalone “space” where your code runs. It’s like a container that holds its own interpreter and environment-specific libraries/dependencies, so each project can have its own environment setup without affecting others.\nWhy do we prefer creating an environment for this course rather than using the global interpreter that comes with your Python installation? As a data scientist, you may work on multiple projects and attend different courses that require different sets of packages, dependencies, or even Python versions. By creating a separate environment, you can prevent conflicts between libraries, dependencies, and Python versions across your projects (dependency hell) and also ensure code reproducibility. It is always good practice to work within python environments, especially when you have different projects going on.\nLet’s create a Python environment for the upcoming coursework.\n\n\nCreate using venv in the current workspace\n:\nWhat is venv\nIn Python, venv stands for Virtual Environment, which is a tool used to create isolated environments for Python projects. This helps manage dependencies and avoid conflicts between different projects that may require different versions of Python or different packages.\nChoose a specific python interpreter for your environment:\n\n\nCongratulations! A virtual environment named .venv has been successfully created in your project folder.\n\n\n1.4.6 Choose the .venv environment as the kernel to run the notebook\nFor all your upcoming work in this project, you can select this environment to ensure a consistent setup.\n\n\n1.4.7 Installing ipykernel for your notebook\nCreate a code cell in the notebook and run it. The first time you run a code cell, you will run into\n - After installing ipykernel, you should be able to run the following cell.\n\n\nCode\nimport sys\nprint(\"Current Python executable:\", sys.executable)\n\n\nCurrent Python executable: c:\\Users\\lsi8012\\OneDrive - Northwestern University\\FA24\\303-1\\test_env\\.venv\\Scripts\\python.exe\n\n\nsys.executable is an attribute in the Python sys module that returns the path to the Python interpreter that is currently executing your code.",
    "crumbs": [
      "Getting started: Coding environment",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting up your environment with VS Code for Python Programming</span>"
    ]
  },
  {
    "objectID": "venv_setup.html#jupyter-notebooks-in-vs-code",
    "href": "venv_setup.html#jupyter-notebooks-in-vs-code",
    "title": "1  Setting up your environment with VS Code for Python Programming",
    "section": "1.5 Jupyter Notebooks in VS Code",
    "text": "1.5 Jupyter Notebooks in VS Code\nAfter setting up your environment and successfully running your notebook using the created environment, follow this instruction to become familiar with the native support for Jupyter Notebooks in VS Code\n\n1.5.1 Writing and executing code\nCode cell: By default, a cell is of type Code, i.e., for typing code, as seen as the default choice in the dropdown menu below the Widgets tab. Try typing a line of python code (say, 2+3) in an empty code cell and execute it by pressing Shift+Enter. This should execute the code, and create an new code cell. Pressing Ctlr+Enter for Windows (or Cmd+Enter for Mac) will execute the code without creating a new cell.\nCommenting code in a code cell: Comments should be made while writing the code to explain the purpose of the code or a brief explanation of the tasks being performed by the code. A comment can be added in a code cell by preceding it with a # sign. For example, see the comment in the code below.\nWriting comments will help other users understand your code. It is also useful for the coder to keep track of the tasks being performed by their code.\n\n\nCode\n#This code adds 3 and 5\n3+5\n\n\n8\n\n\nPlease refer to the Style Guide for Python Code to develop good coding habits from the start.\nMarkdown cell: Although a comment can be written in a code cell, a code cell cannot be used for writing headings/sub-headings, and is not appropriate for writing lengthy chunks of text. In such cases, change the cell type to Markdown from the dropdown menu below the Widgets tab. Use any markdown cheat sheet found online, for example, this one to format text in the markdown cells.\nJupyter Notebook shortcuts: Jupyter Notebook shortcuts are handy and quick. Here is a list of commonly used shortcuts for beginners:\n\nShift + Enter: Run the cell and move to the next one.\nA: Insert a cell above.\nB: Insert a cell below.\nD, D: Delete the selected cell.\nY: Change the cell to Code type.\nM: Change the cell to Markdown type.\n\n\n\n1.5.2 Saving and loading notebooks\nTo save the notebook in VS Code, click on File and select Save As, or use the keyboard shortcut CTRL+S. Your notebook will be saved as a file with the extension .ipynb. This file will contain all the code and outputs and can be opened and edited with VS Code or any Jupyter-compatible environment.\nTo open an existing Jupyter notebook with VS Code: 1. Navigate to the file in your system’s file explorer. 2. Right-click on the file. 3. Select Open with VS Code.",
    "crumbs": [
      "Getting started: Coding environment",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting up your environment with VS Code for Python Programming</span>"
    ]
  },
  {
    "objectID": "venv_setup.html#rendering-notebook-as-html-using-quarto",
    "href": "venv_setup.html#rendering-notebook-as-html-using-quarto",
    "title": "1  Setting up your environment with VS Code for Python Programming",
    "section": "1.6 Rendering notebook as HTML using Quarto",
    "text": "1.6 Rendering notebook as HTML using Quarto\nQuarto is designed for high-quality, customizable, and publishable outputs, making it suitable for reports, blogs, or presentations. We’ll use Quarto to print the **.ipynb* file as HTML for your assignment submission.\n\n1.6.1 Installing and Verifying Quarto\n\nDownload and install Quarto from the official website.\nFollow the installation instructions for your operating system.\nOpen your terminal within VS Code:\n\nGo to Terminal -&gt; New Terminal.\n\nRun the following command to verify that Quarto and its dependencies are correctly installed: quarto --version\nYou should see the installed quarto version. If the command line doesn’t work, you might see an error message like:\n- `quarto is not recognized`\n- `quarto command is not found` \nThis issue is often caused by Quarto not being added to the PATH environment variable. Similar to how you added the Python path to the environment variable above, you need to add the Quarto path to the system environment variable so that the command can be recognized by your operating system’s shell.\nOn Windows, if you used the default installation path (without changing it), Quarto is installed in: C:\\Users\\&lt;USER&gt;\\AppData\\Local\\Programs\\Quarto\\bin\n\nNote:\nBefore moving forward, ensure that the command quarto --version successfully prints the version of your installed quarto. If it does not, you may need to troubleshoot your quarto installation or add it to the PATH environment variable.\n\n\n1.6.2 Converting the Notebook to HTML\nCheck the procedure for rendering a notebook as HTML here. You have several options to format the file. Here are some points to remember when using Quarto to render your notebook as HTML:\n\nThe Raw NBConvert cell type is used to render different code formats into HTML or LaTeX. This information is stored in the notebook metadata and converted appropriately. Use this cell type to put the desired formatting settings for the HTML file.\nIn the formatting settings, remember to use the setting embed-resources: true. This will ensure that the rendered HTML file is self-contained, and is not dependent on other files. This is especially important when you are sending the HTML file to someone, or uploading it somewhere. If the file is self-contained, then you can send the file by itself without having to attach the dependent files with it.\n\nOnce you have entered the desired formatting setting in the Raw NBConver cell, you are ready to render the notebook to HTML. Open the terminal, navigate to the directory containing the notebook (.ipynb file), and use the command: quarto render filename.ipynb --to html.",
    "crumbs": [
      "Getting started: Coding environment",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting up your environment with VS Code for Python Programming</span>"
    ]
  },
  {
    "objectID": "venv_setup.html#in-class-exercise",
    "href": "venv_setup.html#in-class-exercise",
    "title": "1  Setting up your environment with VS Code for Python Programming",
    "section": "1.7 In-class exercise",
    "text": "1.7 In-class exercise\n\nCreate a new notebook.\nSave the file as In_class_exercise_1.\nGive a heading to the file - First HTML file.\nPrint Today is day 1 of my programming course.\nCompute and print the number of seconds in a day.\nGenerate html from the notebook using Quarto\n\nThe HTML file should look like the picture below.",
    "crumbs": [
      "Getting started: Coding environment",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting up your environment with VS Code for Python Programming</span>"
    ]
  },
  {
    "objectID": "venv_setup.html#reference",
    "href": "venv_setup.html#reference",
    "title": "1  Setting up your environment with VS Code for Python Programming",
    "section": "1.8 Reference",
    "text": "1.8 Reference\n\nGetting Started with VS Code\nJupyter Notebooks in VS Code\nQuarto",
    "crumbs": [
      "Getting started: Coding environment",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting up your environment with VS Code for Python Programming</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements.html",
    "href": "Variable_expressions_statements.html",
    "title": "2  Variables, expressions and statements",
    "section": "",
    "text": "2.1 Commenting code\nThe # symbol can be used to comment the code. Anything after the # sign is ignored by python. Commenting a code may have several purposes, such as:\nFor example, below is code with a comment to describe the purpose of the code:\n#Computing number of hours of lecture in this course\nprint(\"Total lecture hours of STAT201=\",10*3*(5/6))\n\nTotal lecture hours of STAT201= 25.0",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Variables, expressions and statements</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements.html#commenting-code",
    "href": "Variable_expressions_statements.html#commenting-code",
    "title": "2  Variables, expressions and statements",
    "section": "",
    "text": "Describe what is going to happen in a sequence of code\nDocument who wrote the code or other ancillary information\nTurn off a line of code - perhaps temporarily\n\n\n\n\n2.1.1 Practice exercise 1\nWhich of the following lines is a comment:\n\n#this is a comment\n##this may be a comment\nA comment#",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Variables, expressions and statements</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements.html#print-function-in-python",
    "href": "Variable_expressions_statements.html#print-function-in-python",
    "title": "2  Variables, expressions and statements",
    "section": "2.2 print() function in python",
    "text": "2.2 print() function in python\nThe print() function is a fundamental tool for displaying information.\n\n2.2.1 Basic Examples\n\n# Printing a simple string\nprint(\"Hello, World!\")\n\nHello, World!\n\n\n\n# Printing a string with a number\nprint (\"The total number of seconds in a day is\", 24*60*60)\n\nThe total number of seconds in a day is 86400\n\n\n\n# combine multiple strings using the + operator\nprint(\"Hello, \" + \"World!\")\n\nHello, World!\n\n\n\n\n2.2.2 concatenating strings and variables/expressions in print() function\n\n2.2.2.1 Using f-Strings (Formatted String Literals)\nf-strings provide a concise way to embed expressions inside strings. Introduced in Python 3.6, they improve readability and efficiency.\n\n\n2.2.2.2 Syntax\n\nUse f or F before the string.\nEmbed variables or expressions in {}.\n\n\n# Example 1: Basic Variable Substitution\nname = \"Alice\"\nage = 30\nprint(f\"My name is {name} and I am {age} years old.\")\n\n\n# Example 2: Arithmetic Expressions\na = 10\nb = 5\nprint(f\"The sum of {a} and {b} is {a + b}.\")\n\n\n# Example 3: Formatting Numbers\npi = 3.14159\nprint(f\"Pi rounded to 2 decimal places is {pi:.2f}.\")\nprint(f\"Pi rounded to 2 decimal places is {pi:.0f}.\")\n\n\nMy name is Alice and I am 30 years old.\nThe sum of 10 and 5 is 15.\nPi rounded to 2 decimal places is 3.14.\nPi rounded to 2 decimal places is 3.\n\n\n\nvalue = 123456789\nprint(f\"Rounded With commas: ${value:,}\")\n\nRounded With commas: $123,456,789\n\n\n\n\n2.2.2.3 Using str.format() Method\nThe str.format() method allows you to format strings by placing placeholders {} in the string and replacing them with variables or values.\n\"Your text here {}\".format(variable_or_expression)\n\n# Example 1: Basic Variable Substitution\nname = \"Bob\"\nage = 25\nprint(\"My name is {} and I am {} years old.\".format(name, age))\n\n\n# Example 2: Using Positional Arguments\nprint(\"The sum of {0} and {1} is {2}.\".format(a, b, a + b))\n\n\n# Example 3: Using Keyword Arguments\nprint(\"Pi rounded to 2 decimal places is {value:.2f}.\".format(value=pi))\nprint(\"Pi rounded to 2 decimal places is {value:.0f}.\".format(value=pi))\n\nMy name is Bob and I am 25 years old.\nThe sum of 10 and 5 is 15.\nPi rounded to 2 decimal places is 3.14.\nPi rounded to 2 decimal places is 3.\n\n\n\n\n\n2.2.3 Customizing output formatting\nThe print() function in Python is highly customizable. By default, it adds a newline character (\\n) at the end of each output and separates multiple arguments with a space (). However, these default behaviors can be changed using the end and sep parameters.\n\n2.2.3.1 Default Behavior of print()\nWhen you call print() multiple times, each statement starts on a new line:\n\nprint(\"Hello\")\nprint(\"World\")  # this is printed on a new line\n\nHello\nWorld\n\n\n\n\n2.2.3.2 Changing the end Parameter\nTo avoid automatic line breaks and control what is appended at the end of the output, use the end parameter.\n\nprint(\"Hello\", end=\" \")\nprint(\"World\") # this is printed on the same line\n\nHello World\n\n\n\nprint(\"Loading\", end=\"...\")\nprint(\"Complete\")\n\nLoading...Complete\n\n\n\nprint(\"Line 1\", end=\"\")\nprint(\"Line 2\")\n\nLine 1Line 2\n\n\n\n\n2.2.3.3 Changing the sep Parameter\nWhen printing multiple arguments, the default separator between them is a space. You can change this behavior using the sep parameter.\n\nprint(\"apple\", \"banana\", \"cherry\", sep=\", \")\n# Output: apple, banana, cherry\n\napple, banana, cherry\n\n\n\nprint(\"A\", \"B\", \"C\", sep=\"\")\n\nABC\n\n\n\nprint(\"python\", \"java\", \"c++\", sep=\"\\n\")\n\npython\njava\nc++\n\n\n\n\n2.2.3.4 Combining end and sep\nBoth end and sep can be used together for more control:\n\nprint(\"1\", \"2\", \"3\", sep=\"-\", end=\".\")\nprint(\" Done!\")\n\n1-2-3. Done!\n\n\n\n\n2.2.3.5 Takeaway:\n\nThe end parameter changes what is appended at the end of the output (default: \\n).\nThe sep parameter modifies how multiple arguments are separated (default: space).\nBoth can be combined to create customized output formatting.\n\n\n\n\n2.2.4 Practice exercise 2\nUse the print() function to:\n\nDisplay your name, age, and favorite hobby.\nFormat the output neatly using f-strings.\nUse sep and end to produce this output: apple:banana:cherry.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Variables, expressions and statements</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements.html#data-types",
    "href": "Variable_expressions_statements.html#data-types",
    "title": "2  Variables, expressions and statements",
    "section": "2.3 Data types",
    "text": "2.3 Data types\nPython provides several built-in data types for storing different kinds of information in variables. These data types can be broadly categorized into primitive data types and collection (containers) data types as shown at the beginning of this chapter. While collection data types will be covered in Chapter 5, this chapter focuses on primitive data types, which are used to represent a single value.\n\n2.3.1 Primitive Data Types\nThey represent a single value. In Python, primitive data types include:\n\nInteger (int): Whole numbers (e.g., 10, -3).\nFloating-point number (float): Numbers with decimals (e.g., 3.14, -2.7).\nBoolean (bool): Logical values True or False.\nNone type (None): Represents the absence of a value.\nString (str): A sequence of characters (e.g., \"hello\", 'world').\n\nThe data type of the object can be identified using the in-built python function type(). For example, see the following objects and their types:\n\ntype(4)\n\nint\n\n\n\ntype(4.4)\n\nfloat\n\n\n\ntype('4')\n\nstr\n\n\n\ntype(True)\n\nbool\n\n\n\n\n2.3.2 Practice exercise 3\nWhat is the datatype of the following objects?\n\n‘This is False’\n“This is a number”\n1000\n65.65\nFalse\n\n\n\n2.3.3 Commonly Used Built-in methods associated with each data type\n\n2.3.3.1 Strings\nStrings are sequences of characters and are immutable in Python.\nBelow are Commonly used Methods for strings:\n\nlower(): returns a string with every letter of the original in lowercase\nupper(): returns a string with every letter of the original in uppercase\nreplace(x,y): returns a string with every occurrence of x replaced by y\ncount(x): counts the number of occurrences of x in the string\nindex(x): returns the location of the first occurrence of x\nformat(): format strings\nisalpha(): returns True if every character of the string is a letter\n\nFor a more comprehensive list of string methods, please refer to here\n\n# Example Methods:\ns = \"Hello, World!\"\n\n# Returns the length of the string\nlen(s) \nprint(\"the length of the string is\", len(s))\n\n# Converts string to uppercase\ns.upper()\nprint(\"the string in uppercase is\", s.upper())\n\n# Converts string to lowercase\ns.lower()\nprint(\"the string in lowercase is\", s.lower())\n\n# Capitalizes the first character of the string\ns.capitalize()\nprint(\"the string with first letter capitalized is\", s.capitalize())\n\n# Finds the first occurrence of a substring\ns.find(\"World\")\nprint(\"the first occurrence of the substring is at\", s.find(\"World\"))\n\n# Replaces a substring with another string\ns.replace(\"World\", \"Python\")\nprint(\"the string after replacement is\", s.replace(\"World\", \"Python\"))\n\n# Splits the string into a list\ns.split(\", \")\nprint(\"the string after splitting is\", s.split(\", \"))\n\n# Strips leading/trailing whitespace\ns.strip()\nprint(\"the string after stripping is\", s.strip())\n\n# count the number of occurrences of a substring\ns.count(\"l\")\nprint(\"the number of occurrences of the substring is\", s.count(\"l\"))\n\n# Checks if the string is alphanumeric\ns.isalnum()\nprint(\"is the string alphanumeric?\", s.isalnum())\n\nthe length of the string is 13\nthe string in uppercase is HELLO, WORLD!\nthe string in lowercase is hello, world!\nthe string with first letter capitalized is Hello, world!\nthe first occurrence of the substring is at 7\nthe string after replacement is Hello, Python!\nthe string after splitting is ['Hello', 'World!']\nthe string after stripping is Hello, World!\nthe number of occurrences of the substring is 3\nis the string alphanumeric? False\n\n\n\n\n2.3.3.2 Single quotes ' and double quotes \" to define strings\nin Python, you can use either single quotes (') or double quotes (\") to define strings. Both are functionally equivalent, and you can choose based on preference or readability. Here’s an example:\n\n# Using single quotes\nstring1 = 'Hello, world!'\nprint(string1)\n\n# Using double quotes\nstring2 = \"Hello, world!\"\nprint(string2)\n\nHello, world!\nHello, world!\n\n\nWhen to use one over the other\n\nSingle quotes (') are often preferred for simple strings without embedded quotes.\nDouble quotes (\") are useful when your string contains a single quote, as it avoids the need for escaping:\n\n\n# Single quote in a double-quoted string\nmessage = \"It's a beautiful day!\"\nprint(message)\n\n# Double quote in a single-quoted string\nmessage = 'He said, \"Hello!\"'\nprint(message)\n\nIt's a beautiful day!\nHe said, \"Hello!\"\n\n\nEscaping quotes: If your string contains both single and double quotes, you can use the backslash (\\) to escape them:\n\n# Escaping single quotes in a single-quoted string\nstring_with_escape1 = 'It\\'s a sunny day.'\nprint(string_with_escape1)\n\n# Escaping double quotes in a double-quoted string\nstring_with_escape2 = \"He said, \\\"Hello!\\\"\"\nprint(string_with_escape2)\n\nIt's a sunny day.\nHe said, \"Hello!\"\n\n\nYou can also use triple quotes (''' or \"\"\") for strings that span multiple lines or contain both types of quotes without escaping:\n\nmulti_line_string = \"\"\"This string spans\nmultiple lines and can include 'single quotes' and \"double quotes\".\"\"\"\n\nprint(multi_line_string)\n\nThis string spans\nmultiple lines and can include 'single quotes' and \"double quotes\".\n\n\nDefine a f-string\n\nlanguage = \"Python\"\nlevel = \"beginner\"\ngreeting1 = \"I'm learning {} at a {} level.\".format(language, level)\nprint(greeting1 )\n\ngreeting2 = f\"I'm learning {language} at a {level} level.\"\nprint(greeting2)\n\nI'm learning Python at a beginner level.\nI'm learning Python at a beginner level.\n\n\nString Concatenation: Using the + Operator * Use the + operator to join strings together. * All operands must be strings; otherwise, you’ll get a TypeError. * * Use str() to convert non-strings to strings when necessary.\n\n# Basic Concatenation\ngreeting = \"Hello\"\nname = \"Alice\"\nmessage = greeting + \", \" + name + \"!\"\nprint(message)\n\n# Concatenating String Literals\nprint(\"Python\" + \" is \" + \"fun!\")\n\n# Concatenating with Variables\nlang = \"Python\"\nlevel = \"beginner\"\nprint(\"I'm learning \" + lang + \" as a \" + level + \" programmer.\")\n\nHello, Alice!\nPython is fun!\nI'm learning Python as a beginner programmer.\n\n\nString Repetition: String repetition is achieved using the * operator. It creates a new string by repeating an existing string a specified number of times.\n\n# Creating Patterns\nprint(\"*\" * 10)\n\n**********\n\n\n\nrepeat_count = 4\nprint(\"Python! \" * repeat_count)\n\nPython! Python! Python! Python! \n\n\n\n\n2.3.3.3 Integers\nIntegers are whole numbers, either positive or negative.\nCommonly used Methods:\n\n# Example:\nn = -42\n\n# Returns the absolute value\nabs(n)\nprint(\"the absolute value of the number is\", abs(n))\n\n# Converts to binary string\nbin(n)\nprint(\"the binary string of the number is\", bin(n)) \n\n# Converts to hexadecimal string\nhex(n)\nprint(\"the hexadecimal string of the number is\", hex(n))\n\n# Converts to octal string\noct(n)\nprint(\"the octal string of the number is\", oct(n))\n\n# Returns the power of a number\npow(n, 2)  # n^2\nprint(\"the power of the number is\", pow(n, 2))\n\n# Checks if a number is an integer\nisinstance(n, int)\nprint(\"is the number an integer?\", isinstance(n, int))\n\nthe absolute value of the number is 42\nthe binary string of the number is -0b101010\nthe hexadecimal string of the number is -0x2a\nthe octal string of the number is -0o52\nthe power of the number is 1764\nis the number an integer? True\n\n\n\n\n2.3.3.4 Floats\nFloats represent real numbers and are used for decimal or fractional values.\nCommonly Used Methods:\n\n# Example:\nf = 3.14159\n\n# Returns the absolute value\nabs(f)\nprint(\"the absolute value of the number is\", abs(f))\n\n# Rounds to the nearest integer\nround(f)\nprint(\"the number rounded to the nearest integer is\", round(f))\n\n# Converts to integer by truncating\nint(f)\nprint(\"the number converted to integer is\", int(f))\n\n# Checks if a number is a float\nisinstance(f, float)\nprint(\"is the number a float?\", isinstance(f, float))\n\nthe absolute value of the number is 3.14159\nthe number rounded to the nearest integer is 3\nthe number converted to integer is 3\nis the number a float? True\n\n\n\n\n2.3.3.5 Booleans\nBooleans represent logical values True or False.\nCommonly Used Methods:\n\n# Example:\nb = True\n\n# Converts to integer (True -&gt; 1, False -&gt; 0)\nint(b)\nprint(\"the integer value of the boolean is\", int(b))\n\n# Converts to string\nstr(b)\nprint(\"the string value of the boolean is\", str(b))\n\n# Logical operations:\nnot b  # Negates the boolean\nprint(\"the negation of the boolean is\", not b)\n\nthe integer value of the boolean is 1\nthe string value of the boolean is True\nthe negation of the boolean is False",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Variables, expressions and statements</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements.html#variables",
    "href": "Variable_expressions_statements.html#variables",
    "title": "2  Variables, expressions and statements",
    "section": "2.4 Variables",
    "text": "2.4 Variables\nA variable is a container for storing data values. Variables in Python are dynamically typed, meaning you don’t need to specify their type when declaring them.\n\n2.4.1 Variable Declaration:\n\nYou can create a variable by assigning a value to it using the = operator.\n\nFor example:\n\nx = 10 # Integer\nname = \"Alice\" # String\npi = 3.14 # Float\nis_active = True # Boolean\n\n\n\n2.4.2 Dynamic Typing:\n\nThe type of a variable is determined by the value assigned to it.\n\nFor example:\n\nx = 10 # x is an integer\ny = x # y is also an integer\n\n\n\n2.4.3 Variable Naming Rules:\n\nNames must start with a letter (a-z, A-Z) or an underscore (_).\nNames can only contain letters, numbers (0-9), and underscores.\nNames are case-sensitive (name and Name are different variables).\nReserved keywords (e.g., if, for, while) cannot be used as variable names.\n\n\nThere are certain reserved words in python that have some meaning, and cannot be used as variable names. These reserved words are:\n\n\n\n\n\n\n\n\n2.4.4 Best Practices:\nPython style guide: Please refer to the python style guide for best coding practices, such as naming variables, using spaces, tabs, and styling the different components of your code.\nFor example:\n\n# use descriptive variable names:\ntotal_price = 100\n\n\n# use snake_case for variable names\nuser_age = 25\n\n\n\n2.4.5 Checking Variable Types\nYou can use the type() function to check the type of a variable.\n\nx = 10\nprint(type(x)) \n\ny = \"Python\"\nprint(type(y))  \n\n&lt;class 'int'&gt;\n&lt;class 'str'&gt;\n\n\n\n\n2.4.6 Practice exercise 4\nWhich of the following variable names are valid?\n\nvar.name\nvar9name\n_varname\nvarname*\n\nIn the statements below, determine the variable type\n\nvalue = “name”\nconstant = 7\nanother_const = “variable”\nTrue_False = True",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Variables, expressions and statements</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements.html#assignment-statements",
    "href": "Variable_expressions_statements.html#assignment-statements",
    "title": "2  Variables, expressions and statements",
    "section": "2.5 Assignment statements",
    "text": "2.5 Assignment statements\nValues are assigned to variables with the assignment statement (=). An assignment statement may have a constant or an expression on the right hand side of the (=) sign, and a variable name on the left hand side.\nFor example, the code lines below are assignment statements\n\nvar = 2\nvar = var + 3",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Variables, expressions and statements</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements.html#expressions",
    "href": "Variable_expressions_statements.html#expressions",
    "title": "2  Variables, expressions and statements",
    "section": "2.6 Expressions",
    "text": "2.6 Expressions\n\n2.6.1 Mathematical Operations and Their Operators in Python\nPython provides the following operators for performing mathematical operations:\n\nExponentiation (**): Raises a number to the power of another.\n\nExample: 2 ** 3 results in 8.\n\nModulo (%): Returns the remainder of a division.\n\nExample: 10 % 3 results in 1.\n\nMultiplication (*): Multiplies two numbers.\n\nExample: 4 * 5 results in 20.\n\nDivision (/): Divides one number by another, resulting in a float.\n\nExample: 10 / 2 results in 5.0.\n\nAddition (+): Adds two numbers.\n\nExample: 7 + 3 results in 10.\n\nSubtraction (-): Subtracts one number from another.\n\nExample: 9 - 4 results in 5.\n\n\n\n\n2.6.2 Operator Precedence in Python\nThe operators listed above are in decreasing order of precedence, meaning:\n\nExponentiation (**) is evaluated first.\nModulo (%) is evaluated next.\nMultiplication (*) follows.\nDivision (/), if present, has the same precedence as multiplication.\nAddition (+) and Subtraction (-) are evaluated last, from left to right.\n\n\n2.6.2.1 Example: Precedence in Action\nConsider the expression: 2 + 3 % 4 * 2\nTo evaluate this, Python follows the precedence rules:\n\nModulo (%) is evaluated first:\n\n\n3 % 4\n\n3\n\n\nMultiplication (*) is evaluated next:\n\n3 * 2\n\n6\n\n\nAddition (+) is evaluated last:\n\n2+6\n\n8\n\n\nThus, the result of the expression 2 + 3 % 4 * 2 is 8.\n\n\n2.6.2.2 Key Takeaways\n\nPrecedence determines the order in which operations are performed in an expression.\nParentheses () can be used to override the default precedence and control the order of evaluation.\n\n\nresult = (2 + 3) % (4 * 2)\nprint(result)\n\n5\n\n\n\n\n\n2.6.3 Practice exercise 5\nWhich of the following statements is an assignment statement:\n\nx = 5\nprint(x)\ntype(x)\nx + 4\n\nWhat will be the result of the following expression:\n\n1%2**3*2+1",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Variables, expressions and statements</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements.html#user-input",
    "href": "Variable_expressions_statements.html#user-input",
    "title": "2  Variables, expressions and statements",
    "section": "2.7 User input",
    "text": "2.7 User input\nPython’s in-built input() function is used to take input from the user during program execution. It reads a line of text entered by the user and returns it as a string.\n\n# suppose we wish the user to onput their age:\nage = input(\"Enter your age:\")\n\nThe entered value is stored in the variable age and can be used for computation.\n\n2.7.0.1 Key Point\n\nThe input() is always returned as a string, even if the user enters a number.\nYou can convert the input to other types (e.g., int, float) using type conversion functions.\nThe program execution pauses until the user provides input.\n\n\n\n2.7.1 Examples\n\n# basic input\nname = input(\"Enter your name: \")\nprint(\"Hello, \" + name)\n\n\n# using f-string for formatted output\nname = input(\"Enter your name: \")\nprint(f\"Hello, {name}!\")\n\n\n# To take numeric input, you need to convert the string to an appropriate data type:\nage = int(input(\"Enter your age: \"))\nprint(f\"You will be {age + 1} years old next year.\")\n\n\n# input for calculating the area of a circle\nradius = float(input(\"Enter the radius of the circle: \"))\narea = 3.14 * radius ** 2\nprint(f\"The area of the circle is {area}\")\n\n\n\n2.7.2 Practice exercise 6\nAsk the user to input their year of birth, and print their age.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Variables, expressions and statements</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements.html#converting-data-types-in-python",
    "href": "Variable_expressions_statements.html#converting-data-types-in-python",
    "title": "2  Variables, expressions and statements",
    "section": "2.8 Converting data types in Python",
    "text": "2.8 Converting data types in Python\n\n2.8.1 Why Convert Data Types in Python?\nData type conversion is essential in Python for several reasons:\n\nCompatibility: Some operations or functions require specific data types to work correctly.\n\nExample: Performing arithmetic operations like addition or multiplication requires numeric types such as int or float. If the input is in another type, such as a string, it must be converted first.\n\n\n\n# Example: Converting strings to numbers\nprice = \"19.99\"\ntax = 0.07\ntotal_price = float(price) * (1 + tax)  # Convert string to float\nprint(total_price)  # Output: 21.3893\n\n21.3893\n\n\n\nData Processing: When working with input data (e.g., user input, etc), the data may need to be converted to the appropriate type for further analysis.\n\nExample: Converting strings to numbers to perform calculations\n\n# Example: Arithmetic requires numeric types\nnum_str = \"42\"\nresult = int(num_str) + 10  # Converts the string \"42\" to integer\nprint(result)  # Output: 52\n\n52\n\n\n\nError Prevention: Converting data types ensures consistency and prevents runtime errors caused by type mismatches.\n\n\n# Example: Avoiding type mismatch errors\nage = 25\nmessage = \"Your age is \" + str(age)  # Convert integer to string for concatenation\nprint(message)  # Output: \"Your age is 25\"\n\nYour age is 25\n\n\n\n\n2.8.2 How to Convert Data Types in Python\nPython provides several built-in functions for type conversion.\nCommon Conversion Functions:\n\n\n\n\n\n\n\n\nFunction\nDescription\nExample\n\n\n\n\nint()\nConverts to an integer (from float or string)\nint(\"42\") → 42\n\n\nfloat()\nConverts to a float\nfloat(\"3.14\") → 3.14\n\n\nstr()\nConverts to a string\nstr(42) → \"42\"\n\n\nbool()\nConverts to a boolean\nbool(1) → True\n\n\n\nHowever, in some cases, mathematical operators such as + and * can be applied on strings. The operator + concatenates multiple strings, while the operator * can be used to concatenate a string to itself multiple times:\n\n\"Hi\" + \" there!\"\n\n'Hi there!'\n\n\n\n\"5\" + '3'\n\n'53'\n\n\n\n\"5\"*8\n\n'55555555'",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Variables, expressions and statements</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements.html#errors-and-exceptions",
    "href": "Variable_expressions_statements.html#errors-and-exceptions",
    "title": "2  Variables, expressions and statements",
    "section": "2.9 Errors and Exceptions",
    "text": "2.9 Errors and Exceptions\nErrors and Exceptions are common while writing and executing Python code.\n\n2.9.1 Syntax errors\nSyntax errors occur if the code is written in a way that it does not comply with the rules / standards / laws of the language (python in this case). It occur when the Python parser encounters invalid syntax.\nFor example, suppose a values is assigned to a variable as follows:\n\n9value = 2\n\nThe above code when executed will indicate a syntax error as it violates the rule that a variable name must not start with a number.\n\n# another example\nprint(\"Hello World\"\n\nSolution: Fix the syntax issue by ensuring correct punctuation or structure.\n\n\n2.9.2 Exceptions\nEven if a statement or expression is syntactically correct, it may cause an error when an attempt is made to execute it. Errors detected during execution are called exceptions and are not unconditionally fatal:\nExceptions come in different types, and the type is printed as part of the message: below are the common ones:\n\nMisspelled or incorrectly capitalized variable and function names\nAttempts to perform operations (such as math operations) on data of the wrong type (ex. attempting to subtract two variables that hold string values)\nDividing by zero\nAttempts to use a type conversion function such as int on a value that can’t be converted to an int\n\nFor example, suppose a number is multipled as follws:\n\nmultiplication_result = misy * 4\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[29], line 1\n----&gt; 1 multiplication_result = misy * 4\n\nNameError: name 'misy' is not defined\n\n\n\nThe above code is syntactically correct. However, it will generate an error as the variable misy has not been defined as a number.\n\nint(\"abc\")\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[25], line 1\n----&gt; 1 int(\"abc\")\n\nValueError: invalid literal for int() with base 10: 'abc'\n\n\n\n\nprint(\"2\" + 3)\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[24], line 1\n----&gt; 1 print(\"2\" + 3)\n\nTypeError: can only concatenate str (not \"int\") to str\n\n\n\n\nprint(10 / 0)\n\n\n---------------------------------------------------------------------------\nZeroDivisionError                         Traceback (most recent call last)\nCell In[27], line 1\n----&gt; 1 print(10 / 0)\n\nZeroDivisionError: division by zero\n\n\n\n\n\n2.9.3 Exception Handling\nWhen an error occurs, or exception as we call it, Python will normally stop and generate an error message.\nIf we suspect that some lines of code may produce an error, we can put them in a try block, and if an error does occur, we can use the except block to instead execute an alternative piece of code. This way the program will not stop if an error occurs within the try block, and instead will be directed to execute the code within the except block.\nThese exceptions can be handled Using the Try-Except Blocks\n\n\ntry:\n    print(10 / 0)\nexcept:\n    print(\"Cannot divide by zero!\")\n\n\nCannot divide by zero!\n\n\nSince the try block raises an error, the except block will be executed. Without the try block, the program will crash and raise an error:\nThe finally block, if specified, will be executed regardless if the try block raises an error or not.\n\ntry:\n    print(10 / 0)\nexcept:\n    print(\"Cannot divide by zero!\")\nfinally:\n    print(\"This will always execute.\")\n\nCannot divide by zero!\nThis will always execute.\n\n\n\n\n2.9.4 Practice exercise 7\nSuppose we wish to compute tax using the income and the tax rate. Identify the type of error from amongst syntax error, semantic error and run-time error in the following pieces of code.\n\nincome = 2000\ntax = .08 * Income\nprint(\"tax on\", income, \"is:\", tax)\n\n\nincome = 2000\ntax = .08 x income\nprint(\"tax on\", income, \"is:\", tax)\n\n\nincome = 2000\ntax = .08 ** income\nprint(\"tax on\", income, \"is:\", tax)\n\n\n\n2.9.5 Practice exercise 8\nInput an integer from the user. If the user inputs a valid integer, print whether it is a multiple of 3. However, if the user does not input a valid integer, print a message saying that the input is invalid.\n\nnum = input(\"Enter an integer:\")\n\n#The code lines within the 'try' block will execute as long as they run without error  \ntry:\n    #Converting the input to integer, as user input is a string\n    num_int = int(num)  \n    \n    #checking if the integer is a multiple of 3\n    if num_int % 3 == 0:            \n        print(\"Number is a multiple of 3\")\n    else:\n        print(\"Number is not a multiple of 3\")\n        \n#The code lines within the 'except' block will execute only if the code lines within the 'try' block throw an error        \nexcept:\n    print(\"Input must be an integer\")\n\nInput must be an integer\n\n\n\n\n2.9.6 Semantic errors (bugs)\nSemantic errors occur when the code executes without an error being indicated by the compiler. However, it does not work as inteded by the user. For example, consider the following code of mutiplying the number 6 by 3: x = ‘6’ x * 3 If it was intended to multiply the number 6, then the variable x should have been defined as x=6 so that x has a value of type integer. However, in the above code 6 is a string type value. When a string is multiplied by an integer, say n, it concatenates with itself n times.\n\n\n2.9.7 Practice exercise 9\nThe formula for computing final amount if one is earning compund interest is given by: \\[A = P\\bigg(1+\\frac{r}{n}\\bigg)^{nt},\\]\nwhere:\nP = Principal amount (initial investment),\nr = annual nominal interest rate,\nn = number of times the interest is computed per year,\nt = number of years\nWrite a Python program that assigns the principal amount of $10000 to variable P, assign to n the value 12, and assign to r the interest rate of 8%. Then have the program prompt the user for the number of years t that the money will be compounded for. Calculate and print the final amount after t years.\nWhat is the amount if the user enters t as 4 years?",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Variables, expressions and statements</span>"
    ]
  },
  {
    "objectID": "Control flow.html",
    "href": "Control flow.html",
    "title": "3  Control flow tools",
    "section": "",
    "text": "3.1 Indentation in Python\nA control flow statement in a computer program determines the individual lines of code to be executed and/or the order in which they will be executed. In this chapter, we’ll learn about 3 types of control flow statements:\nSyntax: Python uses indentation to identify the code to be executed if a condition is true. All the code indented within a condition is executed if the condition is true.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Control flow tools</span>"
    ]
  },
  {
    "objectID": "Control flow.html#indentation-in-python",
    "href": "Control flow.html#indentation-in-python",
    "title": "3  Control flow tools",
    "section": "",
    "text": "3.1.1 What is Indentation?\n\nIndentation refers to the spaces or tabs at the beginning of a line of code.\nIn Python, indentation is mandatory and is used to define the structure of the code, such as blocks in loops, conditionals, functions, and classes.\nUnlike some other programming languages, Python does not use braces {} or keywords like begin and end to define blocks of code.\n\n\n\n3.1.2 Rules for Indentation\n\nConsistency is Key:\n\nUse either spaces or tabs for indentation, but do not mix them in the same file.\nThe recommended standard is to use 4 spaces per indentation level (PEP 8).\n\nIndentation Levels:\n\nEach block of code under a statement (e.g., if, for, while, def) must be indented one level deeper than the statement itself.\n\n\n\n\n\n\n\n\n\n3.1.3 Examples\n\n# Example of proper indentation\ndef greet(name):\n    if name:\n        print(f\"Hello, {name}!\")\n    else:\n        print(\"Hello, World!\")",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Control flow tools</span>"
    ]
  },
  {
    "objectID": "Control flow.html#conditonal-execution",
    "href": "Control flow.html#conditonal-execution",
    "title": "3  Control flow tools",
    "section": "3.2 Conditonal execution",
    "text": "3.2 Conditonal execution\nThe first type of control flow satement is if-elif-else. This statement helps with conditional execution of code, i.e., the piece of code to be executed is selected based on certain condition statements(s).\n\n\n\n\n\n\n3.2.1 Comparison operators\nFor testing if conditions are true or false, first we need to learn the operators that can be used for comparison. For example, suppose we want to check if two objects are equal, we use the == operator:\n\n5 == 6\n\nFalse\n\n\nMake sure you can differentiate between the == and = operators: - ==: This is a comparison operator, used to compare two values and return a Boolean result (True or False). - =: This is an assignment operator, used to assign values to variables.\n\nx = \"hi\"\ny = \"hi\"\nx == y\n\nTrue\n\n\nBelow are the python comparison operators and their meanings.\n\n\n\nPython code\nMeaning\n\n\n\n\nx == y\nProduce True if … x is equal to y\n\n\nx != y\n… x is not equal to y\n\n\nx &gt; y\n… x is greater than y\n\n\nx &lt; y\n… x is less than y\n\n\nx &gt;= y\n… x is greater than or equal to y\n\n\nx &lt;= y\n… x is less than or equal to y\n\n\n\n\n\n3.2.2 Logical Operators in Conditional Statements\nLogical operators are used to combine multiple conditions in a conditional statement, allowing for more complex decision-making. Python provides three logical operators:\n\n3.2.2.1 and\n\nDescription: Returns True if both conditions are True.\nExample:\n\n\nx = 5\nif x &gt; 0 and x &lt; 10:\n    print(\"x is a positive single-digit number.\")\n\nx is a positive single-digit number.\n\n\n\n\n3.2.2.2 or\n\nDescription: Returns True if at least one condition is True.\nExample:\n\n\nx = -5\nif x &lt; 0 or x &gt; 10:\n    print(\"x is either negative or greater than 10.\")\n\nx is either negative or greater than 10.\n\n\n\n\n3.2.2.3 not\n\nDescription: Returns the negation of a condition (True becomes False and vice versa).\nExample:\n\n\nx = 5\nif not (x &lt; 0):\n    print(\"x is not negative.\")\n\nx is not negative.\n\n\n\n\n\n3.2.3 if-elif-else statement\nThe if-elif-else statements can check several conditions, and execute the code corresponding to the condition that is true. Note that there can be as many elif statements as required.\nSyntax: Python uses indentation to identify the code to be executed if a condition is true. All the code indented within a condition is executed if the condition is true.\nExample: Input an integer. Print whether it is positive or negative.\n\nnumber = input(\"Enter a number:\")  #Input an integer\nnumber_integer = int(number)       #Convert the integer to 'int' datatype\nif number_integer &gt; 0:               #Check if the integer is positive\n    print(\"Number is positive\")\nelse:\n    print(\"Number is negative\")\n\nNumber is positive\n\n\nIn the above code, note that anything entered by the user is taken as a string datatype by python. However, a string cannot be positive or negative. So, we converted the number input by the user to integer to check if it was positive or negative.\nThere may be multiple statements to be executed if a condition is true. See the example below.\nExample: Input a number. Print whether it is positive, negative or zero. If it is negative, print its absolute value.\n\nnumber = input(\"Enter a number:\")\nnumber_integer = int(number)\nif number_integer &gt; 0:\n    print(\"Number is positive\")\nelif number_integer == 0:\n    print(\"Number is zero\")\nelse:\n    print(\"Number is negative\")\n    print(\"Absolute value of number = \", abs(number_integer))\n\nNumber is positive\n\n\n\n\n3.2.4 Practice exercise 1\nInput a number. Print whether its odd or even.\nSolution:\n\nnum = int(input(\"Enter a number: \"))\nif num%2 == 0:           #Checking if the number is divisible by 2\n    print(\"Number is even\")\nelse:\n    print(\"Number is odd\")\n\nNumber is odd\n\n\n\n\n3.2.5 Practice exercise 2\n\n3.2.5.1 \nAsk the user to enter their exam score. Print the grade based on their score as follows:\n\n\n\nScore\nGrade\n\n\n\n\n(90,100]\nA\n\n\n(80,90]\nB\n\n\n[0,80]\nC\n\n\n\nIf the user inputs a score which is not a number in [0,100], print invalid entry.\nSolution:\n\nscore = input(\"Enter exam score:\")\ntry:\n    \n    #As exam score can be a floating point number (such as 90.65), we need to use 'float' instead of 'int' to convert the user input to a floating point number\n    score_num = float(score)\n    if score_num &gt; 90 and score_num &lt;= 100:\n        print(\"Grade: A\")\n    elif score_num &gt; 80 and score_num &lt;= 90:\n        print(\"Grade: B\")\n    elif score_num &gt;= 0 and score_num &lt;= 80:\n        print(\"Grade: C\")\n    else:\n        print(\"Invalid score\")     #If a number is less than 0 or more than 100\nexcept:\n    print(\"Invalid input\")         #If the input is not a number\n\nGrade: C\n\n\n\n\n3.2.5.2 \nNested if-elif-else statements: This question will lead you to create nested if statements, i.e., an if statement within another if statement.\nThink of a number in [1,5]. Ask the user to guess the number.\n\nIf the user guesses the number correctly, print “Correct in the first attempt!”, and stop the program. Otherwise, print “Incorrect! Try again” and give them another chance to guess the number.\nIf the user guesses the number correctly in the second attempt, print “Correct in the second attempt”, otherwise print “Incorrect in both the attempts, the correct number is:”, and print the correct number.\n\nSolution:\n\n#Let us say we think of the number. Now the user has to guess the number in two attempts.\nrand_no = 3\nguess = input(\"Guess the number:\")\nif int(guess)==rand_no:\n    print(\"Correct in the first attempt!\")\n    \n#If the guess is incorrect, the program will execute the code block below    \nelse:    \n    guess = input(\"Incorrect! Try again:\")\n    if int(guess) == rand_no:\n        print(\"Correct in the second attempt\")\n    else:\n        print(\"Incorrect in the both the attempts, the correct number was:\", rand_no)\n\nIncorrect in the both the attempts, the correct number was: 3",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Control flow tools</span>"
    ]
  },
  {
    "objectID": "Control flow.html#loops-in-python",
    "href": "Control flow.html#loops-in-python",
    "title": "3  Control flow tools",
    "section": "3.3 Loops in Python",
    "text": "3.3 Loops in Python\nPython provides two types of loops: for and while loops. Loops are used to execute a block of code repeatedly until a certain condition is met.\n\n3.3.1 Using range() in for Loops\nThe range() function is commonly used with loops in Python to generate a sequence of numbers. It is particularly useful with for loops.\n\n3.3.1.1 Syntax of range()\nrange(start, stop, step)\n\nstart: (Optional) The starting value of the sequence (default is 0).\nstop: (Required) The endpoint of the sequence (exclusive).\nstep: (Optional) The difference between each number in the sequence (default is 1).\n\nUsing the range() function, the for loop can iterate over a sequence of numbers. See the examples below.\n\nfor i in range(5):\n    print(i)\n\n0\n1\n2\n3\n4\n\n\nNote that the last element is one less than the integer specified in the range() function.\n\n# specify start and stop\nfor i in range(5, 10):\n    print(i)\n\n5\n6\n7\n8\n9\n\n\n\n# use step\nfor i in range(0, 10, 2):\n    print(i)\n\n0\n2\n4\n6\n8\n\n\n\n# A negative step will count down\nfor i in range(10, 0, -2):\n    print(i)\n\n10\n8\n6\n4\n2\n\n\n\n# if start is greater than steop, the range will generate an empty sequence\nfor i in range(10, 0):\n    print(i)\n\nExample: Print the first n elements of the Fibonacci sequence, where n is an integer input by the user, such that n&gt;2. In a fibonacci sequence, each number is the sum of the preceding two numbers, and the sequence starts from 0,1. The sequence is as follows:\n0,1,1,2,3,5,8,13,….\n\nn = int(input(\"Enter number of elements:\"))\n\n#Initializing the sequence to start from 0, 1\nn1, n2 = 0, 1\n\n#Printing the first two numbers of the sequence\nprint(n1)\nprint(n2)\n\nfor i in range(n-2):  #Since two numbers of the sequence are already printed, n-2 numbers are required\n    \n    #Computing the next number of the sequence as the summation of the previous two numbers\n    n3 = n1 + n2\n    print(n3)\n    \n    #As 'n3' is already printed, it is no longer the next number of the sequence. \n    #Thus, we move the values of the variables n1 and n2 one place to the right to compute the next number of the sequence.\n    n1 = n2\n    n2 = n3  \n    \nprint(\"These are the first\", n, \"elements of the fibonacci series\")\n\n0\n1\n1\n2\n3\n5\n8\n13\n21\n34\n55\n89\n144\n233\n377\n610\n987\n1597\n2584\n4181\n6765\n10946\n17711\n28657\n46368\n75025\n121393\n196418\n317811\n514229\n832040\n1346269\n2178309\n3524578\n5702887\n9227465\n14930352\n24157817\n39088169\n63245986\n102334155\n165580141\n267914296\n433494437\n701408733\n1134903170\n1836311903\n2971215073\n4807526976\n7778742049\n12586269025\n20365011074\n32951280099\n53316291173\n86267571272\n139583862445\n225851433717\n365435296162\n591286729879\n956722026041\n1548008755920\n2504730781961\n4052739537881\n6557470319842\n10610209857723\n17167680177565\n27777890035288\n44945570212853\n72723460248141\n117669030460994\n190392490709135\n308061521170129\n498454011879264\n806515533049393\n1304969544928657\n2111485077978050\n3416454622906707\n5527939700884757\nThese are the first 78 elements of the fibonacci series\n\n\nAs in the if-elif-else statement, the for loop uses identation to indicate the piece of code to be run repeatedly.\n\n# nested with range\nfor i in range(5):\n    for j in range(5):\n        print(i, j)\n\n0 0\n0 1\n0 2\n0 3\n0 4\n1 0\n1 1\n1 2\n1 3\n1 4\n2 0\n2 1\n2 2\n2 3\n2 4\n3 0\n3 1\n3 2\n3 3\n3 4\n4 0\n4 1\n4 2\n4 3\n4 4\n\n\n\n\n\n3.3.2 while loop\nWith a while loops, a piece of code is executed repeatedly until certain condition(s) hold.\nExample: Print all the elements of the Fibonacci sequence less than n, where n is an integer input by the user, such that n&gt;2. In a fibonacci sequence, each number is the sum of the preceding two numbers, and the sequence starts from 0,1. The sequence is as follows:\n0,1,1,2,3,5,8,13,….\n\n# Get user input for the Fibonacci sequence limit\nn = int(input(\"Enter the value of n: \"))\n\n# Initializing the sequence to start from 0 and 1\nn1, n2 = 0, 1\n\n# Print the first number of the sequence\nprint(n1)\n\n# Generate Fibonacci numbers less than n\nwhile n2 &lt; n:\n    print(n2)  # Print the next number in the sequence\n\n    # Compute the next number in the sequence as the sum of the previous two numbers\n    n3 = n1 + n2\n\n    # Update values: shift n1 to n2, and n2 to the newly computed value n3\n    n1, n2 = n2, n3\n\n# Print completion message\nprint(f\"These are all the elements of the Fibonacci series less than {n}.\")\n\n0\n1\n1\n2\n3\n5\n8\n13\n21\nThese are all the elements of the fibonacci series less than 23\n\n\nLet’s take it a step further: if the user enters an invalid input, the Python program will repeatedly prompt them until they provide a valid one, using a while loop\n\n# Prompt the user for a valid positive integer\nwhile True:\n    user_input = input(\"Enter a positive integer (n): \")\n    if user_input.isdigit():  # Check if input is numeric\n        n = int(user_input)\n        if n &gt; 0:  # Ensure the number is positive\n            break  # Exit the loop if input is valid\n        else:\n            print(\"Error: Please enter a number greater than 0.\")\n    else:\n        print(\"Error: Invalid input. Please enter a positive integer.\")\n\n# Initializing the sequence to start from 0 and 1\nn1, n2 = 0, 1\n\n# Print the first number of the sequence\nprint(n1)\n\n# Generate Fibonacci numbers less than n\nwhile n2 &lt; n:\n    print(n2)  # Print the next number in the sequence\n\n    # Compute the next number in the sequence as the sum of the previous two numbers\n    n3 = n1 + n2\n\n    # Update values: shift n1 to n2, and n2 to the newly computed value n3\n    n1, n2 = n2, n3\n\n# Print completion message\nprint(f\"These are all the elements of the Fibonacci series less than {n}.\")\n\nEnsures valid input using a while loop:\n\nKeeps prompting the user until they enter a positive integer.\nUses .isdigit() to check if input is numeric.\nConverts input to int and ensures it’s greater than 0.\n\n\n\n3.3.3 Practice exercise 3\n\n3.3.3.1 \nWrite a program that identifies whether a number input by the user is prime or not.\nSolution:\n\nnumber = int(input(\"Enter a positive integer:\"))\n\n#Defining a variable that will have a value of 0 if there are no divisors\nnum_divisors = 0\n\n#Checking if the number has any divisors from 2 to half of the number\nfor divisor in range(2,int(number/2+1)):\n        if number % divisor == 0:\n            \n            #If the number has a divisor, setting num_divisors to 1, to indicate that the number is not prime\n            num_divisors = 1\n            \n            #If a divisor has been found, there is no need to check if the number has more divisors.\n            #Even if the number has a single divisor, it is not prime. Thus, we 'break' out of the loop that checks for divisors\n            #If you don't 'break', your code will still be correct, it will just do some unnecessary computations\n            break\n            \n#If there are no divisors of the number, it is prime, else not prime      \nif num_divisors == 0:\n    print(\"Prime\")   \nelse:\n    print(\"Not prime\")\n\nNot prime\n\n\n\n\n3.3.3.2 \nUpdate the program above to print the prime numbers starting from 2, and less than n where n is a positive integer input by the user.\nSolution:\n\nn = int(input(\"Enter a positive integer:\"))\n\n#Defining a variable - number_iterator. We will use this variable to iterate over all integers from 2 to n, not including n.\n#While iterating over each integer from 2 to n, we will check if the integer is prime or not. If it is prime, it will be printed\nnumber_iterator = 2\n\nprint(number_iterator) #Since '2' is a prime number, we can print it directly (without checking)\n\n#Continue to check for prime numbers until n (but not including n)\nwhile(number_iterator &lt; n):\n    \n    #After each check, increment the number_iterator to check if the next integer is prime\n    number_iterator = number_iterator + 1\n    \n    #Defining a variable that will have a value of 0 if there are no divisors\n    num_divisors = 0\n    \n    #Checking if the integer has any divisors from 2 to half of the integer being checked \n    for divisor in range(2,int(number_iterator/2 + 1)):\n        if number_iterator % divisor == 0:\n            \n            #If the integer has a divisor, setting num_divisors to 1, to indicate that the number is not prime\n            num_divisors = 1\n            \n            #If a divisor has been found, there is no need to check if the integer has more divisors.\n            #Even if the integer has a single divisor, it is not prime. \n            #Thus, we 'break' out of the loop that checks for divisors\n            break\n            \n    #If there are no divisors of the integer being checked, the integer is a prime number, and we print it\n    if num_divisors == 0:\n        print(number_iterator)   \n\n2\n3\n5\n7\n11\n13\n17\n19\n23\n29\n31\n37\n41\n43",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Control flow tools</span>"
    ]
  },
  {
    "objectID": "Control flow.html#control-flow-statements",
    "href": "Control flow.html#control-flow-statements",
    "title": "3  Control flow tools",
    "section": "3.4 Control flow statements",
    "text": "3.4 Control flow statements\nThey are used to influence the flow of execution in loops or blocks of code. Python provides three such statements: break, continue, and pass.\n\n3.4.1 break statement\nThe break statement is used to exit a loop prematurely before it has iterated through all elements or completed its condition. It is commonly used in both for and while loops to stop the execution of the loop when a specific condition is met.\nFor example\n\nfor i in range(10):\n    if i == 5:\n        print(\"Breaking the loop at i =\", i)\n        break\n    print(i)\n\n0\n1\n2\n3\n4\nBreaking the loop at i = 5\n\n\n\n\n3.4.2 Practice exercise 4\nWrite a program that finds and prints the largest factor of a number input by the user. Check the output if the user inputs 133.\nSolution:\n\nnum = int(input(\"Enter an integer:\"))\n\n#Looping from the half the integer to 0 as the highest factor is likely to be closer to half the integer value than 0\nfor i in range(int(num/2) + 1, 0, -1):\n    if num%i == 0:\n        print(\"Largest factor = \", i)\n        \n        #Exiting the loop if the largest integer is found\n        break\n\nLargest factor =  1\n\n\n\n\n3.4.3 continue statement\nThe continue statement is used to skip the current iteration of a loop and move to the next iteration. Unlike the break statement, it does not terminate the loop but allows the loop to continue running.\nFor example, consider the following code:\n\nfor i in range(5):\n    if i == 3:\n        print(f\"Skipping iteration {i}\")\n        continue\n    print(f\"Processing {i}\")\n\nProcessing 0\nProcessing 1\nProcessing 2\nSkipping iteration 3\nProcessing 4\n\n\nThe continue statement skips the iteration when i == 3 and moves to the next iteration.\n\n\n3.4.4 Practice exercise 5:\nWrite a program that asks the user the question, “How many stars are in the Milky Way (in billions)?”. If the user answers 100, the program should print correct, and stop. However, if the user answers incorrectly, the program should print “incorrect”, and ask them if they want to try again. The program should continue to run until the user answers correctly, or they want to stop trying.\n\n#Defining an infinite while loop as the loop may need to run indefinitely if the user keeps answering incorrectly and trying again\nwhile True:\n    answer = input(\"How many stars are there in the Milky Way? \")\n    if answer == '100':\n        print(\"Correct\")\n        \n        #Exiting the loop if the user answers correctly\n        break\n    else:\n        print(\"Incorrect\")\n        try_again = input(\"Do you want to try again? (Y/N) \")\n        if try_again == 'Y':\n            \n            #Continuing with the infinite loop if the user wants to try again\n            continue\n        else:\n            \n            #Exiting the infinite loop if the user wants to stop tryinh\n            break\n\nIncorrect\n\n\n\n\n3.4.5 pass statement\nThe pass statement in Python is a null statement. It serves as a placeholder and does nothing when executed. It is often used in situations where a statement is syntactically required, but no action is intended, or the code is yet to be implemented. In Chapter 4, we will use this statement when we explore user-defined functions.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Control flow tools</span>"
    ]
  },
  {
    "objectID": "Control flow.html#loops-with-strings",
    "href": "Control flow.html#loops-with-strings",
    "title": "3  Control flow tools",
    "section": "3.5 Loops with strings",
    "text": "3.5 Loops with strings\nStrings in Python are sequences of characters. You can use loops to iterate over strings and perform various operations on each character or a subset of the string.\nConsider the following string:\n\nsentence = \"She sells sea shells on the sea shore\"\n\nThe \\(i^{th}\\) character of the string can be retrieved by its index. For example, the first character of the string sentence is:\n\nsentence[0]\n\n'S'\n\n\nA for loop iterates over each character in a string, one at a time.\n\nfor char in sentence:\n    print(char, end=\" \")\n\nS h e   s e l l s   s e a   s h e l l s   o n   t h e   s e a   s h o r e \n\n\nA while loop can be used to iterate over a string by index.\n\nindex = 0\nwhile index &lt; len(sentence):\n    print(sentence[index], end=\" \")\n    index += 1\n\nS h e   s e l l s   s e a   s h e l l s   o n   t h e   s e a   s h o r e \n\n\nSlicing a string:\nA part of the string can be sliced by passing the starting index (say start) and the stopping index (say stop) as start:stop to the index operator []. This is called slicing a string. For a string S, the characters starting from the index start upto the index stop, but not including stop, can be sliced as S[start:stop].\nFor example, the slice of the string sentence from index 4 to index 9, but not including 9 is:\n\nsentence[4:9]\n\n'sells'\n\n\nExample: Counting characters\nInput a string, and count and print the number of “t”s.\n\nstr1 = input(\"Enter a sentence:\")\n\n#Initializing a variable 'count_t' which will store the number of 't's in the string\ncount_t = 0\n\n#Iterating over the entire length of the string. \n#The length of the string is given by the len() function\nfor i in range(len(str1)):\n    \n    #If the ith character of the string is 't', then we count it\n    if str1[i] == 't':\n        count_t = count_t + 1\n\nprint(\"Number of 't's in the str1 = \", count_t)\n\nNumber of 't's in the str1 =  2\n\n\nAnother way to achieve this is to use count()\n\nstr1.count('t')\n\n2\n\n\n\n3.5.1 Practice exercise 6\nChecking for a Substring\nWrite a program that asks the user to input a string, and print the number of “the”s in the string.\n\nstr2 = input(\"Enter a sentence:\")\n\n#Defining a variable to store the count of the word 'the'\ncount_the = 0\n\n#Looping through the entire length of the string except the last 3 letters.\n#As we are checking three letters at a time starting from the index 'i', the last 3 letters of the string will be checked when 'i' is len(string)-3\nfor i in range(len(str2) - 3):\n    \n    #Slicing 3 letters of the string and checking if they are 'the'\n    if str2[i:(i+3)] == 'the':\n        \n        #Counting the words that are 'the'\n        count_the = count_the + 1\nprint(\"Number of 'the's in the str2 = \", count_the)\n\nNumber of 'the's in the str2 =  3\n\n\n\n# using the count method\nstr2.count('the')\n\n3",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Control flow tools</span>"
    ]
  },
  {
    "objectID": "functions2.html",
    "href": "functions2.html",
    "title": "4  Functions",
    "section": "",
    "text": "4.1 Function Definition\nFunctions are the fundamental building blocks of any Python program. They are organized blocks of reusable code designed to perform a specific task. A function can take one or more inputs (parameters), execute a block of code, and optionally return one or more values.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "functions2.html#function-definition",
    "href": "functions2.html#function-definition",
    "title": "4  Functions",
    "section": "",
    "text": "4.1.1 Why Use Functions?\nFunctions allow developers to write modular, reusable, and efficient code. Instead of duplicating the same logic multiple times, functions let you define the logic once and call it wherever needed.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "functions2.html#advantages-of-functions",
    "href": "functions2.html#advantages-of-functions",
    "title": "4  Functions",
    "section": "4.2 Advantages of Functions",
    "text": "4.2 Advantages of Functions\n\nIncreases Modularity\n\nFunctions allow the program to be divided into smaller, manageable parts, making it easier to understand, implement, and maintain.\n\nReduces Redundancy\n\nBy defining a function once, you avoid rewriting the same code multiple times. Simply call the function when needed.\n\nMaximizes Code Reusability\n\nFunctions can be used as many times as necessary, enabling you to reuse your code efficiently and reducing overall development effort.\n\nImproves Code Readability\n\nDividing a large program into smaller functions improves the clarity and readability of the code, making it easier to debug and maintain",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "functions2.html#types-of-functions",
    "href": "functions2.html#types-of-functions",
    "title": "4  Functions",
    "section": "4.3 Types of Functions",
    "text": "4.3 Types of Functions\nThere are two types of functions in python:\n\nPredefined Functions - These are built-in functions in python.\nUser-Defined Functions - these types of functions are defined by the user to perform any specific task\n\n\n4.3.1 Functions\nThese are built-in functions that perform common tasks. Built-in functions come from two main sources:\n\nPython Standard Libaries\nThird-Party Libraries\n\n\n4.3.1.1 Python Standard Library\nThe Python Standard Library is an umbrella term for all the modules (A module is a file containing Python code (functions, classes, variables) that can be reused in your programs) and packages that come with Python, including both built-in modules (e.g., __builtins__) and other modules that require importing. Think of the standard library as a toolbox, with some tools always on the table (built-in) and others stored in drawers (import-required). Built-in functions like print(), len(), and type() are available directly without needing to import anything. They are part of Python’s built-in namespace, which is loaded into memory when Python starts.\nMany modules in the Python Standard Library, like math, os, or datetime, are not automatically loaded to keep the startup time and memory usage low. To access functions or classes from these modules, you need to explicitly import them using the import keyword.\nLet’s see different ways to import modules next\n\nBasic Import\n\n\nimport math\n# To use a function from the module, preface it with random followed by a dot, and then the function name\nprint(math.sqrt(16))\n\n4.0\n\n\n\nImport Specific Functions or Classes\n\n\n# import only sqrt function from math module\nfrom math import sqrt, pi\nprint(sqrt(25))\n\n5.0\n\n\n\nImport with Alias:\n\n\nimport numpy as np\nprint(np.array([1, 2, 3]))\n\n[1 2 3]\n\n\n\nWildcard Import (Not Recommended):\n\n\nfrom math import *\nprint(sin(1))\n\n0.8414709848078965\n\n\nThis way imports every function from the module. You should usually avoid doing this, as the module may contain some names that will interfere with your own variable names. For instance if your program uses a variable called total and you import a module that contains a function called total, there can be problems. In contrast, the first way imports an entire module in a way that will not interfere with your variable names. To use a function from the module, preface it with the module name followed by a dot\nLocation: Usually, import statements go at the beginning of the program, but there is no restriction. They can go anywhere as long as they come before the code that uses the module.\n\n\n4.3.1.2 Useful Modules\nHere’s a list of commonly used and useful modules from the Python Standard Library:\n\nos: For interacting with the operating system, such as file paths and environment variables.\nsys: For interacting with the Python runtime environment\nre: For regular expressions and pattern matching\nmath: For mathematical functions and constants\nrandom: For generating random numbers.\ndatetime: For working with dates and times\ntime: For measuring time or introducing delays.\n\n\n4.3.1.2.1 Random Numbers\nGenerating random numbers is very useful in python for performing simulations (we’ll see in later chapters). The library random is used to generate random numbers such as integers, real numbers based on different probability distributions, etc.\nBelow is an example of using the randint() function of the library for generating random numbers in [a, b], where a and b are integers.\n\nimport random as rm\nrm.randint(5,10) #This will generate a random number in [5,10]\n\n7\n\n\nThe random number will be different every time we run the program.\n\n\n4.3.1.2.2 Math Functions\nPython’s math module is part of the standard library and provides access to common mathematical functions and constants. You can use these functions for tasks such as computing square roots, trigonometric operations, logarithms, factorials, and more.\nFor example:\n\nfrom math import sin, pi\nprint(pi)\nprint(pi/2)\nprint('sin(pi/2) =', sin(pi/2))\n\n3.141592653589793\n1.5707963267948966\nsin(pi/2) = 1.0\n\n\n\n\n\n4.3.1.3 Getting Help from Python on a Module\nThere is documentation built into Python. To get help on the random module\n\ndir(rm)\n\n['BPF',\n 'LOG4',\n 'NV_MAGICCONST',\n 'RECIP_BPF',\n 'Random',\n 'SG_MAGICCONST',\n 'SystemRandom',\n 'TWOPI',\n '_ONE',\n '_Sequence',\n '__all__',\n '__builtins__',\n '__cached__',\n '__doc__',\n '__file__',\n '__loader__',\n '__name__',\n '__package__',\n '__spec__',\n '_accumulate',\n '_acos',\n '_bisect',\n '_ceil',\n '_cos',\n '_e',\n '_exp',\n '_fabs',\n '_floor',\n '_index',\n '_inst',\n '_isfinite',\n '_lgamma',\n '_log',\n '_log2',\n '_os',\n '_pi',\n '_random',\n '_repeat',\n '_sha512',\n '_sin',\n '_sqrt',\n '_test',\n '_test_generator',\n '_urandom',\n '_warn',\n 'betavariate',\n 'binomialvariate',\n 'choice',\n 'choices',\n 'expovariate',\n 'gammavariate',\n 'gauss',\n 'getrandbits',\n 'getstate',\n 'lognormvariate',\n 'normalvariate',\n 'paretovariate',\n 'randbytes',\n 'randint',\n 'random',\n 'randrange',\n 'sample',\n 'seed',\n 'setstate',\n 'shuffle',\n 'triangular',\n 'uniform',\n 'vonmisesvariate',\n 'weibullvariate']\n\n\nThis provides a list of all the functions and variables in the random module. You can ignore entries that start with underscores, as they are typically used internally. To get help on a specific function, such as the uniform function, you can type:\n\nhelp(rm.uniform)\n\nHelp on method uniform in module random:\n\nuniform(a, b) method of random.Random instance\n    Get a random number in the range [a, b) or [a, b] depending on rounding.\n\n    The mean (expected value) and variance of the random variable are:\n\n        E[X] = (a + b) / 2\n        Var[X] = (b - a) ** 2 / 12\n\n\n\nFor a comprehensive overview of the entire math module, type:\n\n# help(rm) #This will give you all the functions available in the random module\n\nI encourage you to explore the documentation for a deeper understanding, especially when you need to use a module but are unsure how to get started.\n\n\n\n4.3.2 Practice exercise 1\n\nCan you use math.sqrt(16) without importing the math module? Why or why not?\nIdentify whether the following functions require importing a module:\n\nabs()\nrandom.randint()\ntime.sleep()\n\n\n\n\n4.3.3 Practice exercise 2\nGenerate a random integer between [-5,5]. Do this 10,000 times. Find the mean of all the 10,000 random numbers generated.\n\n4.3.3.1 Third-Party Python libraries\nOther than the Python Standard Library, Python has hundreds of thousands of additional libraries that provide a wealth of useful functions. Since Python is an open-source platform, these libraries are contributed by developers from around the world. Some of the most popular libraries in data science and their purposes are listed below:\n\nNumPy: Performing numerical operations and efficiently storing numerical data.\nPandas: Reading, cleaning and manipulating data.\nMatplotlib, Seaborn: Visualizing data.\nSciPy: Performing scientific computing such as solving differential equations, optimization, statistical tests, etc.\nScikit-learn: Data pre-processing and machine learning, with a focus on prediction.\nStatsmodels: Developing statistical models with a focus on inference\n\nBefore you can use them, you need to install each library and then import it in your code.\nA library can be imported using the import keyword after it has been successfully installed. For example, the NumPy library can be imported as:\n\nimport numpy as np\n\nUsing the as keyboard, the NumPy library has been given the name np. All the functions and attributes of the library can be called using the ‘np.’ prefix. For example, let us generate a sequence of whole numbers upto 10 using the NumPy function arange():\n\nnp.arange(8)\n\narray([0, 1, 2, 3, 4, 5, 6, 7])\n\n\nYou will use these libraries in the upcoming data science courses.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "functions2.html#user-defined-functions",
    "href": "functions2.html#user-defined-functions",
    "title": "4  Functions",
    "section": "4.4 User-defined Functions",
    "text": "4.4 User-defined Functions\nA user-defined function is a function created by the user in Python to perform a specific task. Unlike built-in functions (like print() or len()), user-defined functions allow you to define custom functionality tailored to your program’s needs.\nThe image below provides a helpful breakdown of a Python function definition with labels for each component.\n\n\n\n\n\n\n4.4.1 Key Components (Based on the Diagram)\n\ndef keyword: Indicates the start of a function definition.\nFunction name: A descriptive name for the function, following Python naming conventions.\nParameters: Variables passed into the function inside parentheses (x, y in the example). These are optional.\nColon (:): Signals the end of the function header and the start of the body.\nDocstring: A multi-line string (optional) that describes the purpose and functionality of the function.\nFunction body: Contains the logic and statements of the function.\nreturn statement: Outputs a result back to the caller. This is optional.\n\nExample\n\n# define a function\ndef my_function():\n    print(\"Hello from a function\")\n\n\n\n4.4.2 Functions are lazy\nFunctions are designed to be reusable. They don’t run until explicitly called, so their behavior can be invoked multiple times,\nCall the my_function to execute it\n\n# Simply use the function's name followed by parentheses\nmy_function()\n\n# call the function again\nmy_function()\n\nHello from a function\nHello from a function\n\n\nThe function was called twice, it printed out the information twice.\n\n\n4.4.3 Arguments and Parameters in a Function\nThe terms arguments and parameters are often used interchangeably but have distinct meanings in the context of functions in Python.\n\n4.4.3.1 Parameters:\n\nDefinition: Parameters are the variables listed in a function’s definition. They act as placeholders that specify the input a function can accept.\nWhen Used: Defined when you write the function.\nExample:\n\n\ndef greet_user(name):  # 'name' is the parameter\n    print(f\"Hello, {name}!\")\n\n\n\n4.4.3.2 Arguments:\n\nDefinition: Arguments are the actual values or data you pass to a function when you call it. These values are assigned to the function’s parameters.\nWhen Used: Provided when you invoke (call) the function.\nExample:\n\n\ngreet_user(\"Alice\")  # \"Alice\" is the argument\n\nHello, Alice!\n\n\nAnother Example:\n\n# Function definition with parameters\ndef add_numbers(a, b):  \n    return a + b\n\n# Function call with arguments\nresult = add_numbers(5, 3)  \n\nprint(result)  \n\n8\n\n\nUnderstanding the distinction between parameters and arguments is crucial for writing clear and effective functions in Python.\n\n\n\n4.4.4 Type of Arguments in Python\n\n4.4.4.1 Required Arguments\nThese are the arguments that must be provided when the function is called. If they are missing, Python will raise a TypeError.\n\ndef greet_user(name):\n    print(f\"Hello, {name}!\")\n\n# Call with a required argument\ngreet_user(\"Alice\")  # Output: Hello, Alice!\n\n# Call without an argument will raise an error\n# greet_user()  # TypeError: greet_user() missing 1 required positional argument: 'name'\n\nHello, Alice!\n\n\n\n\n4.4.4.2 Keyword Arguments\nThese allow you to specify arguments by their parameter name. This makes your code more readable and avoids confusion, especially when dealing with multiple arguments.\n\ndef describe_person(name, age):\n    print(f\"{name} is {age} years old.\")\n\n# Call with keyword arguments\ndescribe_person(name=\"Bob\", age=30)  # Output: Bob is 30 years old.\ndescribe_person(age=25, name=\"Alice\")  # Output: Alice is 25 years old.\n\n# Call without keywords (positional)\ndescribe_person(\"Charlie\", 40)  # Output: Charlie is 40 years old.\ndescribe_person(35, \"David\")  # Output: 35 is David years old.\n\nBob is 30 years old.\nAlice is 25 years old.\nCharlie is 40 years old.\n35 is David years old.\n\n\n\n\n4.4.4.3 Default Arguments\nThese are parameters that have default values. If no argument is provided during the function call, the default value is used.\n\ndef greet(name=\"Guest\"):\n    print(f\"Hello, {name}!\")\n\n# Call with an argument\ngreet(\"Alice\")  # Output: Hello, Alice!\n\n# Call without an argument\ngreet()  # Output: Hello, Guest!\n\nHello, Alice!\nHello, Guest!\n\n\nNote: Default arguments must come after required arguments in the parameter list.\n\ndef greet(name=\"Guest\", message):\n    print(f\"Hello, {name}! {message}\")\n\n\n  Cell In[11], line 1\n    def greet(name=\"Guest\", message):\n                            ^\nSyntaxError: parameter without a default follows parameter with a default\n\n\n\n\n\n\n4.4.4.4 Variable-Length Arguments\nThese allow a function to accept an arbitrary number of arguments.\nUsing *args for Non-Keyword Variable-Length Arguments   The *args syntax is used to pass a variable number of positional arguments. These arguments are accessible as a tuple.\n\ndef sum_numbers(*args):\n    total = sum(args)\n    print(f\"The sum is {total}.\")\n\n# Call with multiple arguments\nsum_numbers(1, 2, 3, 4)  \nsum_numbers(10, 20)  \n\n# Call without arguments\nsum_numbers()  \n\nThe sum is 10.\nThe sum is 30.\nThe sum is 0.\n\n\n\nhelp(print)\n\nHelp on built-in function print in module builtins:\n\nprint(*args, sep=' ', end='\\n', file=None, flush=False)\n    Prints the values to a stream, or to sys.stdout by default.\n\n    sep\n      string inserted between values, default a space.\n    end\n      string appended after the last value, default a newline.\n    file\n      a file-like object (stream); defaults to the current sys.stdout.\n    flush\n      whether to forcibly flush the stream.\n\n\n\nThe print() function in Python allows you to pass multiple arguments, separated by commas. When you do so, print() automatically converts each argument to a string (if it’s not already a string) and joins them with a default separator, which is a space.\nExample with multiple arguments:\n\nprint(\"Hello\", \"world!\", 123, True)\n\nHello world! 123 True\n\n\nYou can change the default separator using the sep parameter.\n\nprint(\"Hello\", \"world!\", 123, True, sep=\"***\")\n\nHello***world!***123***True\n\n\nYou can change the default end parameter as well\n\nprint(\"Hello\", \"world!\", sep=\"***\", end=\" :) \")\nprint(\"This is fun!\")\n\nHello***world! :) This is fun!\n\n\nUsing **kwargs for Keyword Variable-Length Arguments  \nThe **kwargs syntax is used to accept a variable number of keyword arguments. These arguments are accessible as a dictionary.\n\ndef print_details(**kwargs):\n    for key, value in kwargs.items():\n        print(f\"{key}: {value}\")\n\n# Call with keyword arguments\nprint_details(name=\"Alice\", age=30, city=\"Chicago\")\n\nname: Alice\nage: 30\ncity: Chicago\n\n\nExample: Combining *args and **kwargs\n\ndef mixed_function(a, *args, **kwargs):\n    print(f\"Fixed argument: {a}\")\n    print(f\"Args: {args}\")\n    print(f\"Kwargs: {kwargs}\")\n\nmixed_function(1, 2, 3, name=\"Alice\", age=30)\n\nFixed argument: 1\nArgs: (2, 3)\nKwargs: {'name': 'Alice', 'age': 30}\n\n\n\n\n4.4.4.5 Combining All Types of Arguments\nYou can use all these types of arguments in a single function, but they must follow a specific order:\n\nRequired arguments\nDefault arguments\n*args\n**kwargs\n\n\ndef display_info(name, age=18, *hobbies, **details):\n    print(f\"Name: {name}\")\n    print(f\"Age: {age}\")\n    print(f\"Hobbies: {', '.join(hobbies)}\")\n    for key, value in details.items():\n        print(f\"{key}: {value}\")\n\n# Call with all types of arguments\ndisplay_info(\n    \"Alice\", \n    25, \n    \"reading\", \"traveling\", \n    city=\"Chicago\", job=\"Data Scientist\"\n)\n\nName: Alice\nAge: 25\nHobbies: reading, traveling\ncity: Chicago\njob: Data Scientist\n\n\n\n\n\n4.4.5 Practice exercise 3\nWrite a function that prints prime numbers between two real numbers - a and b, where a and b are the parameters of the function. Call the function and check the output with a = 60, b = 80.\n\n\n4.4.6 Functions that return objects\nUntil now, we saw functions that print text. However, the functions did not return any object. For example, the function odd_even prints whether the number is odd or even. However, we did not save this information. In future, we may need to use the information that whether the number was odd or even. Thus, typically, we return an object from the function definition, which consists of the information we may need in the future.\nThe example odd_even can be updated to return the text “odd” or “even” as shown below:\n\n#This is an example of a function definition that has an argument with a default value, and returns an object\ndef odd_even(num=0):           \n    if num%2==0:\n        return(\"Even\")\n    else:\n        return(\"Odd\")\n\nThe function above returns a string “Odd” or “Even”, depending on whether the number is odd or even. This result can be stored in a variable, which can be used later.\n\nresponse=odd_even(3)\nresponse\n\n'Odd'\n\n\nThe variable response now refers to the object where the string “Odd” or “Even” is stored. Thus, the result of the computation is stored, and the variable can be used later on in the program. Note that the control flow exits the function as soon as the first return statement is executed.\n\n\n4.4.7 Practice exercise 4: Create a Custom Calculator\nWrite a function calculator that performs basic arithmetic operations: addition, subtraction, multiplication, and division.\nSteps:\n\nDefine a function calculator with three parameters: a, b, and operation (a string indicating the operation, e.g., 'add', 'subtract').\nUse conditional statements to handle the operations.\nReturn the result of the operation.\nHandle invalid operations gracefully.\n\nExpected Output Examples:\nprint(calculator(10, 5, 'add'))        # Output: 15\nprint(calculator(10, 5, 'subtract'))   # Output: 5\nprint(calculator(10, 5, 'multiply'))   # Output: 50\nprint(calculator(10, 5, 'divide'))     # Output: 2.0\n\n\n4.4.8 Bonus question: Calculator Function with Variable Number of Inputs\nUpdate the calculator function to handle a variable number of inputs using the *args\nHints\n\nVariable-Length Arguments (*args): The *args parameter allows the function to accept an arbitrary number of arguments. These arguments are collected into a tuple, making them easy to iterate over.\nHandling the Operator: The operator parameter remains a keyword argument, defaulting to \"+\". Supported operators are “+”, “-”, “*“, and”/“.\nLogic: Start with the first value in args (result = args[0]). Iterate through the rest of the numbers in args[1:] and apply the operator cumulatively.\nValidation: If fewer than two numbers are provided, return an error message. Handle division by zero with an additional check.\n\n\n\n4.4.9 Practice exercise 5: Palindrome Checker\nWrite a function called is_palindrome that checks if a string is a palindrome (reads the same forward and backward).\nSteps:\n\nDefine the function is_palindrome with one parameter, text.\nIgnore case and spaces.\nReturn True if the string is a palindrome, otherwise False.\n\nExpected OUtput Examples:\nprint(is_palindrome(\"radar\"))         # Output: True\nprint(is_palindrome(\"hello\"))         # Output: False\nprint(is_palindrome(\"A man a plan a canal Panama\"))  # Output: True\n\n\n4.4.10 Global and local variables with respect to a function\n\n4.4.10.1 Local Variables\n\nDefinition: A local variable is defined within a function (or a block of code) and can only be accessed within that function. Once the function finishes executing, local variables are discarded.\nScope: Limited to the function in which they are declared\n\n\ndef example_function():\n    x = 10            # x is a local variable\n    print(\"Inside function, x =\", x)\n\nexample_function()\n# Trying to print x outside the function will result in an error:\nprint(x)  # This will result in an error\n\nInside function, x = 10\n\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[19], line 7\n      5 example_function()\n      6 # Trying to print x outside the function will result in an error:\n----&gt; 7 print(x)  # NameError: name 'x' is not defined\n\nNameError: name 'x' is not defined\n\n\n\n\n\n4.4.10.2 Global Variables\n\nDefinition: A global variable is declared in the main body of the Python file (i.e., at the top level), making it accessible to any function or class in the same module, provided you do not shadow it with a local variable.\nScope: Accessible throughout the entire module (file) after declaration.\nBest Practice: Use global variables sparingly, as they can make code harder to debug and maintain.\n\n\nglobal_var = 20  # global variable\n\ndef show_global_var():\n    print(\"Inside function, global_var =\", global_var)\n\nshow_global_var()\nprint(\"Outside function, global_var =\", global_var)\n\nInside function, global_var = 20\nOutside function, global_var = 20\n\n\n\n\n4.4.10.3 Using a Global Variable Inside a Function\nBy default, if you just read a global variable inside a function, Python will find it in the global scope. However, if you attempt to modify a global variable inside a function without explicitly declaring it global, Python will treat that variable as local, potentially leading to errors.\n\n# Reading a global variable inside a function\nglobal_var = 20  # global variable\n\ndef show_global_var():\n    print(\"Inside function, global_var =\", global_var)\n\nshow_global_var()\n\nInside function, global_var = 20\n\n\n\n# Changing a global variable inside a function\ncounter = 0\n\ndef increment_counter_wrong():\n    counter = counter + 1  # This will cause UnboundLocalError\n    print(\"Counter is now\", counter)\n\nincrement_counter_wrong()  # UnboundLocalError: local variable 'counter' referenced before assignment\n\n\n---------------------------------------------------------------------------\nUnboundLocalError                         Traceback (most recent call last)\nCell In[22], line 8\n      5     counter = counter + 1  # This will cause UnboundLocalError\n      6     print(\"Counter is now\", counter)\n----&gt; 8 increment_counter_wrong()  # UnboundLocalError: local variable 'counter' referenced before assignment\n\nCell In[22], line 5, in increment_counter_wrong()\n      4 def increment_counter_wrong():\n----&gt; 5     counter = counter + 1  # This will cause UnboundLocalError\n      6     print(\"Counter is now\", counter)\n\nUnboundLocalError: cannot access local variable 'counter' where it is not associated with a value\n\n\n\nWhy the Error?  Python sees counter = counter + 1 as creating a new local variable counter on the left, while also trying to read an uninitialized local variable counter on the right.\n\n\n4.4.10.4 The global keyword\nTo modify a global variable inside a function, you must use the global keyword:\n\ncounter = 0  # global variable\n\ndef increment_counter():\n    global counter  # Tell Python we want to use the global 'counter'\n    counter += 1\n    print(\"Counter is now\", counter)\n\nincrement_counter()  # Counter is now 1\nincrement_counter()  # Counter is now 2\nprint(counter)       \n\nCounter is now 1\nCounter is now 2\n2\n\n\nWhen to Use global?  * Rarely. Global variables can create tightly coupled code that is prone to bugs. If needed, consider passing variables as arguments or using class-level variables for shared state.\n\n\n4.4.10.5 Nested Functions and the nonlocal Keyword\nIn Python, you may have nested functions—a function defined inside another function. If the inner function needs to modify a variable in the outer (but still non-global) scope, you can use the nonlocal keyword.\nFor example:\n\ndef outer_function():\n    x = 10\n\n    def inner_function():\n        nonlocal x\n        x += 5\n        print(\"Inner function, x =\", x)\n\n    inner_function()\n    print(\"Outer function, x =\", x)\n\nouter_function()\n\nInner function, x = 15\nOuter function, x = 15\n\n\nnonlocal x lets the inner function modify x in the outer_function’s scope, rather than creating a new local variable.\n\n\n\n4.4.11 Practice exercise 6\nRead the following code and answer the following questions:\n\nWill the program raise an error?\nIf yes, fix the error and provide the corrected code.\nWhat will be the output of the corrected program?\n\n\nmessage = \"Global Message\"  # Global variable\n\ndef outer():\n    msg_outer = \"Outer Message\"  # Enclosed scope\n\n    def inner():\n        message       \n        msg_outer   \n\n        message = \"Changed Global Message\"\n        msg_outer = \"Changed Outer Message\"\n        local_msg = \"Local to inner()\"  \n        print(\"Inside inner()\")\n        print(\"Global message =\", message)\n        print(\"Enclosed msg_outer =\", msg_outer)\n        print(\"Local local_msg =\", local_msg)\n\n    inner()\n    print(\"\\nInside outer() after inner() call:\")\n    print(\"Global message =\", message)\n    print(\"Enclosed msg_outer =\", msg_outer)\n    print(\"Local local_msg =\", local_msg)  \n\nouter()\n\nprint(\"\\nOutside all functions (global scope):\")\nprint(\"Global message =\", message)\nprint(\"Enclosed msg_outer =\", msg_outer)\nprint(\"Local local_msg =\", local_msg)",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "data_structures.html",
    "href": "data_structures.html",
    "title": "5  Data structures",
    "section": "",
    "text": "5.1 Lists\nIn Chapter 2, we learned about primitive data types, each of which represents a single value.\nIn this chapter, we will explore container data types, also known as data structures or collection data types in Python. These data types allow us to store multiple primitive values, such as integers, booleans, and strings, as well as objects of different data types, all within a single structure.\nString is one type of container data type, consisting of a sequence of characters. You already learned about strings in previous chapters. In this chapter, we focus on four main container data types in Python: list, tuple, set, and dictionary. Each differs in terms of order and immutability:\nWe will explore their characteristics, use cases, and differences in detail in this chapter.\nA List in Python is an ordered, mutable (changeable) collection of items. Lists are one of the most versatile data structures in Python.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data structures</span>"
    ]
  },
  {
    "objectID": "data_structures.html#lists",
    "href": "data_structures.html#lists",
    "title": "5  Data structures",
    "section": "",
    "text": "5.1.1 Creating a List\nYou can create a list by enclosing items in square brackets, separated by commas:\n\n# Creating lists\nempty_list = []\nnumbers = [1, 2, 3, 4, 5]\nmixed = [42, \"hello\", True, 3.14]\n\n\n\n5.1.2 Accessing Elements\nLists are ordered collections with unique indexes for each item. We can access/slice the items in the list using this index number. Python supports both positive and negative indexing, as shown below:\n\n\n\nimage.png\n\n\n\nIndexing: Use [index] to access a specific item.\nSlicing: Use [start:end:step] to get a sub-list.\n\n\nmy_list = [10, 20, 30, 40, 50]\n\nprint(my_list[0])       # 10\nprint(my_list[-1])       # 50\nprint(my_list[1:3])     # [20, 30]\nprint(my_list[2:])      # [30, 40, 50]\nprint(my_list[-3:-1])   # [30, 40]\nprint(my_list[::2])     # [10, 30, 50] (step of 2)\nprint(my_list[::-1])    # [50, 40, 30, 20, 10] (reverse)\n\n10\n50\n[20, 30]\n[30, 40, 50]\n[30, 40]\n[10, 30, 50]\n[50, 40, 30, 20, 10]\n\n\n\n\n5.1.3 Modifying a List\nLists can be changed after creation. You can add, remove, or replace elements.\n\n5.1.3.1 Adding Items\n\nappend(item): Add item at the end.\ninsert(index, item): Insert item at a specific index.\nextend(iterable): Extend the list by appending all items from an iterable (like another list).\n\n\nfruits = [\"apple\", \"banana\"]\nfruits.append(\"cherry\")\nprint(fruits)             \n\nfruits.insert(1, \"orange\")\nprint(fruits)             \n\nfruits.extend([\"grape\", \"mango\"])\nprint(fruits)           \n\n['apple', 'banana', 'cherry']\n['apple', 'orange', 'banana', 'cherry']\n['apple', 'orange', 'banana', 'cherry', 'grape', 'mango']\n\n\nLists can be also concatenated using the + operator:\n\nlist_example = [5,'hi',4] \nlist_example = list_example + [None,'7',9]\nlist_example\n\n[5, 'hi', 4, None, '7', 9]\n\n\nFor adding elements to a list, the extend method is preferred over the + operator. This is because the + operator creates a new list, while the extend method adds elements to an existing list. Thus, the extend operator is more memory efficient.\n\n\n5.1.3.2 Removing Items\n\npop([index]): Removes and returns the item at index. If no index is given, removes the last item.\nremove(value): Removes the first occurrence of value.\nclear(): Removes all items from the list, making it empty.\n\n\nnumbers = [10, 20, 30, 40, 50]\n\nlast_item = numbers.pop()\nprint(last_item)     \nprint(numbers)       \n\nnumbers.remove(20)\nprint(numbers)      \n\nnumbers.clear()\nprint(numbers)     \n\n50\n[10, 20, 30, 40]\n[10, 30, 40]\n[]\n\n\n\n\n5.1.3.3 Replacing Items\nYou can directly reassign an element using the index:\n\nletters = [\"a\", \"b\", \"c\", \"d\"]\nletters[1] = \"z\"\nprint(letters)  \n\n['a', 'z', 'c', 'd']\n\n\n\n\n5.1.3.4 Sorting a list\n\nsort(): Sorts the list in place.\n\n\nnums = [4, 1, 3, 2]\nnums.sort()\nprint(nums) \n\n[1, 2, 3, 4]\n\n\n\nhelp(list.sort)\n\nHelp on method_descriptor:\n\nsort(self, /, *, key=None, reverse=False) unbound builtins.list method\n    Sort the list in ascending order and return None.\n\n    The sort is in-place (i.e. the list itself is modified) and stable (i.e. the\n    order of two equal elements is maintained).\n\n    If a key function is given, apply it once to each list item and sort them,\n    ascending or descending, according to their function values.\n\n    The reverse flag can be set to sort in descending order.\n\n\n\nBy default, list.sort() sorts the list in ascending order. You can also pass a reverse=True argument to sort() to reverse the order:\n\nnums.sort(reverse=True)\nprint(nums)\n\n[4, 3, 2, 1]\n\n\nYou can also set the key parameter to a function that returns a value to sort by:\nExample 1: Sorting strings by their length:\nWe define a function get_length that returns the length of a string. Then, we use this function as the key in the sort method.\n\ndef get_length(s):\n    return len(s)\n\nwords = [\"apple\", \"banana\", \"kiwi\", \"grape\", \"pineapple\"]\nwords.sort(key=get_length)  # Sorts by string length\nprint(\"Sorted by length:\", words)\n\nSorted by length: ['kiwi', 'apple', 'grape', 'banana', 'pineapple']\n\n\nAnother way to achieve it. If a key function is given, apply it once to each list item and sort them, ascending or descending, according to their function values.\nthe len function will be applied to each list item.\n\nwords.sort(key=len, reverse=True)  # Sorts by string length in reverse\nprint(\"Sorted by length:\", words)\n\nSorted by length: ['pineapple', 'banana', 'apple', 'grape', 'kiwi']\n\n\nAnother way to define the key function is by using a lambda function. The concept of lambda functions will be covered in the later sequence course.\n\n# use lambada function\nwords.sort(key=lambda s: s[-1])  # Sorts by last letter\nprint(\"Sorted by last letter:\", words)\n\nSorted by last letter: ['banana', 'apple', 'grape', 'pineapple', 'kiwi']\n\n\nExample 2: Sorting a List of Lists by a given Element\n\ndef sort_by_index(data, i):\n    def get_element(lst):\n        return lst[i]  # Extract the element at index i\n\n    data.sort(key=get_element)  # Sort by the specified index\n\n# Example usage:\ndata = [[1, 5, 9], [3, 2, 8], [4, 8, 6], [2, 6, 7]]\n\n# Sort by the second element (index 1)\nsort_by_index(data, 1)\nprint(\"Sorted by index 1:\", data)\n\n# Sort by the third element (index 2)\nsort_by_index(data, 2)\nprint(\"Sorted by index 2:\", data)\n\nSorted by index 1: [[3, 2, 8], [1, 5, 9], [2, 6, 7], [4, 8, 6]]\nSorted by index 2: [[4, 8, 6], [2, 6, 7], [3, 2, 8], [1, 5, 9]]\n\n\nLet’s use lambda function to rewrite it\n\ndata.sort(key=lambda lst: lst[0] + lst[1] + lst[2])  # Sort by sum of elements\nprint(\"Sorted by sum:\", data)\n\n# sort by the last element in descending order\ndata.sort(key=lambda lst: lst[-1], reverse=True)\nprint(\"Sorted by last element in descending order:\", data)\n\nSorted by sum: [[3, 2, 8], [2, 6, 7], [1, 5, 9], [4, 8, 6]]\nSorted by last element in descending order: [[1, 5, 9], [3, 2, 8], [2, 6, 7], [4, 8, 6]]\n\n\n\n\n5.1.3.5 Other Useful Methods\n\nreverse(): Reverses the list in place.\nindex(value): Returns the index of the first occurrence of value.\n\n\nnums.reverse()\nprint(nums)     \n\nidx = nums.index(3)\nprint(idx)     \n\n[1, 2, 3, 4]\n[4, 3, 2, 1]\n1\n\n\n\nhelp(list.reverse)\n\nHelp on method_descriptor:\n\nreverse(self, /) unbound builtins.list method\n    Reverse *IN PLACE*.\n\n\n\n\n\n5.1.3.6 In-Place vs. Out-of-Place Operations\nNote that both list.sort() and list.reverse() modify the list in place, meaning they do not create a new list but instead change the original one directly. To sort or reverse a list without modifying the original list in place, you can use functions that create a new list rather than updating the existing one:\nSorting Without In-Place Modification:\n\noriginal_list = [3, 1, 2]\nsorted_list = sorted(original_list)  # returns a new, sorted list\nprint(original_list)  # [3, 1, 2] (unchanged)\nprint(sorted_list)    # [1, 2, 3]\n\nReversing Without In-Place Modification:\n\n# method 1: use the built-in reversed function\noriginal_list = [3, 1, 2]\nreversed_list = list(reversed(original_list))\nprint(original_list)   # [3, 1, 2] (unchanged)\nprint(reversed_list)   # [2, 1, 3]\n\n[3, 1, 2]\n[2, 1, 3]\n\n\n\n# use list slicing ([::-1]) to create a reversed copy of the original list\noriginal_list = [3, 1, 2]\nreversed_list = original_list[::-1]\nprint(original_list)   # [3, 1, 2] (unchanged)\nprint(reversed_list)   # [2, 1, 3]\n\n[3, 1, 2]\n[2, 1, 3]\n\n\n\n\n\n5.1.4 Practice exercise 1\nStart by defining a list that contains the elements [8, 9, 10]. Then do the following:\n\n5.1.4.1 \nSet the second entry (index 1) to 17\n\n\n5.1.4.2 \nAdd 4, 5, and 6 to the end of the list\n\n\n5.1.4.3 \nRemove the first entry from the list\n\n\n5.1.4.4 \nSort the list\n\n\n5.1.4.5 \nDouble the list (concatenate the list to itself)\n\n\n5.1.4.6 \nInsert 25 at index 3, then print the final list.  Expected Output: [4, 5, 6, 25, 10, 17, 4, 5, 6, 10, 17]\n\n\n\n5.1.5 List Comprehension\nList comprehension is a concise and elegant way to create lists in Python. It provides a shorter syntax to generate lists based on existing iterables while applying conditions or transformations.\nBasic Syntax\n[expression for item in iterable if condition]\nComponents:\n\nExpression: The value or transformation applied to each item.\nfor item in iterable: Iterates over the iterable (e.g., list, range, string).\nCondition (optional): Filters items based on a condition.\n\nExamples:\n\nSimple List Comprehension\n\n\n# create a list of squares of numbers from 1 to 5\nsquares = [x**2 for x in range(1, 6)]\nprint(squares)  \n\n[1, 4, 9, 16, 25]\n\n\n\nList Comprehension with Condition\n\n\n# create a list of even numbers from 1 to 10\nevens = [x for x in range(1, 11) if x % 2 == 0]\nprint(evens)  # Output: [2, 4, 6, 8, 10]\n\n\nList Comprehension with Transformation\n\n\n# create a list of words with all letters in uppercase\nwords = [\"hello\", \"world\", \"python\"]\nuppercase_words = [word.upper() for word in words]\nprint(uppercase_words)\n\n['HELLO', 'WORLD', 'PYTHON']\n\n\n\nNested List Comprehension\n\n\n# flatten a 2D matrix into a 1D list\nmatrix = [[1, 2], [3, 4], [5, 6]]\nflattened = [num for row in matrix for num in row]\nprint(flattened)  # Output: [1, 2, 3, 4, 5, 6]\n\n[1, 2, 3, 4, 5, 6]\n\n\nAnything that can be accomplished using list comprehension can also be achieved with traditional Python loops. However, list comprehension often reduces the amount of code, making it more concise and readable. Additionally, it is often faster than equivalent for loops due to Python’s optimized implementation.\nComparison with for loops\n\n# using a for loop\nsquares = []\nfor x in range(1, 6):\n    squares.append(x**2)\nprint(squares)\n\n[1, 4, 9, 16, 25]\n\n\n\n# using list comprehension\n\nsquares = [x**2 for x in range(1, 6)]\nprint(squares)\n\n[1, 4, 9, 16, 25]\n\n\nBoth achieve the same result, but the list comprehension is more concise.\n\n\n5.1.6 Practice exercise 2\nUsing list comprehension:\n\nCreate a list of all odd numbers between 1 and 20.\nGenerate a list of the lengths of each word in the list [“apple”, “banana”, “cherry”].\nCreate a list of numbers divisible by both 3 and 5 from 1 to 100.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data structures</span>"
    ]
  },
  {
    "objectID": "data_structures.html#tuples",
    "href": "data_structures.html#tuples",
    "title": "5  Data structures",
    "section": "5.2 Tuples",
    "text": "5.2 Tuples\nA Tuple is an ordered, immutable (unchangeable) collection of items. Tuples can be thought of as lists that cannot be modified after creation.\n\n5.2.1 Creating a Tuple\nUse parentheses or the tuple() constructor.\n\nmy_tuple = (1, 2, 3)\nanother_tuple = \"apple\", \"banana\", \"cherry\"  # Parentheses are optional\nsingle_item_tuple = (\"hello\",)               # Note the trailing comma\n\nconverted_tuple = tuple([4, 5, 6])           # Using tuple() constructor\n\n\n\n5.2.2 Accessing Elements\nIndexing and slicing work similarly to lists:\n\nt = (10, 20, 30, 40, 50)\n\nprint(t[0])    # 10\nprint(t[1:3])  # (20, 30)\n\n10\n(20, 30)\n\n\n\n\n5.2.3 Immutability\nOnce you create a tuple, you cannot modify it:\n\nt = (1, 2, 3)\nt[0] = 10  \n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[21], line 2\n      1 t = (1, 2, 3)\n----&gt; 2 t[0] = 10  # TypeError: 'tuple' object does not support item assignment\n\nTypeError: 'tuple' object does not support item assignment\n\n\n\nTuple can be defined without the rounded brackets as well:\nIf you need to change elements, convert it to a list, modify the list, and convert back to a tuple (though this somewhat defeats the purpose of immutability).\n\n\n5.2.4 Tuple methods\nA couple of useful tuple methods are count, which counts the occurences of an element in the tuple and index, which returns the position of the first occurance of an element in the tuple:\n\ntuple_example = (2,5,64,7,2,2)\n\n\ntuple_example.count(2)\n\n3\n\n\n\ntuple_example.index(2)\n\n0\n\n\n\n\n5.2.5 Concatenating tuples\nTuples can be concatenated using the + operator to produce a longer tuple:\n\n(2,7,4) + (\"another\", \"tuple\") + (\"mixed\",\"datatypes\",5)\n\n(2, 7, 4, 'another', 'tuple', 'mixed', 'datatypes', 5)\n\n\nMultiplying a tuple by an integer results in repetition of the tuple:\n\n(2,7,\"hi\") * 3\n\n(2, 7, 'hi', 2, 7, 'hi', 2, 7, 'hi')\n\n\n\n\n5.2.6 Why Use a Tuple?\nA list seems to be much more flexible than tuple, and can replace a tuple almost everywhere. Then why use tuple at all?\nSome of the advatages of a tuple over a list are as follows:\n\nData Integrity: Tuples ensure the data cannot be modified accidentally.\nFaster: Tuples can be more memory efficient and faster to iterate over compared to lists.\nDictionary Keys: Tuples can be used as keys in dictionaries (because they are immutable).\n\n\n#Example showing tuples take less storage space than lists for the same elements\ntuple_ex = (1, 2, 'Obama')\nlist_ex = [1, 2, 'Obama']\nprint(\"Space taken by tuple =\",tuple_ex.__sizeof__(),\" bytes\")\nprint(\"Space taken by list =\",list_ex.__sizeof__(),\" bytes\")\n\nSpace taken by tuple = 48  bytes\nSpace taken by list = 72  bytes\n\n\n\n#Examples showing tuples takes lesser time to retrieve elements\nimport time as tm\ntt = tm.time()\nlist_ex = list(range(1000000)) #List containinig whole numbers upto 1 million\na=(list_ex[::-2])\nprint(\"Time take to retrieve every 2nd element from a list = \", tm.time()-tt)\n\ntt = tm.time()\ntuple_ex = tuple(range(1000000)) #tuple containinig whole numbers upto 1 million\na=(tuple_ex[::-2])\nprint(\"Time take to retrieve every 2nd element from a tuple = \", tm.time()-tt)\n\nTime take to retrieve every 2nd element from a list =  0.03211236000061035\nTime take to retrieve every 2nd element from a tuple =  0.01900315284729004\n\n\n\ntuple_example = 2, 7, 4\n\nWe can check the data type of a python object using the type() function. Let us check the data type of the object tuple_example.\n\ntype(tuple_example)\n\ntuple\n\n\nElements of a tuple can be extracted using their index within square brackets. For example the second element of the tuple tuple_example can be extracted as follows:\n\ntuple_example[1]\n\n7\n\n\nNote that an element of a tuple cannot be modified. For example, consider the following attempt in changing the second element of the tuple tuple_example.\n\ntuple_example[1] = 8\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-6-6ceb38adde52&gt; in &lt;module&gt;\n----&gt; 1 tuple_example[1] = 8\n\nTypeError: 'tuple' object does not support item assignment\n\n\n\nThe above code results in an error as tuple elements cannot be modified.\nNow that we have an idea about tuple, let us try to think where it can be used.\n\n\n\n\n\n \n        \n\n\n\n\n5.2.7 Tuple Comprehension?\nThere is no direct tuple comprehension in Python. However, Python does allow a similar construct that looks like tuple comprehension but actually creates a generator expression. If you want to create a tuple using comprehension-like syntax, you can explicitly convert the generator to a tuple.\n\ngen = (x**2 for x in range(5))\nprint(gen)\n\n&lt;generator object &lt;genexpr&gt; at 0x000001B5240C9BE0&gt;\n\n\nHere, gen is a generator, not a tuple. Generators are lazily evaluated, meaning values are computed on demand, making them memory-efficient.\nTo create a tuple, we can use the tuple() function to convert the generator into a tuple explicitly.\n\ntup = tuple(x**2 for x in range(5))\nprint(tup)  # Output: (0, 1, 4, 9, 16)\n\n(0, 1, 4, 9, 16)\n\n\nWhy No Direct Tuple Comprehension?\n\nPython uses parentheses for both tuple creation and generator expressions. To avoid ambiguity, Python reserves parentheses for generators in this context.\nConverting a generator to a tuple ensures explicit behavior and consistency.\n\nUsing List Comprehension for a List of Tuples:\nIn Python, list comprehension is often used to create a list of tuples because it combines the flexibility of tuple creation with the concise syntax of list comprehension.\nExample: Create a list of tuples, where each tuple consists of a natural number and its square, for natural numbers ranging from 5 to 15.\n\nsqrt_natural_no_5_15 = [(x,x**2) for x in range(5,16)]\nprint(sqrt_natural_no_5_15)\n\n[(5, 25), (6, 36), (7, 49), (8, 64), (9, 81), (10, 100), (11, 121), (12, 144), (13, 169), (14, 196), (15, 225)]\n\n\n\n\n5.2.8 Practice exercise 3\nBelow is a list consisting of responses to the question: “At what age do you think you will marry?” from students of the STAT303-1 Fall 2022 class.\n\nexp_marriage_age=['24','30','28','29','30','27','26','28','30+','26','28','30','30','30','probably never','30','25','25','30','28','30+ ','30','25','28','28','25','25','27','28','30','30','35','26','28','27','27','30','25','30','26','32','27','26','27','26','28','37','28','28','28','35','28','27','28','26','28','26','30','27','30','28','25','26','28','35','29','27','27','30','24','25','29','27','33','30','30','25','26','30','32','26','30','30','I wont','25','27','27','25','27','27','32','26','25','never','28','33','28','35','25','30','29','30','31','28','28','30','40','30','28','30','27','by 30','28','27','28','30-35','35','30','30','never','30','35','28','31','30','27','33','32','27','27','26','N/A','25','26','29','28','34','26','24','28','30','120','25','33','27','28','32','30','26','30','30','28','27','27','27','27','27','27','28','30','30','30','28','30','28','30','30','28','28','30','27','30','28','25','never','69','28','28','33','30','28','28','26','30','26','27','30','25','Never','27','27','25']\n\nUse list comprehension to:\n\n5.2.8.1 \nRemove the elements that are not integers - such as ‘probably never’, ‘30+’, etc. What is the length of the new list?\nHint: The built-in python function of the str class - isdigit() may be useful to check if the string contains only digits.\n\n\n5.2.8.2 \nCap the values greater than 80 to 80, in the clean list obtained in (1). What is the mean age when people expect to marry in the new list?\n\n\n5.2.8.3 \nDetermine the percentage of people who expect to marry at an age of 30 or more.\n\n\n\n5.2.9 Practice exercise 4\nUSA’s GDP per capita from 1960 to 2021 is given by the tuple T in the code cell below. The values are arranged in ascending order of the year, i.e., the first value is for 1960, the second value is for 1961, and so on. Print the years in which the GDP per capita of the US increased by more than 10%.\n\nT = (3007, 3067, 3244, 3375,3574, 3828, 4146, 4336, 4696, 5032,5234,5609,6094,6726,7226,7801,8592,9453,10565,11674,12575,13976,14434,15544,17121,18237,19071,20039,21417,22857,23889,24342,25419,26387,27695,28691,29968,31459,32854,34515,36330,37134,37998,39490,41725,44123,46302,48050,48570,47195,48651,50066,51784,53291,55124,56763,57867,59915,62805,65095,63028,69288)\n\n\nDetermine the average GDP per capita for the given period (1960–2021).\nIdentify the year with the highest GDP per capita.\nIdentify the year with the lowest GDP per capita.\nCreate a new tuple where each element represents the percentage change in GDP per capita compared to the previous year.\nIdentify the year with the highest percentage increase in GDP per capita.\nConstruct a tuple where each element is a pair in the format (year, GDP per capita), making it easier to analyze trends over time.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data structures</span>"
    ]
  },
  {
    "objectID": "data_structures.html#sets",
    "href": "data_structures.html#sets",
    "title": "5  Data structures",
    "section": "5.3 Sets",
    "text": "5.3 Sets\nA set is a built-in data type in Python used to store unordered, unique, and mutable items. Sets are commonly used for operations like\n\nMembership testing: Quickly check if an item is in a set.\nEliminating duplicate entries: Sets automatically ensure only unique elements are stored.\nMathematical set operations: Supports union (|), intersection (&), and difference (-).\n\n\n5.3.1 Creating a set\nA set can be created using curly braces or the set() constructor\n\nmy_set = {1, 2, 3, 4}\nprint(my_set)  \n\nmy_set = set([1, 2, 2, 3, 4])\nprint(my_set) \ntype(my_set) \n\nmy_empty_set=set()\nprint(my_empty_set)\n\n{1, 2, 3, 4}\n{1, 2, 3, 4}\nset()\n\n\nA set can be also created by removing repeated elements from lists.\n\nmy_list = [1,4,4,4,5,1,2,1,3]\nmy_set_from_list = list(set(my_list))\nprint(my_set_from_list)\n\n[1, 2, 3, 4, 5]\n\n\n\n\n5.3.2 Accessing Elements\nSince sets are unordered, you cannot use indexing or slicing:\n\nmy_set = {\"apple\", \"banana\", \"cherry\"}\nmy_set[0] \n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[60], line 2\n      1 my_set = {\"apple\", \"banana\", \"cherry\"}\n----&gt; 2 my_set[0] \n\nTypeError: 'set' object is not subscriptable\n\n\n\nInstead, you typically check membership or iterate over all elements:\n\nif \"apple\" in my_set:\n    print(\"Apple is in the set\")\n\nfor item in my_set:\n    print(item)\n\nApple is in the set\ncherry\nbanana\napple\n\n\n\n\n5.3.3 Adding and Removing Items\n\nadd(item): Adds an item to the set (if it’s not already present).\nupdate(iterable): Adds multiple items (from another set, list, tuple, etc.).\nremove(item): Removes the specified item (raises an error if not found).\ndiscard(item): Removes the specified item (does not raise an error if not found).\npop(): Removes and returns an arbitrary item from the set.\nclear(): Removes all items.\n\n\n# Add an element to a set\nprint(my_set)\nmy_set.add(5)\nprint(my_set)\n\n# Remove an element from a set\nmy_set.remove(3)\nprint(my_set)\n\n# Remove an element that doesn't exist\nmy_set.remove(3)  # This will raise a KeyError\n\n# Remove an element that doesn't exist without raising an error\nmy_set.discard(3)\n\n{1, 2, 4, 5}\n{1, 2, 4, 5}\n\n\n\n---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\nCell In[44], line 7\n      4 print(my_set)\n      6 # Remove an element from a set\n----&gt; 7 my_set.remove(3)\n      8 print(my_set)\n     10 # Remove an element that doesn't exist\n\nKeyError: 3\n\n\n\nRemove an element using remove() (raises an error if the element does not exist); Use discard() to remove an element (does not raise an error if the element does not exist):\n\n\n5.3.4 Mathematical Set Operations\nSets are ideal for tasks involving unions, intersections, and differences. The table below explains these operatoins on sets\n\n\n\n\n\n\n\n\n\nOperation\nSymbol\nMethod\nDescription\n\n\n\n\nUnion\n|\nset_a.union(set_b)\nCombines all unique elements from two sets.\n\n\nIntersection\n&\nset_a.intersection(set_b)\nFinds common elements between two sets.\n\n\nDifference\n-\nset_a.difference(set_b)\nFinds elements in set_a but not in set_b.\n\n\nSymmetric Difference\n^\nset_a.symmetric_difference(set_b)\nFinds elements in either set, but not both.\n\n\n\n\n# Examples of Mathematical Operations on Sets\nset_a = {1, 2, 3}\nset_b = {3, 4, 5}\n\n# Union\nprint(set_a | set_b)  \n\n# Intersection\nprint(set_a & set_b) \n\n# Difference\nprint(set_a - set_b) \n\n# Symmetric Difference\nprint(set_a ^ set_b)  \n\n{1, 2, 3, 4, 5}\n{3}\n{1, 2}\n{1, 2, 4, 5}\n\n\n\n\n5.3.5 Set Comprehension\nWe can do set comprehensions just like list comprehensions\n\n# set comprehension\nmy_set = {x for x in 'hello'}\nprint(my_set)\ntype(my_set)\n\n{'h', 'o', 'e', 'l'}\n\n\nset\n\n\n\n\n5.3.6 Practice exercise 5\nThe GDP per capita of USA for most years from 1960 to 2021 is given by the tuple D_tuple given in the code cell below.\n\nD_tuple = ((1960, 3007), (1961, 3067), (1962, 3244), (1963, 3375), (1964, 3574), (1965, 3828), \n (1966, 4146), (1967, 4336), (1968, 4696), (1970, 5234), (1971, 5609), (1972, 6094), \n (1973, 6726), (1974, 7226), (1975, 7801), (1976, 8592), (1978, 10565), (1979, 11674), \n (1980, 12575), (1981, 13976), (1982, 14434), (1983, 15544), (1984, 17121), (1985, 18237), \n (1986, 19071), (1987, 20039), (1988, 21417), (1989, 22857), (1990, 23889), (1991, 24342), \n (1992, 25419), (1993, 26387), (1994, 27695), (1995, 28691), (1996, 29968), (1997, 31459), \n (1998, 32854), (2000, 36330), (2001, 37134), (2002, 37998), (2003, 39490), (2004, 41725), \n (2005, 44123), (2006, 46302), (2007, 48050), (2008, 48570), (2009, 47195), (2010, 48651), \n (2011, 50066), (2012, 51784), (2013, 53291), (2015, 56763), (2016, 57867), (2017, 59915), \n (2018, 62805), (2019, 65095), (2020, 63028), (2021, 69288))\n\nDetermine which years between 1960 and 2021 are missing GDP per capita data.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data structures</span>"
    ]
  },
  {
    "objectID": "data_structures.html#dictionary",
    "href": "data_structures.html#dictionary",
    "title": "5  Data structures",
    "section": "5.4 Dictionary",
    "text": "5.4 Dictionary\nA Dictionary in Python is an mutable collection of key-value pairs. It’s used when you need to associate a specific value with a key and quickly access that value by using the key.\nA dictionary in Python consists of key-value pairs, where both keys and values are Python objects. While values can be of any data type, keys must be immutable objects, such as strings, integers, or tuples. For example, a list can be used as a value in a dictionary, but not as a key, because lists are mutable and their elements can be changed.\nOrdered Dictionaries: As of Python 3.7, the language specification guarantees that dictionaries maintain insertion order. This means you can reliably depend on the order in which keys were inserted when iterating over or converting the dictionary. Prior to Python 3.7, this behavior was not officially guaranteed (though in CPython 3.6, it happened to work that way in practice).\n\n5.4.1 Creating a dictionary\nUse braces {} or the dict() constructor.\n\n# Using braces\nperson = {\n    \"name\": \"Alice\",\n    \"age\": 30,\n    \"city\": \"New York\"\n}\nprint(person)\n\n# Using dict() constructor\ncar = dict(brand=\"Tesla\", model=\"Model 3\", year=2023)\nprint(car)\n\n\n# Empty dictionary\nempty_dict = {}\nprint(empty_dict)\n\n{'name': 'Alice', 'age': 30, 'city': 'New York'}\n{'brand': 'Tesla', 'model': 'Model 3', 'year': 2023}\n{}\n\n\n\n\n5.4.2 Accessing and Modifying Values\nAccess values by their keys using square bracket notation [key] or the .get(key) method.\n\nperson = {\"name\": \"Alice\", \"age\": 30, \"city\": \"New York\"}\n\n# Access value\nprint(person[\"name\"])           \nprint(person.get(\"name\"))        \n\n# Modify value\nperson[\"age\"] = 31\nprint(person)                    \n\n# Add new key-value pair\nperson[\"job\"] = \"Engineer\"\nprint(person)                    \n\nAlice\nAlice\n{'name': 'Alice', 'age': 31, 'city': 'New York'}\n{'name': 'Alice', 'age': 31, 'city': 'New York', 'job': 'Engineer'}\n\n\n\n\n5.4.3 Removing Keys\n\npop(key): Removes and returns the value for key.\ndel dictionary[key]: Removes the key-value pair.\npopitem(): Removes and returns an arbitrary key-value pair (in Python 3.7+, it removes the last inserted item).\nclear(): Removes all items.\n\n\nperson = {\"name\": \"Alice\", \"age\": 30, \"city\": \"New York\"}\n\nage = person.pop(\"age\")\nprint(age)         # 30\nprint(person)      # {\"name\": \"Alice\", \"city\": \"New York\"}\n\ndel person[\"name\"]\nprint(person)      # {\"city\": \"New York\"}\n\nperson.popitem()\nprint(person)      # {} (now empty)\n\nperson.clear()\nprint(person)      # {}\n\n30\n{'name': 'Alice', 'city': 'New York'}\n{'city': 'New York'}\n{}\n{}\n\n\n\n\n5.4.4 Iterating over elements of a dictionary\nUse the following dictionary methods to retrieve all key and values at once:\n\nkeys(): Returns the list of all keys present in the dictionary.\nvalues(): Returns the list of all values present in the dictionary\nitems(): Returns all the items present in the dictionary. Each item will be inside a tuple as a key-value pair.\n\n\nfruits = {\"apple\": 3, \"banana\": 5, \"cherry\": 2}\nprint(fruits.keys())  \nprint(fruits.values()) \n\nfor key,value in fruits.items():\n    print(\"The Head of State of\",key,\"is\",value)\n\ndict_keys(['apple', 'banana', 'cherry'])\ndict_values([3, 5, 2])\nThe Head of State of apple is 3\nThe Head of State of banana is 5\nThe Head of State of cherry is 2\n\n\n\n\n5.4.5 Practice exercise 6\nThe GDP per capita of USA for most years from 1960 to 2021 is given by the dictionary D given in the code cell below.\nFind:\n\nThe GDP per capita in 2015\nThe GDP per capita of 2014 is missing. Update the dictionary to include the GDP per capita of 2014 as the average of the GDP per capita of 2013 and 2015.\nImpute the GDP per capita of other missing years in the same manner as in (2), i.e., as the average GDP per capita of the previous year and the next year. Note that the GDP per capita is not missing for any two consecutive years.\nPrint the years and the imputed GDP per capita for the years having a missing value of GDP per capita in (3).\n\n\nD = {'1960':3007,'1961':3067,'1962':3244,'1963':3375,'1964':3574,'1965':3828,'1966':4146,'1967':4336,'1968':4696,'1970':5234,'1971':5609,'1972':6094,'1973':6726,'1974':7226,'1975':7801,'1976':8592,'1978':10565,'1979':11674, '1980':12575,'1981':13976,'1982':14434,'1983':15544,'1984':17121,'1985':18237,  '1986':19071,'1987':20039,'1988':21417,'1989':22857,'1990':23889,'1991':24342,  '1992':25419,'1993':26387,'1994':27695,'1995':28691,'1996':29968,'1997':31459,  '1998':32854,'2000':36330,'2001':37134,'2002':37998,'2003':39490,'2004':41725,  '2005':44123,'2006':46302,'2007':48050,'2008':48570,'2009':47195,'2010':48651,  '2011':50066,'2012':51784,'2013':53291,'2015':56763,'2016':57867,'2017':59915,'2018':62805, '2019':65095,'2020':63028,'2021':69288}\n\nSolution:\n\nprint(\"GDP per capita in 2015 =\", D['2015'])\nD['2014'] = (D['2013']+D['2015'])/2\n\n#Iterating over all years from 1960 to 2021\nfor i in range(1960,2021):\n    \n    #Imputing the GDP of the year if it is missing\n    if str(i) not in D.keys():    \n        D[str(i)] = (D[str(i-1)]+D[str(i+1)])/2\n        print(\"Imputed GDP per capita for the year\",i,\"is $\",D[str(i)])\n\nGDP per capita in 2015 = 56763\nImputed GDP per capita for the year 1969 is $ 4965.0\nImputed GDP per capita for the year 1977 is $ 9578.5\nImputed GDP per capita for the year 1999 is $ 34592.0\n\n\n\n\n5.4.6 Practice exercise 7\nThe code cell below defines an object having the nutrition information of drinks in starbucks. Assume that the manner in which the information is structured is consistent throughout the object.\n\nstarbucks_drinks_nutrition={'Cool Lime Starbucks Refreshers™ Beverage': [{'Nutrition_type': 'Calories', 'value': 45}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 11}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Strawberry Acai Starbucks Refreshers™ Beverage': [{'Nutrition_type': 'Calories', 'value': 80}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 18}, {'Nutrition_type': 'Fiber', 'value': 1}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Very Berry Hibiscus Starbucks Refreshers™ Beverage': [{'Nutrition_type': 'Calories', 'value': 60}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 14}, {'Nutrition_type': 'Fiber', 'value': 1}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Evolution Fresh™ Organic Ginger Limeade': [{'Nutrition_type': 'Calories', 'value': 110}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 28}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 5}], 'Iced Coffee': [{'Nutrition_type': 'Calories', 'value': 5}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 0}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 5}], 'Iced Espresso Classics - Vanilla Latte': [{'Nutrition_type': 'Calories', 'value': 130}, {'Nutrition_type': 'Fat', 'value': 2.5}, {'Nutrition_type': 'Carb', 'value': 21}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 5}, {'Nutrition_type': 'Sodium', 'value': 65}], 'Iced Espresso Classics - Caffe Mocha': [{'Nutrition_type': 'Calories', 'value': 140}, {'Nutrition_type': 'Fat', 'value': 2.5}, {'Nutrition_type': 'Carb', 'value': 23}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 5}, {'Nutrition_type': 'Sodium', 'value': 90}], 'Iced Espresso Classics - Caramel Macchiato': [{'Nutrition_type': 'Calories', 'value': 130}, {'Nutrition_type': 'Fat', 'value': 2.5}, {'Nutrition_type': 'Carb', 'value': 21}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 5}, {'Nutrition_type': 'Sodium', 'value': 65}], 'Shaken Sweet Tea': [{'Nutrition_type': 'Calories', 'value': 80}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 19}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Tazo® Bottled Berry Blossom White': [{'Nutrition_type': 'Calories', 'value': 60}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 15}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Tazo® Bottled Black Mango': [{'Nutrition_type': 'Calories', 'value': 150}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 38}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 15}], 'Tazo® Bottled Black with Lemon': [{'Nutrition_type': 'Calories', 'value': 140}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 35}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Tazo® Bottled Brambleberry': [{'Nutrition_type': 'Calories', 'value': 140}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 35}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 15}], 'Tazo® Bottled Giant Peach': [{'Nutrition_type': 'Calories', 'value': 150}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 37}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 15}], 'Tazo® Bottled Iced Passion': [{'Nutrition_type': 'Calories', 'value': 70}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 17}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Tazo® Bottled Lemon Ginger': [{'Nutrition_type': 'Calories', 'value': 120}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 31}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Tazo® Bottled Organic Black Lemonade': [{'Nutrition_type': 'Calories', 'value': 140}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 35}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Tazo® Bottled Organic Iced Black Tea': [{'Nutrition_type': 'Calories', 'value': 60}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 15}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Tazo® Bottled Organic Iced Green Tea': [{'Nutrition_type': 'Calories', 'value': 120}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 31}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Tazo® Bottled Plum Pomegranate': [{'Nutrition_type': 'Calories', 'value': 140}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 35}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Tazo® Bottled Tazoberry': [{'Nutrition_type': 'Calories', 'value': 150}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 38}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 15}], 'Tazo® Bottled White Cranberry': [{'Nutrition_type': 'Calories', 'value': 140}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 35}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Teavana® Shaken Iced Black Tea': [{'Nutrition_type': 'Calories', 'value': 30}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 8}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 5}], 'Teavana® Shaken Iced Black Tea Lemonade': [{'Nutrition_type': 'Calories', 'value': 70}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 17}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 0}], 'Teavana® Shaken Iced Green Tea': [{'Nutrition_type': 'Calories', 'value': 30}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 8}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 5}], 'Teavana® Shaken Iced Green Tea Lemonade': [{'Nutrition_type': 'Calories', 'value': 70}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 17}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 5}], 'Teavana® Shaken Iced Passion Tango™ Tea': [{'Nutrition_type': 'Calories', 'value': 30}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 8}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 5}], 'Teavana® Shaken Iced Passion Tango™ Tea Lemonade': [{'Nutrition_type': 'Calories', 'value': 90}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 24}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 0}], 'Teavana® Shaken Iced Peach Green Tea': [{'Nutrition_type': 'Calories', 'value': 60}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 15}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 0}], 'Starbucks Refreshers™ Raspberry Pomegranate': [{'Nutrition_type': 'Calories', 'value': 90}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 27}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 0}], 'Starbucks Refreshers™ Strawberry Lemonade': [{'Nutrition_type': 'Calories', 'value': 90}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 27}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 0}], 'Starbucks® Doubleshot Protein Dark Chocolate': [{'Nutrition_type': 'Calories', 'value': 210}, {'Nutrition_type': 'Fat', 'value': 2.5}, {'Nutrition_type': 'Carb', 'value': 33}, {'Nutrition_type': 'Fiber', 'value': 2}, {'Nutrition_type': 'Protein', 'value': 20}, {'Nutrition_type': 'Sodium', 'value': 115}], 'Starbucks® Doubleshot Protein Vanilla': [{'Nutrition_type': 'Calories', 'value': 200}, {'Nutrition_type': 'Fat', 'value': 2.5}, {'Nutrition_type': 'Carb', 'value': 34}, {'Nutrition_type': 'Fiber', 'value': 2}, {'Nutrition_type': 'Protein', 'value': 20}, {'Nutrition_type': 'Sodium', 'value': 120}], 'Starbucks® Iced Coffee Caramel': [{'Nutrition_type': 'Calories', 'value': 60}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 13}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 1}, {'Nutrition_type': 'Sodium', 'value': 0}], 'Starbucks® Iced Coffee Light Sweetened': [{'Nutrition_type': 'Calories', 'value': 50}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 11}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 1}, {'Nutrition_type': 'Sodium', 'value': 0}], 'Starbucks® Iced Coffee Unsweetened': [{'Nutrition_type': 'Calories', 'value': 10}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 2}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 1}, {'Nutrition_type': 'Sodium', 'value': 0}], 'Blonde Roast': [{'Nutrition_type': 'Calories', 'value': 5}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 0}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 1}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Clover® Brewed Coffee': [{'Nutrition_type': 'Calories', 'value': 10}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 0}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 1}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Decaf Pike Place® Roast': [{'Nutrition_type': 'Calories', 'value': 5}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 0}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 1}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Featured Dark Roast': [{'Nutrition_type': 'Calories', 'value': 5}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 0}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 1}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Nariño 70 Cold Brew': [{'Nutrition_type': 'Calories', 'value': 5}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 0}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 15}], 'Nariño 70 Cold Brew with Milk': [{'Nutrition_type': 'Calories', 'value': 0}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 0}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 0}], 'Nitro Cold Brew': [{'Nutrition_type': 'Calories', 'value': 5}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 0}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Nitro Cold Brew with Sweet Cream': [{'Nutrition_type': 'Calories', 'value': 70}, {'Nutrition_type': 'Fat', 'value': 5.0}, {'Nutrition_type': 'Carb', 'value': 5}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 1}, {'Nutrition_type': 'Sodium', 'value': 20}], 'Pike Place® Roast': [{'Nutrition_type': 'Calories', 'value': 5}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 0}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 1}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Vanilla Sweet Cream Cold Brew': [{'Nutrition_type': 'Calories', 'value': 110}, {'Nutrition_type': 'Fat', 'value': 6.0}, {'Nutrition_type': 'Carb', 'value': 14}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 1}, {'Nutrition_type': 'Sodium', 'value': 25}], 'Hot Chocolate': [{'Nutrition_type': 'Calories', 'value': 320}, {'Nutrition_type': 'Fat', 'value': 9.0}, {'Nutrition_type': 'Carb', 'value': 47}, {'Nutrition_type': 'Fiber', 'value': 4}, {'Nutrition_type': 'Protein', 'value': 14}, {'Nutrition_type': 'Sodium', 'value': 160}], 'Starbucks® Signature Hot Chocolate': [{'Nutrition_type': 'Calories', 'value': 430}, {'Nutrition_type': 'Fat', 'value': 26.0}, {'Nutrition_type': 'Carb', 'value': 45}, {'Nutrition_type': 'Fiber', 'value': 5}, {'Nutrition_type': 'Protein', 'value': 12}, {'Nutrition_type': 'Sodium', 'value': 115}], 'Caffè Latte': [{'Nutrition_type': 'Calories', 'value': 190}, {'Nutrition_type': 'Fat', 'value': 7.0}, {'Nutrition_type': 'Carb', 'value': 19}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 13}, {'Nutrition_type': 'Sodium', 'value': 170}], 'Caffè Mocha': [{'Nutrition_type': 'Calories', 'value': 290}, {'Nutrition_type': 'Fat', 'value': 8.0}, {'Nutrition_type': 'Carb', 'value': 42}, {'Nutrition_type': 'Fiber', 'value': 4}, {'Nutrition_type': 'Protein', 'value': 13}, {'Nutrition_type': 'Sodium', 'value': 140}], 'Cappuccino': [{'Nutrition_type': 'Calories', 'value': 120}, {'Nutrition_type': 'Fat', 'value': 4.0}, {'Nutrition_type': 'Carb', 'value': 12}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 8}, {'Nutrition_type': 'Sodium', 'value': 100}], 'Caramel Macchiato': [{'Nutrition_type': 'Calories', 'value': 250}, {'Nutrition_type': 'Fat', 'value': 7.0}, {'Nutrition_type': 'Carb', 'value': 35}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 10}, {'Nutrition_type': 'Sodium', 'value': 150}], 'Cinnamon Dolce Latte': [{'Nutrition_type': 'Calories', 'value': 260}, {'Nutrition_type': 'Fat', 'value': 6.0}, {'Nutrition_type': 'Carb', 'value': 40}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 11}, {'Nutrition_type': 'Sodium', 'value': 150}], 'Coconutmilk Mocha Macchiato': [{'Nutrition_type': 'Calories', 'value': 250}, {'Nutrition_type': 'Fat', 'value': 9.0}, {'Nutrition_type': 'Carb', 'value': 32}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 12}, {'Nutrition_type': 'Sodium', 'value': 180}], 'Flat White': [{'Nutrition_type': 'Calories', 'value': 180}, {'Nutrition_type': 'Fat', 'value': 7.0}, {'Nutrition_type': 'Carb', 'value': 18}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 12}, {'Nutrition_type': 'Sodium', 'value': 160}], 'Iced Caffè Latte': [{'Nutrition_type': 'Calories', 'value': 130}, {'Nutrition_type': 'Fat', 'value': 4.5}, {'Nutrition_type': 'Carb', 'value': 13}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 8}, {'Nutrition_type': 'Sodium', 'value': 115}], 'Iced Caffè Mocha': [{'Nutrition_type': 'Calories', 'value': 230}, {'Nutrition_type': 'Fat', 'value': 6.0}, {'Nutrition_type': 'Carb', 'value': 36}, {'Nutrition_type': 'Fiber', 'value': 4}, {'Nutrition_type': 'Protein', 'value': 9}, {'Nutrition_type': 'Sodium', 'value': 90}], 'Iced Caramel Macchiato': [{'Nutrition_type': 'Calories', 'value': 250}, {'Nutrition_type': 'Fat', 'value': 7.0}, {'Nutrition_type': 'Carb', 'value': 37}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 10}, {'Nutrition_type': 'Sodium', 'value': 150}], 'Iced Cinnamon Dolce Latte': [{'Nutrition_type': 'Calories', 'value': 200}, {'Nutrition_type': 'Fat', 'value': 4.0}, {'Nutrition_type': 'Carb', 'value': 34}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 7}, {'Nutrition_type': 'Sodium', 'value': 95}], 'Iced Coconutmilk Mocha Macchiato': [{'Nutrition_type': 'Calories', 'value': 260}, {'Nutrition_type': 'Fat', 'value': 9.0}, {'Nutrition_type': 'Carb', 'value': 34}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 11}, {'Nutrition_type': 'Sodium', 'value': 180}], 'Iced Vanilla Latte': [{'Nutrition_type': 'Calories', 'value': 190}, {'Nutrition_type': 'Fat', 'value': 4.0}, {'Nutrition_type': 'Carb', 'value': 30}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 7}, {'Nutrition_type': 'Sodium', 'value': 100}], 'Iced White Chocolate Mocha': [{'Nutrition_type': 'Calories', 'value': 300}, {'Nutrition_type': 'Fat', 'value': 8.0}, {'Nutrition_type': 'Carb', 'value': 47}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 10}, {'Nutrition_type': 'Sodium', 'value': 190}], 'Latte Macchiato': [{'Nutrition_type': 'Calories', 'value': 190}, {'Nutrition_type': 'Fat', 'value': 7.0}, {'Nutrition_type': 'Carb', 'value': 19}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 12}, {'Nutrition_type': 'Sodium', 'value': 160}], 'Starbucks Doubleshot® on Ice Beverage': [{'Nutrition_type': 'Calories', 'value': 45}, {'Nutrition_type': 'Fat', 'value': 1.0}, {'Nutrition_type': 'Carb', 'value': 5}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 3}, {'Nutrition_type': 'Sodium', 'value': 40}], 'Vanilla Latte': [{'Nutrition_type': 'Calories', 'value': 250}, {'Nutrition_type': 'Fat', 'value': 6.0}, {'Nutrition_type': 'Carb', 'value': 37}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 12}, {'Nutrition_type': 'Sodium', 'value': 150}], 'White Chocolate Mocha': [{'Nutrition_type': 'Calories', 'value': 360}, {'Nutrition_type': 'Fat', 'value': 11.0}, {'Nutrition_type': 'Carb', 'value': 53}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 14}, {'Nutrition_type': 'Sodium', 'value': 240}], 'Cinnamon Dolce Frappuccino® Blended Coffee': [{'Nutrition_type': 'Calories', 'value': 350}, {'Nutrition_type': 'Fat', 'value': 4.5}, {'Nutrition_type': 'Carb', 'value': 64}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 15}, {'Nutrition_type': 'Sodium', 'value': 0}], 'Coffee Light Frappuccino® Blended Coffee': [{'Nutrition_type': 'Calories', 'value': 110}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 24}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 3}, {'Nutrition_type': 'Sodium', 'value': 200}], 'Mocha Frappuccino® Blended Coffee': [{'Nutrition_type': 'Calories', 'value': 280}, {'Nutrition_type': 'Fat', 'value': 2.5}, {'Nutrition_type': 'Carb', 'value': 60}, {'Nutrition_type': 'Fiber', 'value': 2}, {'Nutrition_type': 'Protein', 'value': 4}, {'Nutrition_type': 'Sodium', 'value': 220}], 'Mocha Light Frappuccino® Blended Coffee': [{'Nutrition_type': 'Calories', 'value': 140}, {'Nutrition_type': 'Fat', 'value': 0.5}, {'Nutrition_type': 'Carb', 'value': 28}, {'Nutrition_type': 'Fiber', 'value': 1}, {'Nutrition_type': 'Protein', 'value': 4}, {'Nutrition_type': 'Sodium', 'value': 180}], 'Cinnamon Dolce Crème': [{'Nutrition_type': 'Calories', 'value': 200}, {'Nutrition_type': 'Fat', 'value': 6.0}, {'Nutrition_type': 'Carb', 'value': 28}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 10}, {'Nutrition_type': 'Sodium', 'value': 135}], 'Vanilla Crème': [{'Nutrition_type': 'Calories', 'value': 200}, {'Nutrition_type': 'Fat', 'value': 6.0}, {'Nutrition_type': 'Carb', 'value': 28}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 10}, {'Nutrition_type': 'Sodium', 'value': 135}], 'Chocolate Smoothie': [{'Nutrition_type': 'Calories', 'value': 320}, {'Nutrition_type': 'Fat', 'value': 5.0}, {'Nutrition_type': 'Carb', 'value': 53}, {'Nutrition_type': 'Fiber', 'value': 8}, {'Nutrition_type': 'Protein', 'value': 20}, {'Nutrition_type': 'Sodium', 'value': 170}], 'Strawberry Smoothie': [{'Nutrition_type': 'Calories', 'value': 300}, {'Nutrition_type': 'Fat', 'value': 2.0}, {'Nutrition_type': 'Carb', 'value': 60}, {'Nutrition_type': 'Fiber', 'value': 7}, {'Nutrition_type': 'Protein', 'value': 16}, {'Nutrition_type': 'Sodium', 'value': 130}]}\n\nUse the object above to answer the following questions:\n\n\n5.4.7 \nWhat is the datatype of the object?\n\n5.4.7.1 \nIf the object in (1) is a dictionary, what is the datatype of the values of the dictionary?\n\n\n5.4.7.2 \nIf the object in (1) is a dictionary, what is the datatype of the elements within the values of the dictionary?\n\n\n5.4.7.3 \nHow many calories are there in Iced Coffee?\n\n\n5.4.7.4 \nWhich drink(s) have the highest amount of protein in them, and what is that protein amount?\n\n\n5.4.7.5 \nWhich drink(s) have a fat content of more than 10g, and what is their fat content?",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data structures</span>"
    ]
  },
  {
    "objectID": "data_structures.html#choosing-the-right-data-structure",
    "href": "data_structures.html#choosing-the-right-data-structure",
    "title": "5  Data structures",
    "section": "5.5 Choosing the Right Data Structure",
    "text": "5.5 Choosing the Right Data Structure\n\nList\n\nOrdered and Mutable\n\nBest for collections of related items you need to modify, iterate, or reorder frequently.\n\nTuple\n\nOrdered and Immutable\n\nIdeal for data that shouldn’t change or for use as dictionary keys (since they are hashable).\n\nDictionary\n\nUnordered (maintains insertion order in Python 3.7+) and Mutable\n\nPerfect for key-value lookups, fast data retrieval based on unique keys, and clearly organizing named data.\n\nSet\n\nUnordered and Mutable\n\nAutomatically enforces unique elements. Great for membership testing (e.g., in checks) and set operations like union, intersection, etc.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data structures</span>"
    ]
  },
  {
    "objectID": "data_structures.html#immutable-and-mutable-data-types-in-python",
    "href": "data_structures.html#immutable-and-mutable-data-types-in-python",
    "title": "5  Data structures",
    "section": "5.6 Immutable and mutable Data Types in Python",
    "text": "5.6 Immutable and mutable Data Types in Python\nIn Python, immutable data types are those whose values cannot be changed after they are created. If you try to modify an immutable object, Python will create a new object instead of changing the original one.\nHere is a list of immutable data types in python\n\nIntegers (int)\nFloats (float)\nBooleans (bool)\nStrings (str)\nTuples (tuple)\n\nKey Characteristics of Immutable Data Types\n\nCannot be modified in place: Any operation that appears to modify an immutable object actually creates a new object.\nHashable: Immutable objects can be used as keys in dictionaries or elements in sets because their values do not change.\nMemory Efficiency: Python may reuse memory for immutable objects (e.g., small integers or short strings) to optimize performance.\n\n\n# when you try to modify the interger, it creates a new integer object\nmy_integer = 32\n\n# Memory address of my_integer\nprint(\"Memory address of my_integers:\", id(my_integer))\n\nmy_integer = 12\n# Memory address of my_integer\nprint(\"Memory address of my_integers:\", id(my_integer))\n\nMemory address of my_integers: 140725600664984\nMemory address of my_integers: 140725600664344\n\n\n\ns = \"hello\"\n\ns[0] = 'H'\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[8], line 3\n      1 s = \"hello\"\n----&gt; 3 s[0] = 'H'\n\nTypeError: 'str' object does not support item assignment\n\n\n\n\n# Immutable example: Strings\ns = \"hello\"\n\nprint(\"Original string:\", s)\nprint(\"Memory address of original s:\", id(s))  \n\ns = s.upper()  \nprint(\"New string:\", s.upper())\nprint(\"Memory address of s.upper:\", id(s.upper))\n\nOriginal string: hello\nMemory address of original s: 1341161965296\nNew string: HELLO\nMemory address of s.upper: 1341172556928\n\n\nFor comparison, here are some mutable data types in Python:\n\nLists (list)\nDictionaries (dict)\nSets (set)\n\n\n# Mutable example: Lists\nlst = [1, 2, 3]\nprint(\"list before modification:\", lst)\nprint(\"Memory address of lst:\", id(lst))\n\n# Modifying the list\nlst.append(4) \nprint(\"list after modification:\", lst)\nprint(\"Memory address of lst:\", id(lst)) \n\nlist before modification: [1, 2, 3]\nMemory address of lst: 1341172415488\nlist after modification: [1, 2, 3, 4]\nMemory address of lst: 1341172415488",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data structures</span>"
    ]
  },
  {
    "objectID": "data_structures.html#final-thoughts",
    "href": "data_structures.html#final-thoughts",
    "title": "5  Data structures",
    "section": "5.7 Final Thoughts",
    "text": "5.7 Final Thoughts\n\nLists are your go-to when you need an adjustable sequence of ordered items.\n\nTuples provide a way to store data in an immutable sequence, ensuring it remains unchanged.\n\nDictionaries let you organize data into key-value pairs for quick lookups and clearer data structures.\n\nSets focus on uniqueness and membership operations, which can greatly optimize tasks like deduplication and intersection.\n\nChoose the right data structure based on your needs to write concise, efficient, and easy-to-maintain code.\n\n5.7.1 Bonus Practice exercise\nThe object deck defined below corresponds to a deck of cards. Estimate the probablity that a five card hand will be a flush, as follows:\n\nWrite a function that accepts a hand of 5 cards as argument, and returns whether the hand is a flush or not.\nRandomly pull a hand of 5 cards from the deck. Call the function developed in (1) to determine if the hand is a flush.\nRepeat (2) 10,000 times.\nEstimate the probability of the hand being a flush from the results of the 10,000 simulations.\n\nYou may use the function shuffle() from the random library to shuffle the deck everytime before pulling a hand of 5 cards.\n\ndeck = [{'value':i, 'suit':c}\nfor c in ['spades', 'clubs', 'hearts', 'diamonds']\nfor i in range(2,15)]\n\nSolution:\n\nimport random as rm\n\n#Function to check if a 5-card hand is a flush\ndef chck_flush(hands):  \n    \n    #Assuming that the hand is a flush, before checking the cards\n    yes_flush =1\n    \n    #Storing the suit of the first card in 'first_suit'\n    first_suit = hands[0]['suit']\n    \n    #Iterating over the remaining 4 cards of the hand\n    for j in range(1,len(hands)):\n        \n        #If the suit of any of the cards does not match the suit of the first card, the hand is not a flush\n        if first_suit!=hands[j]['suit']:\n            yes_flush = 0; \n            \n            #As soon as a card with a different suit is found, the hand is not a flush and there is no need to check other cards. So, we 'break' out of the loop\n            break;\n    return yes_flush\n\nflush=0\nfor i in range(10000):\n    \n    #Shuffling the deck\n    rm.shuffle(deck)\n    \n    #Picking out the first 5 cards of the deck as a hand and checking if they are a flush\n    #If the hand is a flush it is counted\n    flush=flush+chck_flush(deck[0:5])\n    \nprint(\"Probability of obtaining a flush=\", 100*(flush/10000),\"%\")\n\nProbability of obtaining a flush= 0.26 %",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data structures</span>"
    ]
  },
  {
    "objectID": "data_structures.html#resources",
    "href": "data_structures.html#resources",
    "title": "5  Data structures",
    "section": "5.8 Resources",
    "text": "5.8 Resources\n\nDictionary Comprehension\nList Comprehensions, Dictionary Comprehensions",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data structures</span>"
    ]
  },
  {
    "objectID": "python_iterable.html",
    "href": "python_iterable.html",
    "title": "6  Python Iterables",
    "section": "",
    "text": "6.1 What are Python Iterables\nIn Python, an iterable is an object capable of returning its members one at a time. Common examples of iterables include strings, lists, tuples, sets, dictionaries, and Ranges. Iterables are fundamental in Python for loops, comprehensions, and many built-in functions.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Python Iterables</span>"
    ]
  },
  {
    "objectID": "python_iterable.html#what-are-python-iterables",
    "href": "python_iterable.html#what-are-python-iterables",
    "title": "6  Python Iterables",
    "section": "",
    "text": "6.1.1 What Makes an Object Iterable?\nAn object is considered iterable if it implements the __iter__() method, which returns an iterator object, or the __getitem__() method, which allows it to be accessed sequentially.\n\nmy_list = [1, 2, 3, 4, 5]\nhelp(my_list.__iter__)\n\nHelp on method-wrapper:\n\n__iter__() unbound builtins.list method\n    Implement iter(self).\n\n\n\n\nhelp(my_list.__getitem__)\n\nHelp on built-in function __getitem__:\n\n__getitem__(index, /) method of builtins.list instance\n    Return self[index].\n\n\n\n\n\n6.1.2 Checking if an Object is Iterable\nYou can check if an object is iterable using the collections.abc.Iterable class:\n\nfrom collections.abc import Iterable\n\nprint(isinstance([1, 2, 3], Iterable))  \nprint(isinstance(123, Iterable))    \nprint(isinstance(range(5), Iterable))\nprint(isinstance(\"hello\", Iterable))   \n\nTrue\nFalse\nTrue\nTrue",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Python Iterables</span>"
    ]
  },
  {
    "objectID": "python_iterable.html#common-iterables-in-python",
    "href": "python_iterable.html#common-iterables-in-python",
    "title": "6  Python Iterables",
    "section": "6.2 Common Iterables in Python",
    "text": "6.2 Common Iterables in Python\nHere are some built-in iterables in Python:\n\n6.2.1 Strings\n\nfor char in \"Python\":\n    print(char, end=\" \")\n\nP y t h o n \n\n\n\n\n6.2.2 Lists\n\nfor num in [1, 2, 3]:\n    print(num, end=\" \")\n\n1 2 3 \n\n\n\n\n6.2.3 Tuples\n\nfor item in (4, 5, 6):\n    print(item, end=\" \")\n\n4 5 6 \n\n\n\n\n6.2.4 Sets\n\nfor elem in {1, 2, 3}:\n    print(elem, end=\" \")\n\n1 2 3 \n\n\n\n\n6.2.5 Dictionaries\n\nmy_dict = {\"a\": 1, \"b\": 2}\nfor key in my_dict:\n    print(key, end=\" \")\n\na b \n\n\n\n\n6.2.6 Ranges\n\nfor i in range(5):  # Generates numbers from 0 to 4\n    print(i, end=\" \")\n\n0 1 2 3 4",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Python Iterables</span>"
    ]
  },
  {
    "objectID": "python_iterable.html#iterating-over-iterables",
    "href": "python_iterable.html#iterating-over-iterables",
    "title": "6  Python Iterables",
    "section": "6.3 Iterating over Iterables",
    "text": "6.3 Iterating over Iterables\nYou can iterate over an iterable using: * A for loop. * the iter() and next() functions\nWe’ve often used for loops to traverse iterables in Python. Now, let’s dive into how you can manually iterate over an iterable using the built-in iter() and next() functions. This approach offers finer control over the iteration process and can be especially useful in more advanced scenarios.\n\n# Example: Manually Iterating Over an Iterable Using iter() and next()\n\n# Define an iterable, such as a list of numbers\nnumbers = [10, 20, 30, 40, 50]\n\n# Obtain an iterator from the iterable\niterator = iter(numbers)\n\n# Use a while loop to manually iterate over the elements\nwhile True:\n    try:\n        # Retrieve the next element in the iterator\n        number = next(iterator)\n        print(number)\n    except StopIteration:\n        # When there are no more elements, a StopIteration exception is raised.\n        print(\"Iteration complete!\")\n        break\n\n10\n20\n30\n40\n50\nIteration complete!",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Python Iterables</span>"
    ]
  },
  {
    "objectID": "python_iterable.html#iterables-unpacking",
    "href": "python_iterable.html#iterables-unpacking",
    "title": "6  Python Iterables",
    "section": "6.4 Iterables Unpacking",
    "text": "6.4 Iterables Unpacking\nPython supports unpacking for iterables, allowing you to assign elements of an iterable to variables in a concise and readable way. Unpacking is a powerful feature that works with python iterable objects.\n\n6.4.1 Basic Unpacking\nYou can unpack the elements of an iterable into separate variables:\n\n# Unpacking a list\nnumbers = [1, 2, 3]\na, b, c = numbers\nprint(a, b, c)  # Output: 1 2 3\n\n1 2 3\n\n\nNote: The number of variables must match the number of elements in the iterable, or Python will raise a ValueError.\n\n\n6.4.2 Extended (*) Unpacking\nUsing the * operator, you can unpack multiple elements into a single variable, capturing the remaining elements as a list:\n\nnumbers = [1, 2, 3, 4, 5]\n\na, *b, c = numbers\nprint(a)  \nprint(b)  \nprint(c)  \n\n1\n[2, 3, 4]\n5\n\n\nHere, b (with *) captures all the middle elements as a list.\n\n\n6.4.3 Unpacking with Functions\nYou can use unpacking to pass iterable elements as arguments to functions:\n\n# unpacking a list or tuple\ndef add(a, b, c):\n    return a + b + c\n\nnumbers = [1, 2, 3]\nresult = add(*numbers)\nprint(result)  \n\n6\n\n\n\n# unpacking a dictionary\ndef add(a=0, b=0, c=0):\n    return a + b + c\n\nnumbers = {\"a\": 1, \"b\": 2, \"c\": 3}\nresult = add(**numbers)\nprint(result) \n\n6\n\n\nIf we are interested in retrieving only some values of the tuple, the expression *_ can be used to discard the other values. Let’s say we are interested in retrieving only the first and the last two values of the tuple:\n\nx,*_,y,z  = (4.5, \"this is a string\", ((\"Nested tuple\",5)),\"99\",99)\n\n\nx, y , z\n\n(4.5, '99', 99)",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Python Iterables</span>"
    ]
  },
  {
    "objectID": "python_iterable.html#built-in-functions-for-iterables",
    "href": "python_iterable.html#built-in-functions-for-iterables",
    "title": "6  Python Iterables",
    "section": "6.5 Built-in Functions for Iterables",
    "text": "6.5 Built-in Functions for Iterables\nPython provides a variety of built-in functions to operate on iterables, making it easy to manipulate, process, and analyze collections like lists, tuples, strings, sets, and dictionaries. Below is a list of commonly used built-in functions specifically designed for iterables.\n\n6.5.1 General Functions\n\n\n\n\n\n\n\n\nFunction\nDescription\nExample\n\n\n\n\nlen()\nReturns the number of elements in an iterable.\nlen([1, 2, 3]) → 3\n\n\nmin()\nReturns the smallest element in an iterable.\nmin([3, 1, 4]) → 1\n\n\nmax()\nReturns the largest element in an iterable.\nmax([3, 1, 4]) → 4\n\n\nsum()\nReturns the sum of elements in an iterable (numeric types only).\nsum([1, 2, 3]) → 6\n\n\nsorted()\nReturns a sorted list from an iterable (does not modify the original).\nsorted([3, 1, 2]) → [1, 2, 3]\n\n\nreversed()\nReturns an iterator that accesses the elements of an iterable in reverse.\nlist(reversed([1, 2, 3])) → [3, 2, 1]\n\n\nenumerate()\nReturns an iterator of tuples containing indices and elements of the iterable.\nlist(enumerate(['a', 'b', 'c'])) → [(0, 'a'), (1, 'b'), (2, 'c')]\n\n\nall()\nReturns True if all elements of the iterable are true (or if empty).\nall([True, 1, 'a']) → True\n\n\nany()\nReturns True if any element of the iterable is true.\nany([False, 0, 'b']) → True\n\n\nstr.join(iterable)\nJoins elements of an iterable (e.g., list, tuple) into a single string, using the given string as a separator.\n''.join(['a', 'b', 'c']) → 'abc'\n\n\n\n\nsorted([\"apple\", \"orange\", \"banana\"])\n\n['apple', 'banana', 'orange']\n\n\n\nmax([\"apple\", \"orange\", \"banana\"])\n\n'orange'\n\n\n\n\n6.5.2 sorted()\nThe sorted() function in Python is used to return a new sorted list from an iterable. It is a versatile and powerful tool for sorting data in ascending or descending order, with the ability to customize sorting behavior using a key function.\n\nnumbers = [3, 1, 4, 1, 5]\nsorted_numbers = sorted(numbers)\nprint(sorted_numbers)  # Output: [1, 1, 3, 4, 5]\n\n[1, 1, 3, 4, 5]\n\n\n\nnumbers = [3, 1, 4, 1, 5]\nsorted_numbers = sorted(numbers, reverse=True)\nprint(sorted_numbers)  # Output: [5, 4, 3, 1, 1]\n\n[5, 4, 3, 1, 1]\n\n\n\nword = \"python\"\nsorted_chars = sorted(word)\nprint(sorted_chars)  # Output: ['h', 'n', 'o', 'p', 't', 'y']\n\n['h', 'n', 'o', 'p', 't', 'y']\n\n\nThe key parameter allows customization of sorting logic by applying a function to each element before comparison.\n\nwords = [\"banana\", \"apple\", \"cherry\"]\nsorted_words = sorted(words, key=len)\nprint(sorted_words)  # Output: ['apple', 'banana', 'cherry']\n\n['apple', 'banana', 'cherry']\n\n\n\nnumbers = [-5, 3, -1, 7]\nsorted_numbers = sorted(numbers, key=abs)\nprint(sorted_numbers)  # Output: [-1, 3, -5, 7]\n\n[-1, 3, -5, 7]\n\n\n\nsorted([\"apple\", \"orange\", 32])\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[20], line 1\n----&gt; 1 sorted([\"apple\", \"orange\", 32])\n\nTypeError: '&lt;' not supported between instances of 'int' and 'str'\n\n\n\nWhen you use functions like max(), min(), sum(), or sorted on an iterable, Python will try to perform comparisons or arithmetic operations between the elements. These functions work seamlessly when all elements are of types that can be compared or added together. However, if the iterable contains mixed types that are not inherently comparable (like strings and numbers), you’ll run into errors.\nBy ensuring the elements in your iterable are of compatible types, you can effectively use these functions without encountering runtime errors.\n\n6.5.2.1 Difference Between sorted() and list.sort()\n\n\n\n\n\n\n\n\nFeature\nsorted()\nlist.sort()\n\n\n\n\nReturn Value\nReturns a new sorted list\nModifies the list in place and returns None.\n\n\nInput Type\nWorks with any iterable (e.g., lists, tuples, strings).\nWorks only with lists.\n\n\nUsage\nsorted(iterable)\nlist.sort()\n\n\n\nExample:\n\n\nmy_list = [3, 1, 2]\n\n# Using sorted()\nnew_list = sorted(my_list)\nprint(\"Original List:\", my_list)  # [3, 1, 2]\nprint(\"New Sorted List:\", new_list)  # [1, 2, 3]\n\n# Using list.sort()\nmy_list.sort()\nprint(\"List after list.sort():\", my_list)  # [1, 2, 3]\n\nOriginal List: [3, 1, 2]\nNew Sorted List: [1, 2, 3]\nList after list.sort(): [1, 2, 3]\n\n\n\n\n\n6.5.3 enumerate()\nThe enumerate() function adds a counter to an iterable and returns it as an enumerate object, which can be iterated over to get both the index and the value of each element in the iterable.\n\n6.5.3.1 Syntax\nenumerate(iterable, start=0)\n\nfruits = [\"apple\", \"banana\", \"cherry\"]\n\nfor index, fruit in enumerate(fruits):\n    print(f\"Index: {index}, Fruit: {fruit}\")\n\nIndex: 0, Fruit: apple\nIndex: 1, Fruit: banana\nIndex: 2, Fruit: cherry\n\n\n\n# change the start index\nfruits = [\"apple\", \"banana\", \"cherry\"]\n\nfor index, fruit in enumerate(fruits, start=1):\n    print(f\"Index: {index}, Fruit: {fruit}\")\n\nIndex: 1, Fruit: apple\nIndex: 2, Fruit: banana\nIndex: 3, Fruit: cherry\n\n\n\n# using enumerate() with a list comprehension\nfruits = [\"apple\", \"banana\", \"cherry\"]\nindexed_fruits = [(index, fruit) for index, fruit in enumerate(fruits, start=1)]\nprint(indexed_fruits)\n\n[(1, 'apple'), (2, 'banana'), (3, 'cherry')]\n\n\n\n# Working with Strings\nword = \"python\"\n\nfor index, char in enumerate(word):\n    print(f\"Index: {index}, Character: {char}\")\n\nIndex: 0, Character: p\nIndex: 1, Character: y\nIndex: 2, Character: t\nIndex: 3, Character: h\nIndex: 4, Character: o\nIndex: 5, Character: n\n\n\n\n\n\n6.5.4 zip()\nThe zip() function is a built-in Python function that combines two or more iterables (e.g., lists, tuples, strings) into a single iterator of tuples. It is commonly used to pair elements from multiple iterables based on their positions.\n\nhelp(zip)\n\nHelp on class zip in module builtins:\n\nclass zip(object)\n |  zip(*iterables, strict=False) --&gt; Yield tuples until an input is exhausted.\n |\n |     &gt;&gt;&gt; list(zip('abcdefg', range(3), range(4)))\n |     [('a', 0, 0), ('b', 1, 1), ('c', 2, 2)]\n |\n |  The zip object yields n-length tuples, where n is the number of iterables\n |  passed as positional arguments to zip().  The i-th element in every tuple\n |  comes from the i-th iterable argument to zip().  This continues until the\n |  shortest argument is exhausted.\n |\n |  If strict is true and one of the arguments is exhausted before the others,\n |  raise a ValueError.\n |\n |  Methods defined here:\n |\n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |\n |  __iter__(self, /)\n |      Implement iter(self).\n |\n |  __next__(self, /)\n |      Implement next(self).\n |\n |  __reduce__(...)\n |      Return state information for pickling.\n |\n |  __setstate__(...)\n |      Set state information for unpickling.\n |\n |  ----------------------------------------------------------------------\n |  Static methods defined here:\n |\n |  __new__(*args, **kwargs)\n |      Create and return a new object.  See help(type) for accurate signature.\n\n\n\nKey Points\n\nAggregation of Iterables:\nzip() takes any number of iterables as arguments and returns an iterator of tuples, where each tuple contains the corresponding elements from all the iterables.\nLength of the Result:\nThe iterator stops when the shortest input iterable is exhausted. If the iterables have different lengths, elements from the longer iterables that do not have a corresponding element in the shorter ones are ignored.\nReturn Type:\nThe object returned by zip() is an iterator in Python 3. To convert it to a list or tuple, you can use the list() or tuple() functions.\n\nBasic Usage Example\n\n# combining two lists\nlist1 = [1, 2, 3]\nlist2 = ['a', 'b', 'c']\n\nzipped = zip(list1, list2)\nzipped \n\n&lt;zip at 0x20e27f3cec0&gt;\n\n\n\nprint(zipped)\nprint(type(zipped))\n\n# is zipped an iterator?\nprint(isinstance(zipped, Iterable))\n\n&lt;zip object at 0x0000020E27F3CEC0&gt;\n&lt;class 'zip'&gt;\nTrue\n\n\nThe zip() function returns an iterator, not a list. When you print an iterator directly, it doesn’t display the elements but rather the object’s memory address. To see the elements, you can iterate over it using a loop or convert the iterator into a list (or tuple or dict).\n\n# iterate over the zip object\nfor item in zipped:\n    print(item)\n\n(1, 'a')\n(2, 'b')\n(3, 'c')\n\n\n\n# convert the zip object to a list\nlist1 = [1, 2, 3]\nlist2 = ['a', 'b', 'c']\n\nzipped = zip(list1, list2)\nprint(list(zipped))  \n\n[(1, 'a'), (2, 'b'), (3, 'c')]\n\n\n\n# Creating dictionaries from two list\nkeys = ['name', 'age', 'city']\nvalues = ['Alice', 30, 'New York']\n\ndictionary = dict(zip(keys, values))\nprint(dictionary)  \n\n{'name': 'Alice', 'age': 30, 'city': 'New York'}\n\n\n\nnames = ['Alice', 'Bob', 'Charlie']\nscores = [85, 90, 95]\n\nfor name, score in zip(names, scores):\n    print(f\"{name} scored {score}\")\n\nAlice scored 85\nBob scored 90\nCharlie scored 95\n\n\n\n\n6.5.5 unzipping\nYou can “unzip” a zipped object using the zip(*zipped) syntax:\n\nzipped = [(1, 'a'), (2, 'b'), (3, 'c')]\nunzipped = zip(*zipped)\n\nlist1, list2 = list(unzipped)\nprint(list1)  \nprint(list2) \n\n(1, 2, 3)\n('a', 'b', 'c')",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Python Iterables</span>"
    ]
  },
  {
    "objectID": "python_iterable.html#practice-exercises",
    "href": "python_iterable.html#practice-exercises",
    "title": "6  Python Iterables",
    "section": "6.6 Practice exercises",
    "text": "6.6 Practice exercises\n\n6.6.1 Exercise 1: Iterating Using a For Loop and Manual Iteration\n\nUsing a For Loop:\n\nGiven the list:\nnumbers = [10, 20, 30, 40, 50]\nWrite a for loop to print each element.\n\nUsing iter() and next():\n\nObtain an iterator from the list using iter().\nUse a while loop and next() to print each element.\nHandle the StopIteration exception gracefully when there are no more elements.\n\n\nHint:\nRemember that calling next() on an exhausted iterator raises a StopIteration exception.\n\n\n6.6.2 Exercise 2: Combining Iterables with zip()\n\nZipping Two Lists:\n\nGiven the lists:\nlist1 = [1, 2, 3]\nlist2 = ['a', 'b', 'c']\nUse the zip() function to combine these lists.\nConvert the result into a list and print it.\n\nIterating Over the Zipped Object:\n\nIterate over the zipped object using a for loop and print each tuple.\n\n\nNote:\nThe zip() function returns an iterator, so converting it to a list will reveal its elements.\n\n\n6.6.3 Exercise 3: Unzipping a List of Tuples\n\nGiven Data:\n\nYou have a list of tuples:\npairs = [('apple', 1), ('banana', 2), ('cherry', 3)]\n\nUnzipping:\n\nUse the unpacking operator (*) along with zip() to separate the list into two tuples:\n\nOne tuple for the fruit names.\nOne tuple for the corresponding numbers.\n\nPrint both tuples.\n\n\nHint:\nUse the syntax names, numbers = zip(*pairs).\n\n\n6.6.4 Exercise 4: Using Built-in Functions on Iterables\n\nNumeric List Operations:\n\nCreate a list:\nnumbers = [5, 3, 8, 1, 9]\n\nApply Built-in Functions:\n\nUse the min(), max(), and sum() functions on this list.\nPrint the results of each function.\n\n\nNote:\nThese functions require the elements of the iterable to be of compatible types (e.g., all numbers).",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Python Iterables</span>"
    ]
  },
  {
    "objectID": "classes.html",
    "href": "classes.html",
    "title": "7  Object-Oriented Programming",
    "section": "",
    "text": "7.1 Classes\nPython is a versatile programming language that supports object-oriented programming (OOP). In Python, everything is an object, and built-in data types are implemented as classes.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Object-Oriented Programming</span>"
    ]
  },
  {
    "objectID": "classes.html#classes",
    "href": "classes.html#classes",
    "title": "7  Object-Oriented Programming",
    "section": "",
    "text": "7.1.1 Built-in Data Types in Python\nIn Python, every built-in data type is implemented as a class. This includes:\n\nint\nfloat\nstr\nlist\ntuple\ndict\nset\nNoneType\n\nYou can confirm this by using the type() function or checking an object’s __class__ attribute:\n\nprint(type(42))         \nprint(type(3.14))        \nprint(type(\"hello\"))     \nprint(type([1, 2, 3]))   \nprint(type(None))       \n\n&lt;class 'int'&gt;\n&lt;class 'float'&gt;\n&lt;class 'str'&gt;\n&lt;class 'list'&gt;\n&lt;class 'NoneType'&gt;\n\n\n\n# Checking the __class__ attribute\nx = 42\nprint(x.__class__)   \n\n&lt;class 'int'&gt;\n\n\n\n\n7.1.2 Understanding Classes in Python\nA class is a blueprint for creating objects. It defines the attributes (characteristics) and methods (behaviors) that its objects will have.\nFor example, consider a Cat class: - Attributes: Characteristics shared by all cats, such as breed, fur_color, and age. - Methods: Actions that a cat can perform, such as meow(), run(), or sleep().\nFor more details, refer to the official Python documentation on classes.\n\n\n7.1.3 Creating your own classes\nUntil now, we have worked with built-in Python classes like int, list, and dict. However, in many cases, we need to create our own classes to model real-world entities in a structured way.\nDefining your own classes provides several key benefits in programming:\n\nEncapsulation – Organize data and related functionality together.\nReusability – Code can be reused by creating multiple instances of the class.\nAbstraction – Hide unnecessary details and expose only the required functionality.\nInheritance – Reuse existing class behavior in new classes, avoiding redundancy.\n\nWhen we create a new class, we actually create a new type. Now, we are going to create our own type, which we can use in a way that is similar to the built-in types.\nLet’s start with the Car class:\n\nclass Car:\n    def __init__(self, brand, color, speed=0):\n        self.brand = brand      # Attribute\n        self.color = color      # Attribute\n        self.speed = speed      # Attribute\n\n    def accelerate(self, increment):\n        \"\"\"Increase the car's speed.\"\"\"\n        self.speed += increment\n        return f\"{self.brand} is now moving at {self.speed} mph.\"\n\n    def brake(self, decrement):\n        \"\"\"Decrease the car's speed.\"\"\"\n        self.speed = max(0, self.speed - decrement)\n        return f\"{self.brand} slowed down to {self.speed} mph.\"\n\nWe’ll use the example above to explain the following terms:\n\nThe class statement: We use the class statement to create a class. The Python style guide recommends to use CamelCase for class names.\nThe constructor (or the __init__() method): A class typically has a method called __init__. This method is called a constructor and is automatically called when an object or instance of the class is created. The constructor initializes the attributes of the class. In the above example, the constructor accepts Three values as arguments, and initializes its attributes brand and color with those values and have a default value for speed.\nThe self argument: This is the first parameter of instance methods in a class. It represents the instance of the class itself, allowing access to its attributes and methods. When referring to instance attributes or methods within the class, they must be prefixed with self. The purpose of self is to distinguish instance-specific attributes and methods from local variables or other functions in the program.\n\nThis example demonstrates how a class encapsulates attributes and behaviors. The Car class defines three attributes: brand, color, and speed, along with a constructor (__init__()) and two methods: accelerate() and brake(). This structure makes it easy to create multiple car objects and manipulate their states independently.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Object-Oriented Programming</span>"
    ]
  },
  {
    "objectID": "classes.html#objects",
    "href": "classes.html#objects",
    "title": "7  Object-Oriented Programming",
    "section": "7.2 Objects",
    "text": "7.2 Objects\nIn Python, an object is an instance of a class. A class acts as a blueprint, defining the structure and behavior that its objects will have. Each object has its own attributes (data) and can perform methods (functions associated with the class). Compared to the class (which is just a blueprint), an object is a concrete and tangible entity that exists in memory.\nIn Python, when you create a variable and assign a value to it, Python internally creates an instance of the corresponding class. Every value in Python is an object,\n\nx = 10    # x ia an insance of int class\ny = \"Hello\"     # y is an instance of str class\nz = [1, 2, 3]  # z is an instance of list class\n\nprint(type(x)) \nprint(type(y))  \nprint(type(z))  \n\n&lt;class 'int'&gt;\n&lt;class 'str'&gt;\n&lt;class 'list'&gt;\n\n\nOnce we define a class as a blueprint, we can create instances of that class to generate objects of its type. In fact, we can create as many objects as we want from a single class, each with its own unique data while sharing the same structure and behavior defined in the class.\nLet’s create two objects of the Car class we defined earlier\nTo create an object or instance of the class Car, we’ll use the class name with the values to be passed as argument to the constructor for initializing the object / instance.\n\n# Creating objects (instances of the Car class)\ncar1 = Car(\"Toyota\", \"Red\")\ncar2 = Car(\"Honda\", \"Blue\")\n\nprint(type(car1))\nprint(type(car2))\n\n&lt;class '__main__.Car'&gt;\n&lt;class '__main__.Car'&gt;\n\n\n\nInstance: An instance is a specific realization of the object of a particular class. Creating an instance of a class is called Instantiation. Here a particular car is an instance of the class Car. Similarly, in the example above, the object x is an instance of the class integer. The words object and instance are often used interchangeably.\n\nThe attributes of an instance can be accessed using the . operator with the object name\n\nprint(car1.brand)\nprint(car2.brand)\nprint(car1.color)\nprint(car2.color)\nprint(car1.speed)\nprint(car2.speed)\n\nToyota\nHonda\nRed\nBlue\n0\n0\n\n\nWhat happens if the instance variable doesn’t exist?\n\ncar1.engine\n\n\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[8], line 1\n----&gt; 1 car1.engine\n\nAttributeError: 'Car' object has no attribute 'engine'\n\n\n\nMethods are functions inside a class that operate on instance attributes. To call a method use:\n\nprint(car1.accelerate(20))\nprint(car2.brake(10))\n\nToyota is now moving at 20 mph.\nHonda slowed down to 0 mph.\n\n\nUnlike attributes, methods require parentheses () because they need to be executed, just like the functions we learned earlier\nA list of all attributes and methods associated with an object can be obtained with the dir() function. Ignore the ones with underscores - these are used by Python itself. The rest of them can be used to perform operations.\n\ndir(car1)\n\n['__class__',\n '__delattr__',\n '__dict__',\n '__dir__',\n '__doc__',\n '__eq__',\n '__format__',\n '__ge__',\n '__getattribute__',\n '__getstate__',\n '__gt__',\n '__hash__',\n '__init__',\n '__init_subclass__',\n '__le__',\n '__lt__',\n '__module__',\n '__ne__',\n '__new__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__setattr__',\n '__sizeof__',\n '__str__',\n '__subclasshook__',\n '__weakref__',\n 'accelerate',\n 'brake',\n 'brand',\n 'color',\n 'speed']\n\n\nFiltering out only user-defined attributes and methods\n\nprint([attr for attr in dir(car1) if not attr.startswith('__')])\n\n['accelerate', 'brake', 'brand', 'color', 'speed']\n\n\n\n7.2.1 Example: A class that analyzes a string\nLet us create a class that analyzes a string.\n\nclass AnalyzeString:\n    \n    #Constructor\n    def __init__(self, s):\n        s = s.lower()\n        self.words = s.split()\n    \n    #This method counts the numebr of words\n    def number_of_words(self):\n        return (len(self.words))\n    \n    #This method counts the number of words starting with the string s\n    def starts_with(self,s):\n        return len([x for x in self.words if x[:len(s)]==s])\n    \n    #This method counts the number of words of length n\n    def words_with_length(self,n):\n        return len([x for x in self.words if len(x)==n])\n    \n    #This method returns the frequency of the word w\n    def word_frequency(self,w):\n        return self.words.count(w)\n\nLet us create an instance of the class AnalyzeString() to analyze a sentence.\n\n#Defining a string\nsentence = 'This sentence in an example of a string that we will analyse using a class we have defined'\n\n\n#Creating an instance of class AnalyzeString()\nsentence_analysis = AnalyzeString(sentence)\n\n\n#The attribute 'word' contains the list of words in the sentence\nsentence_analysis.words\n\n['this',\n 'sentence',\n 'in',\n 'an',\n 'example',\n 'of',\n 'a',\n 'string',\n 'that',\n 'we',\n 'will',\n 'analyse',\n 'using',\n 'a',\n 'class',\n 'we',\n 'have',\n 'defined']\n\n\n\n#The method 'word_frequncy()' provides the frequency of a word in the sentence\nsentence_analysis.word_frequency('we')\n\n2\n\n\n\n#The method 'starts_with()' provides the frequency of number of words starting with a particular string\nsentence_analysis.starts_with('th')\n\n2\n\n\n\n\n7.2.2 Practice exercise 1\nWrite a class called PasswordManager. The class should have a list called old_passwords that holds all of the user’s past passwords. The last item of the list is the user’s current password. There should be a method called get_password that returns the current password and a method called set_password that sets the user’s password. The set_password method should only change the password if the attempted password is different from all the user’s past passwords. It should either print ‘Password changed successfully!’, or ‘Old password cannot be reused, try again.’ Finally, create a method called is_correct that receives a string and returns a boolean True or False depending on whether the string is equal to the current password or not.\nTo initialize the object of the class, use the list below.\nAfter defining the class:\n\nCheck the attribute old_passwords\nCheck the method get_password()\nTry re-setting the password to ‘ibiza1972’, and then check the current password.\nTry re-setting the password to ‘oktoberfest2022’, and then check the current password.\nCheck the is_correct() method\n\n\nclass PasswordManager:\n    def __init__(self, initial_passwords):\n        self.old_passwords = initial_passwords\n\n    def get_password(self):\n        \"\"\"Returns the current password (last item in the old_passwords list).\"\"\"\n        return self.old_passwords[-1]\n\n    def set_password(self, new_password):\n        \"\"\"Sets a new password only if it has not been used before.\"\"\"\n        if new_password in self.old_passwords:\n            print(\"Old password cannot be reused, try again.\")\n        else:\n            self.old_passwords.append(new_password)\n            print(\"Password changed successfully!\")\n\n    def is_correct(self, password):\n        \"\"\"Checks if the provided password matches the current password.\"\"\"\n        return password == self.get_password()\n\n\n# Initialize PasswordManager with given passwords\ninitial_passwords = [\"alpha123\", \"beta456\", \"gamma789\", \"delta321\", \"ibiza1972\"]\npassword_manager = PasswordManager(initial_passwords)\n\n# 1. Check the attribute old_passwords\nprint(\"Old passwords:\", password_manager.old_passwords)\n\n# 2. Check the method get_password()\nprint(\"Current password:\", password_manager.get_password())\n\n# 3. Try re-setting the password to 'ibiza1972'\npassword_manager.set_password(\"ibiza1972\")\nprint(\"Current password after attempt:\", password_manager.get_password())\n\n# 4. Try re-setting the password to 'oktoberfest2022'\npassword_manager.set_password(\"oktoberfest2022\")\nprint(\"Current password after attempt:\", password_manager.get_password())\n\n# 5. Check the is_correct() method\nprint(\"Is 'oktoberfest2022' correct?\", password_manager.is_correct(\"oktoberfest2022\"))\nprint(\"Is 'wrongpassword' correct?\", password_manager.is_correct(\"wrongpassword\"))\n\nOld passwords: ['alpha123', 'beta456', 'gamma789', 'delta321', 'ibiza1972']\nCurrent password: ibiza1972\nOld password cannot be reused, try again.\nCurrent password after attempt: ibiza1972\nPassword changed successfully!\nCurrent password after attempt: oktoberfest2022\nIs 'oktoberfest2022' correct? True\nIs 'wrongpassword' correct? False",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Object-Oriented Programming</span>"
    ]
  },
  {
    "objectID": "classes.html#class-constructors",
    "href": "classes.html#class-constructors",
    "title": "7  Object-Oriented Programming",
    "section": "7.3 Class Constructors",
    "text": "7.3 Class Constructors\nA constructor is a special method in a class that is automatically called when an object is created.\n- In Python, the constructor method is named __init__().\n- It initializes object attributes when an instance is created.\n\nclass Car:\n    def __init__(self, brand, color, speed=0):\n        \"\"\"Constructor to initialize Car attributes\"\"\"\n        self.brand = brand\n        self.color = color\n        self.speed = speed  # Default value is 0\n\n# Creating instances (objects)\ncar1 = Car(\"Toyota\", \"Red\", 50)\ncar2 = Car(\"Honda\", \"Blue\")  # speed uses default value\n\n# Accessing attributes\nprint(car1.brand, car1.color, car1.speed)  # Toyota Red 50\nprint(car2.brand, car2.color, car2.speed)\n\nToyota Red 50\nHonda Blue 0\n\n\n\n7.3.1 Default Constructor (No Parameters)\nIf a class does not explicitly define a constructor, Python automatically provides a default constructor. This constructor only includes self and takes no additional parameters.\nLet’s create an empty class to demonstrate this:\n\n# Define a class Circle that doesn't have any attributes or methods\nclass Circle:\n    pass\n\n# Create an instance of the Circle class\nc = Circle()\nprint(type(c))  \n\n&lt;class '__main__.Circle'&gt;\n\n\n\n\n7.3.2 Using Default Values in Constructors\nYou can set default values for parameters to make them optional.\n\nclass Student:\n    def __init__(self, name, grade=\"Not Assigned\"):\n        self.name = name\n        self.grade = grade  # Default: \"Not Assigned\"\n\ns1 = Student(\"John\", \"A\")  # Assigned grade\ns2 = Student(\"Emma\")       # Uses default grade\n\nprint(s1.name, s1.grade)  # John A\nprint(s2.name, s2.grade)  # Emma Not Assigned\n\nJohn A\nEmma Not Assigned",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Object-Oriented Programming</span>"
    ]
  },
  {
    "objectID": "classes.html#difference-between-instance-attributes-and-class-attributes-in-python-oop",
    "href": "classes.html#difference-between-instance-attributes-and-class-attributes-in-python-oop",
    "title": "7  Object-Oriented Programming",
    "section": "7.4 Difference Between Instance Attributes and Class Attributes in Python (OOP)",
    "text": "7.4 Difference Between Instance Attributes and Class Attributes in Python (OOP)\nIn Python object-oriented programming, attributes can be defined at two levels:\n\nInstance Attributes → Specific to each instance of the class.\nClass Attributes → Shared across all instances of the class.\n\n\n7.4.1 Instance Attributes (Defined in __init__)\n\nDefined inside the constructor (__init__) using self, and accessed using self.attribute_name\nEach instance has its own copy of instance attributes.\nChanges to an instance attribute affect only that instance.\n\n\n# Example: Instance attributes using our Car class\n\nclass Car:\n    def __init__(self, brand, color):\n        self.brand = brand  # Instance attribute\n        self.color = color  # Instance attribute\n\n# Creating instances\ncar1 = Car(\"Toyota\", \"Red\")\ncar2 = Car(\"Honda\", \"Blue\")\n\n# Each instance has different values\nprint(car1.brand)  # Toyota\nprint(car2.brand)  # Honda\n\n# Changing an instance attribute only affects that instance\ncar1.color = \"Black\"\nprint(car1.color)  # Black\nprint(car2.color)\n\nToyota\nHonda\nBlack\nBlue\n\n\n\n\n7.4.2 Class Attributes ( Defined Outside __init__)\n\nDefined at the class level (outside __init__).\nShared across all instances of the class.\nChanging a class attribute affects all instances (unless overridden at the instance level).\n\n\nclass Car:\n    wheels = 4  # Class attribute (shared by all instances)\n    \n    def __init__(self, brand):\n        self.brand = brand  # Instance attribute\n\n# Creating instances\ncar1 = Car(\"Toyota\")\ncar2 = Car(\"Honda\")\n\n# Accessing class attribute\nprint(car1.wheels)  # 4\nprint(car2.wheels)  # 4\n\n# Changing the class attribute affects all instances\nCar.wheels = 6\nprint(car1.wheels)  # 6\nprint(car2.wheels)  # 6\n\n4\n4\n6\n6\n\n\nNote: Just like attributes, methods can be categorized into instance methods and class methods. So far, everything we have defined are instance methods. Class methods, however, are beyond the scope of this data science course and will not be covered.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Object-Oriented Programming</span>"
    ]
  },
  {
    "objectID": "classes.html#inheritance-in-python",
    "href": "classes.html#inheritance-in-python",
    "title": "7  Object-Oriented Programming",
    "section": "7.5 Inheritance in Python",
    "text": "7.5 Inheritance in Python\n\n7.5.1 What is Inheritance?\nInheritance is a fundamental concept in Object-Oriented Programming (OOP) that allows a child class to inherit attributes and methods from a parent class. This promotes code reuse and hierarchical structuring of classes.\nHere are Key Benefits of Inheritance:\n\nCode Reusability – Avoids redundant code by reusing existing functionality.\nExtensibility – Allows adding new functionality without modifying the original class.\nImproves Maintainability – Easier to manage and update related classes.\n\n\n\n7.5.2 Defining a Parent (Base) and Child (Derived) Class\nA child class inherits from a parent class by specifying the parent class name in parentheses.\nExample: Basic Inheritance\n\n# Parent Class (Base Class)\nclass Animal:\n    def __init__(self, name):\n        self.name = name\n\n    def speak(self):\n        return \"Some sound\"\n\n# Child Class (Derived Class)\nclass Dog(Animal):  # Inheriting from Animal\n    def speak(self):\n        return \"Woof!\"\n\n# Creating objects\ndog1 = Dog(\"Buddy\")\n\n# Accessing inherited attributes and methods\nprint(dog1.name)      \nprint(dog1.speak())   \n\nBuddy\nWoof!\n\n\nExplanation:\n\nDog inherits from Animal, meaning it gets all the properties of Animal.\nThe Dog class overrides the speak() method to provide a specialized behavior.\n\n\n\n7.5.3 The super() Function\nThe super() function allows calling methods from the parent class inside the child class.\nExample: Using super() to Extend Parent Behavior\n\nclass Animal:\n    def __init__(self, name):\n        self.name = name\n\n    def speak(self):\n        return \"Some sound\"\n\nclass Cat(Animal):\n    def __init__(self, name, color):\n        super().__init__(name)  # Calling Parent Constructor\n        self.color = color  # Additional attribute in Child Class\n\n    def speak(self):\n        return \"Meow!\"\n\n# Creating an instance\ncat1 = Cat(\"Whiskers\", \"Gray\")\n\nprint(cat1.name)   # Whiskers (Inherited from Animal)\nprint(cat1.color)  # Gray (Defined in Cat)\nprint(cat1.speak()) # Meow! (Overridden method)\n\nWhiskers\nGray\nMeow!\n\n\n\nsuper().__init__(name) ensures the parent class constructor is properly called.\nThis allows the child class to initialize both inherited and new attributes.\n\n\n\n7.5.4 Method Overriding in Inheritance\n\nIf a method exists in both the parent and child class, the child class’s method overrides the parent’s method.\nThis is useful for customizing behavior.\n\nExample: Overriding a Method\n\nclass Parent:\n    def show(self):\n        return \"This is the Parent class\"\n\nclass Child(Parent):\n    def show(self):  # Overriding method\n        return \"This is the Child class\"\n\nobj = Child()\nprint(obj.show())  # This is the Child class\n\nThis is the Child class\n\n\n\n\n7.5.5 Check Relationship\n\nissubclass(Child, Parent) → Checks if a class is a subclass of another.\nisinstance(object, Class) → Checks if an object is an instance of a class.\n\n\nclass Animal:\n    pass\n\nclass Dog(Animal):\n    pass\n\ndog1 = Dog()\n\nprint(issubclass(Dog, Animal))  # True\nprint(isinstance(dog1, Dog))    # True\nprint(isinstance(dog1, Animal)) # True (Since Dog inherits from Animal)\n\nTrue\nTrue\nTrue\n\n\n\n\n7.5.6 The object class in Python\nWhen you define a class in Python without explicitly specifying a parent class, Python automatically makes it inherit from the built-in object class.\nLet’s confirm this using the issubclss() method\n\nprint(issubclass(Car, object))\n\nTrue\n\n\nYou can use the __bases__ attribute to check the parent class(es):\n\nprint(Car.__bases__) \n\n(&lt;class 'object'&gt;,)\n\n\n\n7.5.6.1 What is the object class?\n\nobject is the base class for all classes in Python.\nIt provides default methods like:\n\nstr()\nrepr()\neq()\ninit()\nAnd more…\n\n\nLet’s back to the whole list of car1\n\ndir(car1)\n\n['__class__',\n '__delattr__',\n '__dict__',\n '__dir__',\n '__doc__',\n '__eq__',\n '__format__',\n '__ge__',\n '__getattribute__',\n '__getstate__',\n '__gt__',\n '__hash__',\n '__init__',\n '__init_subclass__',\n '__le__',\n '__lt__',\n '__module__',\n '__ne__',\n '__new__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__setattr__',\n '__sizeof__',\n '__str__',\n '__subclasshook__',\n '__weakref__',\n 'brand',\n 'wheels']\n\n\nMany special methods and attributes that start with double underscores (__) are inherited from the object class in Python. These are known as dunder (double underscore) methods or magic methods, such as __init__(), __str__(), and __eq__(). These methods are automatically called by Python for specific operations, and users typically do not need to call them directly.\nWe generally do not recommend modifying these methods unless you are customizing class behavior (e.g., overloading operators). If you need to define private attributes or methods, use a single underscore _ (convention) or double underscore __ (name mangling) to prevent accidental access.\nKey Takeaways:\n\nInheritance promotes code reuse and hierarchy in OOP.\nA child class can inherit and override parent class methods.\nUse super() to call parent class methods inside the child class.\n\nFor more details, refer to the official Python documentation on Inheritance.\n\n\n\n7.5.7 Practice exercise 2\nDefine a class that inherits the in-built Python class list, and adds a new method to the class called nunique() which returns the number of unique elements in the list.\nDefine the following list as an object of the class you created. Then:\n\nFind the number of unique elements in the object using the method nunique() of the inherited class.\nCheck if the pop() method of the parent class works to pop an element out of the object.\n\n\nlist_ex = [1,2,5,3,6,5,5,5,12]\n\n\nclass list_v2(list):\n    def nuinque(self):\n        unique_elements = []\n        for x in self:\n            if x not in unique_elements:\n                unique_elements.append(x)\n        return len(unique_elements)\n    \nlist_ex = list_v2(list_ex)\nprint(\"Number of unique elements = \", list_ex.nuinque())\nprint(\"Checking the pop() method, the popped out element is\", list_ex.pop())\n\nNumber of unique elements =  6\nChecking the pop() method, the popped out element is 12\n\n\n\n\n7.5.8 Practice exercise 3\nDefine a class named PasswordManagerUpdated that inherits the class PasswordManager defined in Practice exercise 1. The class PasswordManagerUpdated should have two methods, other than the constructor:\n\nThe method set_password() that sets a new password. The new password must only be accepted if it does not have any punctuations in it, and if it is not the same as one of the old passwords. If the new password is not acceptable, then one of the appropriate messages should be printed - (a) Cannot have punctuation in password, try again, or (b) Old password cannot be reused, try again.\nThe method suggest_password() that randomly sets and returns a password as a string comprising of 15 randomly chosen letters. Letters may be repeated as well.\n\n\nimport random\nimport string\n\nclass PasswordManagerUpdated(PasswordManager):\n    def __init__(self, initial_passwords):\n        super().__init__(initial_passwords)\n\n    def set_password(self, new_password):\n        \"\"\"Sets a new password if it does not contain punctuation and is not a reused password.\"\"\"\n        if any(char in string.punctuation for char in new_password):\n            print(\"Cannot have punctuation in password, try again.\")\n        elif new_password in self.old_passwords:\n            print(\"Old password cannot be reused, try again.\")\n        else:\n            self.old_passwords.append(new_password)\n            print(\"Password changed successfully!\")\n\n    def suggest_password(self):\n        \"\"\"Generates and returns a random 15-character password without punctuation.\"\"\"\n        suggested_password = ''.join(random.choices(string.ascii_letters, k=15))\n        self.old_passwords.append(suggested_password)\n        return suggested_password\n\nNote that ascii_letters constant in Python is part of the string module and is a predefined string that contains all the lowercase and uppercase ASCII letters. It It contains all lowercase (‘a’ to ‘z’) and uppercase (‘A’ to ‘Z’) ASCII characters in sequence.\n\nimport string\n\n# Accessing ascii_letters\ns = string.ascii_letters\nprint(s) \n\nabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\n\n\nLet’s use the class below:\n\n# Initialize PasswordManagerUpdated with given passwords\ninitial_passwords = [\"alpha123\", \"beta456\", \"gamma789\", \"delta321\", \"ibiza1972\"]\npassword_manager_updated = PasswordManagerUpdated(initial_passwords)\n\n# 1. Try setting a password with punctuation\npassword_manager_updated.set_password(\"newPass@word!\")\n\n# 2. Try setting an already used password\npassword_manager_updated.set_password(\"ibiza1972\")\n\n# 3. Set a new valid password\npassword_manager_updated.set_password(\"securePass123\")\nprint(\"Current password:\", password_manager_updated.get_password())\n\n# 4. Generate and set a suggested password\nsuggested = password_manager_updated.suggest_password()\nprint(\"Suggested password:\", suggested)\nprint(\"Current password after suggestion:\", password_manager_updated.get_password())\n\nCannot have punctuation in password, try again.\nOld password cannot be reused, try again.\nPassword changed successfully!\nCurrent password: securePass123\nSuggested password: xXgtHYeOAPsVvvY\nCurrent password after suggestion: xXgtHYeOAPsVvvY",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Object-Oriented Programming</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements-R.html",
    "href": "Variable_expressions_statements-R.html",
    "title": "8  R: Basics",
    "section": "",
    "text": "8.1 Comments\nComments in R start with the # symbol. Everything after # on a line is ignored by R.\n# This is a single-line comment\nx &lt;- 10  # Assigning 10 to x\nR does not support multi-line comments like Python’s \"\"\", but you can simulate them using multiple # symbols:\n# This is a \n# multi-line comment\nTo comment a block of code quickly in RStudio, use:",
    "crumbs": [
      "R",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>R: Basics</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements-R.html#comments",
    "href": "Variable_expressions_statements-R.html#comments",
    "title": "8  R: Basics",
    "section": "",
    "text": "Ctrl + Shift + C (Windows/Linux)\nCmd + Shift + C (Mac)",
    "crumbs": [
      "R",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>R: Basics</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements-R.html#data-types",
    "href": "Variable_expressions_statements-R.html#data-types",
    "title": "8  R: Basics",
    "section": "8.2 Data Types",
    "text": "8.2 Data Types\nR has several built-in data types that are crucial for data analysis and computation. The commonly used data types include:\n\nNumeric (double and integer)\nCharacter (strings)\nLogical (TRUE or FALSE)\n\nThe data type of a variable/constant in R can be identified using the built-in functions class() or typeof(). For example, the following variables and their values demonstrate different data types:\nNumeric data in R consists of double (default) and integer types.\n\n# Double (default numeric type)\nclass(10.5)\n\n[1] \"numeric\"\n\n\n\n# Integer (use L suffix)\nclass(10L) \n\n[1] \"integer\"\n\n\n\nclass(4)\n\n[1] \"numeric\"\n\n\n\ntypeof(4)\n\n[1] \"double\"\n\n\n\nclass(4.4)\n\n[1] \"numeric\"\n\n\n\ntypeof(4.4)\n\n[1] \"double\"\n\n\n\nclass(4L)\n\n[1] \"integer\"\n\n\n\ntypeof(4L)\n\n[1] \"integer\"\n\n\n\nclass(TRUE)\n\n[1] \"logical\"\n\n\n\ntypeof(FALSE)\n\n[1] \"logical\"\n\n\nR Strings can be created by assigning character values to a variable. These strings can be further concatenated by using various functions and methods to form a big string.\n\n# R program for String Creation\n \n# creating a string with double quotes\nstr1 &lt;- \"OK1\"\ncat (\"String 1 is : \", str1)\n\nString 1 is :  OK1\n\n# creating a string with single quotes\nstr2 &lt;- 'OK2'\ncat (\"String 2 is : \", str2)\n\nString 2 is :  OK2\n\nstr3 &lt;- \"This is 'acceptable and 'allowed' in R\"\ncat (\"String 3 is : \", str3)\n\nString 3 is :  This is 'acceptable and 'allowed' in R\n\nstr4 &lt;- 'Hi, Wondering \"if this \"works\"'\ncat (\"String 4 is : \", str4)\n\nString 4 is :  Hi, Wondering \"if this \"works\"\n\n\nR Strings are always stored as double-quoted values. A double-quoted string can contain single quotes within it. Single-quoted strings can’t contain single quotes. Similarly, double quotes can’t be surrounded by double quotes.",
    "crumbs": [
      "R",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>R: Basics</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements-R.html#variables",
    "href": "Variable_expressions_statements-R.html#variables",
    "title": "8  R: Basics",
    "section": "8.3 Variables",
    "text": "8.3 Variables\nWe have the following rules for a R variable name:\n\nA variable name must start with a letter and can be a combination of letters, digits, period(.) and underscore(_). If it starts with period(.), it cannot be followed by a digit.\nA variable name cannot start with a number or underscore (_)\nVariable names are case-sensitive (age, Age and AGE are three different variables)\nReserved words cannot be used as variables (TRUE, FALSE, NULL, if…)\n\n\n8.3.1 The assignment operator\n\n8.3.1.1 Using &lt;- (Preferred Operator)\nThe &lt;- operator is the standard way to assign values in R:\n\nx &lt;- 10\ny &lt;- \"Hello, R!\"\nz &lt;- TRUE\n\n\n\n8.3.1.2 Using = (Not Recommended)\nAlthough = can be used for assignment, it is generally not recommended because it can cause issues in function arguments:\n\nx = 10  # Works, but `&lt;-` is preferred\n\n\n💡 Best Practice:\n- Always use &lt;- for assignments to avoid ambiguity.",
    "crumbs": [
      "R",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>R: Basics</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements-R.html#converting-datatypes",
    "href": "Variable_expressions_statements-R.html#converting-datatypes",
    "title": "8  R: Basics",
    "section": "8.4 Converting datatypes",
    "text": "8.4 Converting datatypes\nSometimes a value may have a datatype that is not suitable for using it. For example, consider the variable called annual_income in the code below:\n\nannual_income = \"80000\"\n\nSuppose we wish to divide annual_income by 12 to get the monthly income. We cannot use the variable annual_income directly as its datatype is a string and not a number. Thus, numerical operations cannot be performed on the variable annual_income.\nWe’ll need to convert annual_income to an integer. For that we will use the R’s in-built as.integer() function:\n\nannual_income = as.integer(annual_income)\nmonthly_income = annual_income/12\nprint(paste0(\"monthly income = \", monthly_income))\n\n[1] \"monthly income = 6666.66666666667\"\n\n\nSimilarly, datatypes can be converted from one type to another using in-built R functions as shown below:\n\n#Converting integer to character\nas.character(9)\n\n[1] \"9\"\n\n\n\n#Converting character to numeric\nas.numeric('9.4')\n\n[1] 9.4\n\n\n\n#Converting logical to integer\nas.numeric(FALSE)\n\n[1] 0\n\n\nNote that any non-zero numeric value, if converted to the ‘logical’ datatype, will return TRUE, while converting 0 to the ‘logical’ datatype will return FALSE. Only numeric values can be converted to the ‘logical’ datatype.\n\n# Converting integer to logical\nas.logical(40)\n\n[1] TRUE\n\n\n\n# Converting integer to logical\nas.logical(0)\n\n[1] FALSE\n\n\n\n# Converting integer to logical\nas.logical(-30.1)\n\n[1] TRUE\n\n\nSometimes, conversion of a value may not be possible. For example, it is not possible to convert the variable greeting defined below to a number:\n\ngreeting = \"hello\"\nas.numeric(greeting)\n\nWarning: NAs introduced by coercion\n\n\n[1] NA\n\n\nHowever, strings can be concatenated using the paste0() function:\n\npaste0(\"hello\", \" there!\")\n\n[1] \"hello there!\"\n\n\nThe following table summarizes how to convert between Numeric, Character, and Logical types in R:\n\n\n\n\n\n\n\n\n\n\nFrom → To\nConversion Function\nExample Usage\nNotes\nFailure Behavior\n\n\n\n\nNumeric → Character\nas.character(x)\nas.character(42) → \"42\"\nConverts numbers to strings\nNot applicable (always succeeds)\n\n\nNumeric → Logical\nas.logical(x)\nas.logical(0) → FALSE\n0 is FALSE, non-zero is TRUE\nReturns NA if input is not numeric\n\n\nCharacter → Numeric\nas.numeric(x)\nas.numeric(\"3.14\") → 3.14\nReturns NA if conversion fails\nReturns NA if conversion fails\n\n\nCharacter → Logical\nas.logical(x)\nas.logical(\"TRUE\") → TRUE\nCase-sensitive, \"TRUE\" and \"FALSE\" work\nReturns NA if input is not \"TRUE\" or \"FALSE\"\n\n\nLogical → Numeric\nas.numeric(x)\nas.numeric(TRUE) → 1\nTRUE = 1, FALSE = 0\nReturns NA if input is not logical\n\n\nLogical → Character\nas.character(x)\nas.character(FALSE) → \"FALSE\"\nConverts logical values to strings\nNot applicable (always succeeds)\n\n\n\nNote: Always verify conversions using class() or typeof() to ensure expected results.",
    "crumbs": [
      "R",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>R: Basics</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements-R.html#displaying-information",
    "href": "Variable_expressions_statements-R.html#displaying-information",
    "title": "8  R: Basics",
    "section": "8.5 Displaying information",
    "text": "8.5 Displaying information\n\n8.5.1 Using print()\nThe print() function is the most basic way to display output.\n\nx &lt;- \"Hello, R!\"\nprint(x)\n\n[1] \"Hello, R!\"\n\n\n\n\n8.5.2 Using cat()\nThe cat() function concatenates and prints text without quotes.\n\nname &lt;- \"Alice\"\ncat(\"Hello,\", name, \"!\\n\")\n\nHello, Alice !\n\n\n\ncat() does not return a value; it just displays output.\n\\n adds a new line.\n\n\n\n8.5.3 Using paste()\nThe paste() function concatenates text elements into a single string.\n\nname &lt;- \"Alice\"\npaste(\"Hello,\", name, \"!\\n\")\n\n[1] \"Hello, Alice !\\n\"\n\n\n\npaste() returns a character string.\npaste0() is a variant of paste() that does not add spaces between elements.\nTo print the result without quotes, use cat()\n\n\n\n8.5.4 Using message()\nThe message() function is useful for warnings or informational messages.\n\nmessage(\"This is a message!\")\n\nThis is a message!\n\n\nUnlike print(),message() does not print inside RMarkdown unless message=TRUE in chunk options.\n\n\n8.5.5 Using sprintf()\nFor formatted output, use sprintf():\n\nname &lt;- \"Alice\"\nage &lt;- 25\nsprintf(\"My name is %s, and I am %d years old.\", name, age)\n\n[1] \"My name is Alice, and I am 25 years old.\"",
    "crumbs": [
      "R",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>R: Basics</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements-R.html#taking-user-input",
    "href": "Variable_expressions_statements-R.html#taking-user-input",
    "title": "8  R: Basics",
    "section": "8.6 Taking user input",
    "text": "8.6 Taking user input\nR’s in-built readline() function can be used to accept an input from the user. For example, suppose we wish the user to input their age:\n\nuser_name &lt;- readline(prompt=\"Enter your name: \")\n\nEnter your name: \n\ncat(\"Hello,\", user_name, \"!\\n\")\n\nHello,  !\n\n\nSince RMarkdown is non-interactive, readline() will not work inside a notebook. Instead, you can assign input directly for demonstration:\n\nuser_name &lt;- \"Alice\"\ncat(\"Hello,\", user_name, \"!\\n\")\n\nHello, Alice !\n\n\nWhen using readline(), the input is always a *character string**, and it must be converted explicitly to numeric before performing calculations.\n\nage &lt;- as.numeric(readline(prompt=\"Enter your age: \"))\n\nEnter your age: \n\ncat(\"You are\", age, \"years old.\\n\")\n\nYou are NA years old.",
    "crumbs": [
      "R",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>R: Basics</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements-R.html#arithmetic-operations",
    "href": "Variable_expressions_statements-R.html#arithmetic-operations",
    "title": "8  R: Basics",
    "section": "8.7 Arithmetic Operations",
    "text": "8.7 Arithmetic Operations\nR supports standard arithmetic operations for numeric values.\n\n\n\nOperation\nSymbol\nExample\nResult\n\n\n\n\nAddition\n+\n5 + 3\n8\n\n\nSubtraction\n-\n10 - 4\n6\n\n\nMultiplication\n*\n6 * 2\n12\n\n\nDivision\n/\n8 / 2\n4\n\n\nExponentiation\n^ or **\n3^2 or 3**2\n9\n\n\nInteger Division\n%/%\n10 %/% 3\n3\n\n\nModulo (Remainder)\n%%\n10 %% 3\n1\n\n\n\n\n💡 Note:\n- Integer division %/% returns the quotient without the remainder.\n- Modulo %% returns the remainder after division.",
    "crumbs": [
      "R",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>R: Basics</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements-R.html#comparison-operators",
    "href": "Variable_expressions_statements-R.html#comparison-operators",
    "title": "8  R: Basics",
    "section": "8.8 Comparison Operators",
    "text": "8.8 Comparison Operators\nComparison operations return TRUE or FALSE, often used for conditions.\n\n\n\nOperation\nSymbol\nExample\nResult\n\n\n\n\nGreater than\n&gt;\n5 &gt; 3\nTRUE\n\n\nLess than\n&lt;\n2 &lt; 1\nFALSE\n\n\nGreater than or equal to\n&gt;=\n4 &gt;= 4\nTRUE\n\n\nLess than or equal to\n&lt;=\n6 &lt;= 5\nFALSE\n\n\nEqual to\n==\n5 == 5\nTRUE\n\n\nNot equal to\n!=\n3 != 2\nTRUE\n\n\n\n\n💡 Note:\n- Always use == for comparison (not =).\n- != checks if values are different.",
    "crumbs": [
      "R",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>R: Basics</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements-R.html#logical-operators",
    "href": "Variable_expressions_statements-R.html#logical-operators",
    "title": "8  R: Basics",
    "section": "8.9 Logical Operators",
    "text": "8.9 Logical Operators\nLogical operators are used to combine conditions in R. There are two types of logical operators:\nElement-wise operators: & (AND), | (OR), and ! (NOT) – work element-by-element for vectors. Short-circuit operators: && (AND), || (OR) – only evaluate the first element of each condition, primarily used in control flow (e.g., if statements).\n\n\n\n\n\n\n\n\n\n\nOperator\nSymbol\nDescription\nExample\nResult\n\n\n\n\nAND\n&\nElement-wise AND (Both must be TRUE)\n(5 &gt; 3) & (2 &lt; 4)\nTRUE\n\n\nOR\n|\nElement-wise OR (At least one must be TRUE)\n(5 &gt; 3) | (2 &gt; 4)\nTRUE\n\n\nNOT\n!\nNegates a logical value\n!(5 &gt; 3)\nFALSE\n\n\nShort-circuit AND\n&&\nEvaluates only the first element\nTRUE && FALSE\nFALSE\n\n\nShort-circuit OR\n||\nEvaluates only the first element\nTRUE || FALSE\nTRUE\n\n\n\n**Difference between element-wise and short-circuit operators",
    "crumbs": [
      "R",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>R: Basics</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements-R.html#differences-between-element-wise-and-short-circuit-operators",
    "href": "Variable_expressions_statements-R.html#differences-between-element-wise-and-short-circuit-operators",
    "title": "8  R: Basics",
    "section": "8.10 2. Differences Between Element-wise and Short-circuit Operators",
    "text": "8.10 2. Differences Between Element-wise and Short-circuit Operators\n\n\n\n\n\n\n\n\n\nOperator Type\nSymbol\nWorks on Vectors?\nUse Case\n\n\n\n\nElement-wise AND\n&\n✅ Yes\nUse with vectors or data frames\n\n\nElement-wise OR\n|\n✅ Yes\nUse with vectors or data frames\n\n\nShort-circuit AND\n&&\n❌ No (only first element)\nUse in if statements\n\n\nShort-circuit OR\n||\n❌ No (only first element)\nUse in if statements\n\n\n\n\n💡 Key Takeaways:\n- Use & and | for vector operations (e.g., filtering in data frames).\n- Use && and || in if statements for better efficiency. - The ! operator negates logical values (useful for filtering and reversing conditions).\n\nExamples:\n\nx &lt;- c(TRUE, FALSE, TRUE)\ny &lt;- c(FALSE, TRUE, TRUE)\n\n# Element-wise AND\nx & y  \n\n[1] FALSE FALSE  TRUE\n\n# Element-wise OR\nx | y \n\n[1] TRUE TRUE TRUE\n\n\n\na &lt;- 10\nb &lt;- 5\n\nif (a &gt; 0 && b &gt; 0) {\n  print(\"Both are positive\")\n}\n\n[1] \"Both are positive\"\n\nif (a &gt; 0 || b &lt; 0) {\n  print(\"At least one condition is met\")\n}\n\n[1] \"At least one condition is met\"\n\n\n\nx &lt;- c(TRUE, FALSE, TRUE)\n!x  # [FALSE TRUE FALSE]\n\n[1] FALSE  TRUE FALSE",
    "crumbs": [
      "R",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>R: Basics</span>"
    ]
  },
  {
    "objectID": "control_flow.html",
    "href": "control_flow.html",
    "title": "9  R: Control flow tools",
    "section": "",
    "text": "9.1 Code Blocks: R vs. Python\nDifferent programming languages define code blocks differently:\nYou have learned indentation (spaces or tabs) determines the structure of code in Python.",
    "crumbs": [
      "R",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>R: Control flow tools</span>"
    ]
  },
  {
    "objectID": "control_flow.html#code-blocks-r-vs.-python",
    "href": "control_flow.html#code-blocks-r-vs.-python",
    "title": "9  R: Control flow tools",
    "section": "",
    "text": "Python uses indentation to structure code.\nR uses curly braces {} to define code blocks.\n\n\n\n9.1.1 Code blocks in R (Uses {})\nIn R, curly braces {} define code blocks, and indentation is not required (but recommended for readability).\n\nfor (i in 1:5) {\n  print(i)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n\nAnother key difference in control flow syntax between Python and R is how conditions are written. In Python, conditions do not require parentheses, whereas in R, they must be enclosed in parentheses.",
    "crumbs": [
      "R",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>R: Control flow tools</span>"
    ]
  },
  {
    "objectID": "control_flow.html#trycatch",
    "href": "control_flow.html#trycatch",
    "title": "9  R: Control flow tools",
    "section": "9.2 TryCatch",
    "text": "9.2 TryCatch\nWhen running R code, errors can occur due to unexpected inputs, missing data, or issues with computations. Without proper error handling, an entire execution may be stopped due to an error. The tryCatch function in R provides a mechanism to handle errors gracefully, allowing execution to continue and custom responses to be provided.\nBasic Syntax\n\ntryCatch({\n  # Code that may generate an error\n}, error = function(e) {\n  # Code to handle errors\n}, warning = function(w) {\n  # Code to handle warnings\n}, finally = {\n  # Code that will always execute\n})\n\nNULL\n\n\n\nerror: Handles errors that stop execution.\nwarning: Handles warnings that don’t necessarily stop execution.\nfinally: Executes code regardless of whether an error occurs.\n\nExample: Input an integer from the user. If the user inputs a valid integer, print whether it is a multiple of 3. However, if the user does not input a valid integer, print a message saying that the input is invalid.\n\nnum &lt;- \"3r\"\ntryCatch({\n  num_int &lt;- as.integer(num)\n  if (num_int %% 3 == 0) {\n    print(\"Number is a multiple of 3\")\n  } else {\n    print(\"Number is not a multiple of 3\")\n  }\n}, error = function(e) {\n  print(\"Error encountered\")\n}, warning = function(w) {\n  print(\"Warning encountered\")\n})\n\n[1] \"Warning encountered\"\n\n\nThe warning block will be triggered, not the error block.\nWhy\n\nas.integer(\"3r\") does not generate an error. Instead, it produces a warning and returns NA.\nIn R, an error occurs when an operation stops execution (e.g., division by zero in integer operations).\nA warning occurs when something unexpected happens, but execution continues (e.g., invalid conversion).",
    "crumbs": [
      "R",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>R: Control flow tools</span>"
    ]
  },
  {
    "objectID": "control_flow.html#control-flow-tools",
    "href": "control_flow.html#control-flow-tools",
    "title": "9  R: Control flow tools",
    "section": "9.3 Control flow tools",
    "text": "9.3 Control flow tools\nControl flow in R relies on comparison operators and logical operators to make decisions based on conditions. These operators are commonly used in conditional statements like if, ifelse(), and loops.\n\nComparison operators are used to compare values and return a logical value (TRUE or FALSE).\nLogical operators are used to combine multiple conditions in control flow statements.\n\nLike Python, R provides if-else, for loops, while loops, and switch/case for decision-making and iteration. However, in Python, conditions do not require parentheses, whereas in R, parentheses must enclose the condition.\n\nx &lt;- 5\nwhile (x &gt; 0) {  # Parentheses required\n  print(x)\n  x &lt;- x - 1\n}\n\n[1] 5\n[1] 4\n[1] 3\n[1] 2\n[1] 1",
    "crumbs": [
      "R",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>R: Control flow tools</span>"
    ]
  },
  {
    "objectID": "control_flow.html#conditional-statements",
    "href": "control_flow.html#conditional-statements",
    "title": "9  R: Control flow tools",
    "section": "9.4 Conditional statements",
    "text": "9.4 Conditional statements\nThe if-else if-else statements can check several conditions, and execute the code corresponding to the condition that is true. Note that there can be as many else if statements as required.\nExample: Assign letter grade based on a student’s final score\n\nscore &lt;- 75  # Change this value to test different cases\n\nif (score &gt;= 90) {\n  print(\"Grade: A\")\n} else if (score &gt;= 80) {\n  print(\"Grade: B\")\n} else if (score &gt;= 70) {\n  print(\"Grade: C\")\n} else if (score &gt;= 60) {\n  print(\"Grade: D\")\n} else {\n  print(\"Grade: F\")\n}\n\n[1] \"Grade: C\"",
    "crumbs": [
      "R",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>R: Control flow tools</span>"
    ]
  },
  {
    "objectID": "control_flow.html#loops",
    "href": "control_flow.html#loops",
    "title": "9  R: Control flow tools",
    "section": "9.5 Loops",
    "text": "9.5 Loops\n\n9.5.1 The : operator\nThe : operator in R is used to generate sequences of integers. It is similar to Python’s range() function, but with some key differences.\nBasic Syntax\nstart:end\n\nGenerates a sequence of integers from start to end.\nInclusive: Both start and end are included.\n\nExamples\n\n1:5\n\n[1] 1 2 3 4 5\n\n\nIn Python, the equivalent would be list(range(1, 6))\n\n9.5.1.1 Reverse sequence\nThe : operator also works in Reverse\n\n# Counting down\n5:1\n\n[1] 5 4 3 2 1\n\n\n\n\n9.5.1.2 Using : with negative numbers\n\n# Counting down\n-3:3\n\n[1] -3 -2 -1  0  1  2  3\n\n\n\n\n9.5.1.3 Using : with Non-integers\nIf the start or end value is not an integer, R coerces it to an integer.\n\n# The decimal values are truncated to integers before generating the sequence\n1.5:5.5\n\n[1] 1.5 2.5 3.5 4.5 5.5\n\n\n\n\n\n9.5.2 seq() function\nDifference: ``: only creates sequences with a step size of 1, while seq() allows custom increments.\n\n# Counting by 2\nseq(1, 10, by = 2)\n\n[1] 1 3 5 7 9\n\n\nSummary\n\n\n\n\n\n\n\n\n\nFeature\nR (: Operator)\nPython (range())\nR (seq() Function)\n\n\n\n\nGenerates integers\n✅ Yes\n✅ Yes\n✅ Yes\n\n\nInclusive of end?\n✅ Yes\n❌ No (excludes end)\n✅ Yes\n\n\nWorks in reverse?\n✅ Yes (5:1)\n✅ Yes (range(5, 0, -1))\n✅ Yes (seq(5, 1, by = -1))\n\n\nHandles non-integers?\n✅ Converts to integer\n❌ Must be integer\n✅ Supports non-integer steps\n\n\nCustom step size?\n❌ No (always 1)\n✅ Yes (range(1, 10, 2))\n✅ Yes (seq(1, 10, by = 2))\n\n\n\n\n\n9.5.3 for loop\nThe for loop is used when you need to iterate over a sequence of numbers, vectors, lists, or other iterable objects.\n\n9.5.3.1 Using : in for loops\nSince : creates integer sequences, it is commonly used in for loops.\n\nfor (i in 1:5) {\n  print(i)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n\nExample: Print the first \\(n\\) elements of the Fibonacci sequence, where \\(n\\) is an integer input by the user, such that \\(n&gt;2\\). In a fibonacci sequence, each number is the sum of the preceding two numbers, and the sequence starts from \\(0,1\\). The sequence is as follows:\n\\(0,1,1,2,3,5,8,13,....\\)\n\nn &lt;- readline(\"Enter a number:\")\n\nEnter a number:\n\n\n\nn &lt;- 10\n\n\n# Define the number of terms\nif (n &lt;= 0) {\n  stop(\"n must be a positive integer\")\n}\n\n# Initialize the sequence with the first two Fibonacci numbers\nn1 &lt;- 0\nn2 &lt;- 1\nelements &lt;- c(n1, n2)\n\n# Generate the Fibonacci sequence iteratively\nfor (i in 3:n) {  \n  n3 &lt;- n1 + n2  # Compute the next term\n  elements &lt;- c(elements, n3)  # Append to the sequence\n  \n  # Shift values for the next iteration\n  n1 &lt;- n2\n  n2 &lt;- n3  \n}\n\n# Print the Fibonacci sequence\nprint(elements)\n\n [1]  0  1  1  2  3  5  8 13 21 34\n\ncat(\"These are the first\", n, \"elements of the Fibonacci series.\\n\")\n\nThese are the first 10 elements of the Fibonacci series.\n\n\n\nThe stop() function in R is used to terminate execution and display an error message when a certain condition is met. It is often used for error handling to prevent further execution of the script when an invalid input is detected.\nThe c() function in R is used to combine values into a vector. It is one of the most fundamental functions in R, as vectors are the primary data structure. You can think of vectors as being similar to Python lists.\n\n\n\n\n9.5.4 while loop\nThe whileloop executes as long as the specified condition evaluates to TRUE.\nExample: Print all the elements of the Fibonacci sequence less than n, where n is an integer input by the user, such that n&gt;2. In a fibonacci sequence, each number is the sum of the preceding two numbers, and the sequence starts from 0,1. The sequence is as follows:\n0,1,1,2,3,5,8,13,..\n\nn = readline(\"Enter a number:\")\n\nEnter a number:\n\n\n\nn = 50\n\n\n# Initialize the sequence with the first number\nn1 &lt;- 0\nn2 &lt;- 1\n\n# Store the Fibonacci sequence\nelements &lt;- n1\n\n# Generate Fibonacci numbers less than n\nwhile (n2 &lt; n) {\n  elements &lt;- c(elements, n2)  # Append the next number\n  \n  # Compute the next Fibonacci number\n  n3 &lt;- n1 + n2\n  \n  # Shift values for the next iteration\n  n1 &lt;- n2\n  n2 &lt;- n3  \n}\n\n# Print the Fibonacci sequence\nprint(elements)\n\n [1]  0  1  1  2  3  5  8 13 21 34\n\ncat(\"These are all the Fibonacci numbers less than\", n, \"\\n\")\n\nThese are all the Fibonacci numbers less than 50",
    "crumbs": [
      "R",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>R: Control flow tools</span>"
    ]
  },
  {
    "objectID": "control_flow.html#loop-control-statements",
    "href": "control_flow.html#loop-control-statements",
    "title": "9  R: Control flow tools",
    "section": "9.6 Loop control statements",
    "text": "9.6 Loop control statements\nin R, there are two statements that are commonly used to control the execution of loops by altering their normal flow\n\n9.6.1 break statement (Loop Termination)\nThe break statement is used to immediately exits the loop when certain condition is met. It will stop execution of the loop entirely\nFor example, suppose we need to keep asking the user to input year of birth and compute the corresponding age, until the user enters 1900 as the year of birth.\n\n# Get current year dynamically\ncurrent_year &lt;- as.integer(format(Sys.Date(), \"%Y\"))\n\n# Check if running in interactive mode\nif (interactive()) {\n  while (TRUE) {\n    user_input &lt;- readline(\"Enter year of birth (1900-present) or 'q' to quit: \")\n    \n    if (tolower(user_input) == \"q\") {\n      cat(\"Goodbye!\\n\")\n      break\n    }\n    \n    year &lt;- suppressWarnings(as.integer(user_input))\n    \n    if (is.na(year)) {\n      cat(\"Error: Please enter a valid year as a number.\\n\")\n    } else if (year == 1900) {\n      cat(\"Special year entered. Exiting program.\\n\")\n      break\n    } else if (year &lt; 1900) {\n      cat(\"Error: Year must be 1900 or later.\\n\")\n    } else if (year &gt; current_year) {\n      cat(\"Error: Year cannot be in the future.\\n\")\n    } else {\n      age &lt;- current_year - year\n      cat(sprintf(\"Based on birth year %d, age in %d = %d years\\n\", \n                  year, current_year, age))\n    }\n  }\n} else {\n  cat(\"Skipping user input section since Quarto is running in batch mode.\\n\")\n}\n\n\n\n9.6.2 next statement (Skip Iteration, Similar to continue in Python)\nThe next statement is used to skip the current iteration and moves to the next one. It does not exit the loop but skips the rest of the current iteration.\nFor example, consider the following code:\n\nfor (i in 1:10) {\n  if (i == 5) {\n    next  # Skip iteration when i is 5\n  }\n  print(i)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 6\n[1] 7\n[1] 8\n[1] 9\n[1] 10\n\n\nWhen the control flow reads the statement next, it goes back to the beginning of the for loop, and ignores the lines of code below the statement.\n\n\n9.6.3 Practice exercise\nWrite a program that asks the user the question, “How many stars are in the Milky Way (in billions)?”. If the user answers 100, the program should print correct, and stop. However, if the user answers incorrectly, the program should print “incorrect”, and ask them if they want to try again. The program should continue to run until the user answers correctly, or they want to stop trying.\n\nwhile (TRUE) {\n  answer = readline(\"How many stars are there in the Milky Way (in billions)? \")\n  if (answer == '100') {\n    print(\"Correct\")\n    break\n  } else {\n    print(\"Incorrect\")\n  }\n  try_again = readline(\"Do you want to try again? (Y/N):\")\n  if (try_again == 'Y') {\n    next\n  } else {\n    break\n  }\n}",
    "crumbs": [
      "R",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>R: Control flow tools</span>"
    ]
  },
  {
    "objectID": "control_flow.html#characters-in-r",
    "href": "control_flow.html#characters-in-r",
    "title": "9  R: Control flow tools",
    "section": "9.7 characters in R",
    "text": "9.7 characters in R\n\n9.7.1 Basic Definitions\n\nIn Python, strings are defined using either single (') or double (\") quotes.\nIn R, character values (strings) are always enclosed in double quotes (\" \"), though single quotes (' ') also work, But single quotes are normally only used to delimit character constants containing double quotes.\n\n\n\n9.7.2 String/Character Length\n\nIn Python, len() is used to count the number of characters.\nIn R, nchar() is used.\n\n\ns &lt;- \"Hello\"\nprint(nchar(s)) \n\n[1] 5\n\n\n\n\n9.7.3 String Indexing and Slicing\n\nPython allows direct indexing and slicing using [].\nR does not support direct indexing for characters. Instead, substr() is used.\n\n\ns &lt;- \"Hello\"\nprint(substr(s, 2, 2))   # Output: \"e\" (1-based index)\n\n[1] \"e\"\n\nprint(substr(s, 2, 4)) \n\n[1] \"ell\"\n\n\nKey Difference: Python uses 0-based indexing, while R uses 1-based indexing.\n\n\n9.7.4 String Concatenation\n\nPython: Uses + for concatenation.\nR: Uses paste() or paste0().\n\n\ns1 &lt;- \"Hello\"\ns2 &lt;- \"World\"\nprint(paste(s1, s2))   \n\n[1] \"Hello World\"\n\nprint(paste0(s1, s2))\n\n[1] \"HelloWorld\"\n\n\n\n\n9.7.5 Changing Case (Uppercase & Lowercase)\n\nPython: s.upper() and s.lower() for conversion\nR: toupper(s) and tolower(s)\n\n\ns &lt;- \"Hello\"\nprint(toupper(s))\n\n[1] \"HELLO\"\n\nprint(tolower(s))\n\n[1] \"hello\"\n\n\n\n\n9.7.6 Finding Substrings\n\nPython: Uses .find() or in to check for substrings.\nR: Uses grep() or grepl().\n\n\ns &lt;- \"Hello World\"\nprint(grepl(\"World\", s))  \n\n[1] TRUE\n\nprint(grep(\"World\", s))\n\n[1] 1\n\n\n\n\n9.7.7 String Replacement\n\nPython: Uses .replace().\nR: Uses gsub().\n\n\n\n9.7.8 String Splitting\n\nPython: Uses split() method in strings to break them into lists\nR: Uses strsplit() function to split strings into a list of character vectors.\n\n\nsentence &lt;- \"Hello, how are you?\"\nwords &lt;- strsplit(sentence, \" \")  # Split by space\nprint(words)\n\n[[1]]\n[1] \"Hello,\" \"how\"    \"are\"    \"you?\"  \n\n\nstrsplit() returns a list, even if applied to a single string. The delimiter is treated as a regex, meaning special characters need to be escaped\n\n# splitting using a comma\nsentence &lt;- \"apple,banana,grape,orange\"\nwords &lt;- strsplit(sentence, \",\")\nprint(words[[1]])\n\n[1] \"apple\"  \"banana\" \"grape\"  \"orange\"\n\n\n\n\n9.7.9 Summary table\n\n\n\n\n\n\n\n\nFeature\nPython (String)\nR (Character)\n\n\n\n\nDefinition\n'Hello' or \"Hello\"\n\"Hello\"\n\n\nData Type Check\ntype(\"Hello\") → str\nclass(\"Hello\") → \"character\"\n\n\nLength\nlen(s)\nnchar(s)\n\n\nIndexing\ns[1] (0-based)\nsubstr(s, 2, 2) (1-based)\n\n\nConcatenation\ns1 + s2\npaste(s1, s2) or paste0(s1, s2)\n\n\nUpper/Lower Case\ns.upper(), s.lower()\ntoupper(s), tolower(s)\n\n\nFinding Substrings\n\"World\" in s, s.find(\"World\")\ngrepl(\"World\", s), grep(\"World\", s)\n\n\nReplace Substring\ns.replace(\"old\", \"new\")\ngsub(\"old\", \"new\", s)\n\n\nSplitting\ns.split(\" \") (default: whitespace)\nstrsplit(s, \" \")(default: whitespace)",
    "crumbs": [
      "R",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>R: Control flow tools</span>"
    ]
  },
  {
    "objectID": "control_flow.html#practice-exercise-4",
    "href": "control_flow.html#practice-exercise-4",
    "title": "9  R: Control flow tools",
    "section": "9.8 Practice exercise 4",
    "text": "9.8 Practice exercise 4\n\n9.8.1 Problem 1\n\nmy_num &lt;- \"0\"\n\nUsing my_num above:\n\ncheck if the number is numeric\nconvert the number to numeric\n\n\n\n9.8.2 Problem 2\n\nDefine a variable to be your name.\nDefine a variable to be your favorite number.\nDefine a variable to be your favorite color.\nPrint a sentence that reads: “My name is {} and my favorite number is {}”.\nStore a variable that checks if your favorite number is less than 10. Print this variable.\nStore a variable that checks if your favorite number is even. Print this variable.\nStore a variable that checks if your favorite color is “red”. Print this variable.\nConvert one of your stored Boolean to a numeric data type. What happens?\nPrint a statement that returns TRUE if your favorite number is less than 10 and favorite color is NOT red and returns FALSE otherwise.\nPrint a statement that return TRUE if your favorite number is even or less than 10.",
    "crumbs": [
      "R",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>R: Control flow tools</span>"
    ]
  },
  {
    "objectID": "control_flow.html#practice-exercise-5",
    "href": "control_flow.html#practice-exercise-5",
    "title": "9  R: Control flow tools",
    "section": "9.9 Practice exercise 5",
    "text": "9.9 Practice exercise 5\nCreate an interactive R code block that asks the user to enter their age and ensures the input is a valid integer. The code should handle incorrect inputs and guide the user until they provide a valid response.\nRequirements - The script should continuously prompt the user until they enter a valid integer. - If the input is not an integer, the script should display an error message and ask again. - Once a valid integer is entered: - If the age is 18 or older, display: \"You are an adult.\" - If the age is less than 18, display: \"You are a minor.\"\nGuidelines & Hints - Use readline() to collect user input. - Convert the input using as.integer() and check if it returns NA for invalid inputs. - Utilize a loop to ensure the user is repeatedly prompted until they enter a valid integer. - Provide clear error messages to guide the user. - Consider handling unexpected errors using error-catching techniques such as tryCatch().\nExample User Interaction\n\n\n\nInput\nOutput\n\n\n\n\n\"abc\"\n\"Please enter a valid integer for age.\"\n\n\n\"twenty\"\n\"Please enter a valid integer for age.\"\n\n\n\"18\"\n\"You are an adult.\"\n\n\n\"17\"\n\"You are a minor.\"",
    "crumbs": [
      "R",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>R: Control flow tools</span>"
    ]
  },
  {
    "objectID": "control_flow2.html",
    "href": "control_flow2.html",
    "title": "10  R: Functions",
    "section": "",
    "text": "10.1 Functions in R\nFunctions in R are used to encapsulate reusable code. R provides a wide range of built-in functions, and users can also define their own functions.",
    "crumbs": [
      "R",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>R: Functions</span>"
    ]
  },
  {
    "objectID": "control_flow2.html#functions-in-r",
    "href": "control_flow2.html#functions-in-r",
    "title": "10  R: Functions",
    "section": "",
    "text": "10.1.1 Built-in Functions in R\nR has many predefined functions for mathematical operations, statistics, and data manipulation.\n\n10.1.1.1 🔹 Common Built-in Functions\n\nsqrt(25)\n\n[1] 5\n\nabs(-10)\n\n[1] 10\n\nround(3.14159, 2)\n\n[1] 3.14\n\n\n\n# Character functions\ntoupper(\"hello\")  # Convert to uppercase → \"HELLO\"\n\n[1] \"HELLO\"\n\ntolower(\"WORLD\")  # Convert to lowercase → \"world\"\n\n[1] \"world\"\n\nnchar(\"Hello\")    # Count characters → 5\n\n[1] 5\n\n\n\n# Logical functions\nany(c(TRUE, FALSE, FALSE))   # TRUE if at least one TRUE\n\n[1] TRUE\n\nall(c(TRUE, TRUE, FALSE))    # FALSE if any FALSE\n\n[1] FALSE\n\n\n\n\n\n10.1.2 Random number generation\nR provides various functions to generate random numbers from different distributions. These functions are essential for simulation, statistical modeling, and machine learning.\n\n\n\n\n\n\n\n\nFunction\nDescription\nExample\n\n\n\n\nrunif(n, min, max)\nUniform distribution\nrunif(5, 0, 10)\n\n\nrnorm(n, mean, sd)\nNormal distribution\nrnorm(5, mean=0, sd=1)\n\n\nrbinom(n, size, prob)\nBinomial distribution\nrbinom(5, size=10, prob=0.5)\n\n\nrpois(n, lambda)\nPoisson distribution\nrpois(5, lambda=3)\n\n\nsample(x, size, replace)\nRandom sampling\nsample(1:10, 5, replace=TRUE)\n\n\n\n\n10.1.2.1 Setting a seed for reproducibility\nSetting a seed ensures that random number generation produces the same results every time.\n\nset.seed(42)\nrunif(3)\n\n[1] 0.9148060 0.9370754 0.2861395\n\n\n\n\n10.1.2.2 Generating uniform random numbers (runif())\nThe runif() function generates random numbers from a uniform distribution between a given min and max.\n\nset.seed(42)  # Set seed for reproducibility\nrunif(5, min=0, max=10)\n\n[1] 9.148060 9.370754 2.861395 8.304476 6.417455\n\n\n\n\n10.1.2.3 Generating Normally Distributed Numbers (rnorm())\nThe rnorm() function generates random numbers from a normal (Gaussian) distribution.\n\nset.seed(42)\nrnorm(5, mean=0, sd=1)\n\n[1]  1.3709584 -0.5646982  0.3631284  0.6328626  0.4042683\n\n\n\n\n10.1.2.4 Random Sampling (sample())\nThe sample() function randomly selects elements from a given vector.\n\nset.seed(42)\nsample(1:10, 5, replace=TRUE)\n\n[1]  1  5  1  9 10",
    "crumbs": [
      "R",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>R: Functions</span>"
    ]
  },
  {
    "objectID": "control_flow2.html#defining-a-function",
    "href": "control_flow2.html#defining-a-function",
    "title": "10  R: Functions",
    "section": "10.2 Defining a function",
    "text": "10.2 Defining a function\nFunctions in R are defined using the keyword function(). All the statements within a function are enclosed with {} braces. Look at the function defined below. It takes an integer as an argument, and prints whether the integer is odd or even.\n\nodd_even &lt;- function(intgr) {\n  if (intgr %% 2 == 0) {\n    print(\"even\")\n  } else {\n      print(\"odd\")\n  }\n}\n\nodd_even(3)\n\n[1] \"odd\"\n\n\n\n10.2.1 Function arguments\nIn both R and Python, functions support multiple types of arguments, including positional arguments, default arguments, variable-length arguments, and keyword arguments. The behavior of function arguments in R is nearly identical to Python.\n\n\n10.2.2 Practice exercise\nWrite a function that returns all prime numbers between \\(a\\) and \\(b\\), where \\(a\\) and \\(b\\) are parameters of the function.\n\nprime &lt;- function(a, b) {\n  prime_numbers &lt;- c()\n  for (number in a:b) {\n    prime = 1\n    \n    for (factor in 2:(number - 1)) {\n      if (number %% factor == 0) {\n        prime = 0\n      }\n    }\n    \n    if (prime == 1) prime_numbers &lt;- c(prime_numbers, number)\n  }\n  return(prime_numbers)\n}\nprime(40, 60)\n\n[1] 41 43 47 53 59",
    "crumbs": [
      "R",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>R: Functions</span>"
    ]
  },
  {
    "objectID": "robjects.html",
    "href": "robjects.html",
    "title": "11  R: Data structures",
    "section": "",
    "text": "11.1 Atomic vectors ((1D, Homogeneous))\nR has several data structures to store and manipulate data efficiently. These structures can be classified into homogeneous (same type) and heterogeneous (different types) categories.\nAn atomic vector in R is a vector containing objects of the same datatype. If the objects are not of the same datatype, then they are coerced to be of the same datatype. It is defined using the keyword c().\nnumbers = c(1, 2, 67)\nThe in-built R function length() is used to find the length of an atomic vector.\nlength(numbers)\n\n[1] 3",
    "crumbs": [
      "R",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>R: Data structures</span>"
    ]
  },
  {
    "objectID": "robjects.html#atomic-vectors-1d-homogeneous",
    "href": "robjects.html#atomic-vectors-1d-homogeneous",
    "title": "11  R: Data structures",
    "section": "",
    "text": "11.1.1 Slicing the atomic vector\n\n11.1.1.1 Slicing using indices\nAn atomic vector can be sliced using the indices of the elements within [] brackets.\nFor example, consider the vector:\n\nvec &lt;- 1:40\n\nSuppose, we wish to get the \\(3^{rd}\\) element of the vector. We can get it using the index 3:\n\nvec[3]\n\n[1] 3\n\n\nA sequence of consecutive elements can be sliced using the indices of the first element and the last element around the : operator. For example, let us slice elements from the \\(3^{rd}\\) index to the \\(10^{th}\\) element of the vector vec:\n\nvec[3:10]\n\n[1]  3  4  5  6  7  8  9 10\n\n\nWe can slice elements at different indices by putting the indices in an atomic vector within the [] brackets. Let us slice the \\(4^{th}\\), \\(7^{th}\\), and \\(18^{th}\\) elements of the vector vec:\n\nvec[c(4,7,18)]\n\n[1]  4  7 18\n\n\nWe can slice consecutive elements, and non-consecutive elements simultaneously. Let us slice the elements from the \\(4^{th}\\) index to the \\(9^{th}\\) index and the \\(30^{th}\\) and \\(36^{th}\\) element.\n\nvec[c(4:9,30,36)]\n\n[1]  4  5  6  7  8  9 30 36\n\n\n\n\n11.1.1.2 Slicing using a logical atomic vector\nAn atomic vector can be sliced using a logical atomic vector of the same length. The logical atomic vector will have TRUE values corresponding to the indices where the element is to be selected, and FALSE where the element is to be discarded. See the example below.\n\nvec &lt;- 1:5\nvec[c(TRUE, FALSE, FALSE, TRUE, FALSE)]\n\n[1] 1 4\n\n\n\n\n\n11.1.2 Removing elements from atomic vector\nElements can be removed from the vector using the negative sign within [] brackets.\nRemove the 2nd element from the vector:\n\nvec &lt;- 1:5\nvec[-2]\n\n[1] 1 3 4 5\n\n\nIf multiple elements need to be removed, the indices of the elements to be removed can be given as an atomic vector.\nRemove elements 2 to 6 and element 10 from the vector:\n\nvec &lt;- 1:20\nvec[-c(2:6, 10)]\n\n [1]  1  7  8  9 11 12 13 14 15 16 17 18 19 20\n\n\nExample: USA’s GDP per capita from 1960 to 2021 is given by the vector G in the code chunk below. The values are arranged in ascending order of the year, i.e., the first value is for 1960, the second value is for 1961, and so on. Store the years in which the GDP per capita of the US increased by more than 10%, in a vector.\n\nG = c(3007, 3067, 3244, 3375,3574, 3828, 4146, 4336, 4696, 5032,5234,5609,6094,6726,7226,7801,8592,9453,10565,11674,12575,13976,14434,15544,17121,18237,19071,20039,21417,22857,23889,24342,25419,26387,27695,28691,29968,31459,32854,34515,36330,37134,37998,39490,41725,44123,46302,48050,48570,47195,48651,50066,51784,53291,55124,56763,57867,59915,62805,65095,63028,69288)\n\n\nyears &lt;- c()\nfor (i in 1:(length(G) - 1)) {\n  diff = (G[i+1] - G[i]) / G[i]\n  if (diff &gt; 0.1) years &lt;- c(years, 1960 + i)\n}\nprint(years)\n\n[1] 1973 1976 1977 1978 1979 1981 1984\n\n\n\n\n11.1.3 Element-wise operations on atomic vectors\nWhen we use arithmetic operators like +, -, *, etc., or comparison operators like &gt;, &gt;=, ==, etc., between atomic vectors, then these operators are applied element-wise on the elements of the respective atomic vectors with the same index. Consider the examples below.\n\nvec1 &lt;- 1:4\nvec2 &lt;- 1:4\nvec1 + vec2\n\n[1] 2 4 6 8\n\n\n\nvec1 &gt; vec2\n\n[1] FALSE FALSE FALSE FALSE\n\n\nIt is highly recommended that these operators be applied on atomic vectors of the same length. Otherwise, the vector of the smaller length will broadcast (or repeat itself) to match the length of the larger vector. A warning will be returned if the length of the longer vector is not a multiple of the length of the shorter vector. Broadcasting may be difficult to interpret, especially when arithmetic operators are being applied on more than 2 atomic vectors of different lengths.\nIf an operator is applied between an atomic vector and a scalar, then the operation is performed on each element of the atomic vector and the scalar. See the examples below.\n\nvec1*4\n\n[1]  4  8 12 16\n\n\n\nvec1 &gt; 2\n\n[1] FALSE FALSE  TRUE  TRUE\n\n\nSuppose, we wish to slice all elements from the object vec that are greater than 2. Here is one approach to do it. We will apply the &gt; operator between vec and 2 to obtain a logical vector that is TRUE on indices where the condition is satisfied, and FALSE otherwise. We will then use this logical vector to slice vec. Below is the code.\n\nvec1[vec1 &gt; 2]\n\n[1] 3 4\n\n\nNow, solve the previous example without using a for loop.\n\n\n11.1.4 The seq() function\nThe seq() function is used to generate an atomic vector consisting of a sequence of integers with a constant gap. For example, the code below generates a sequence of integers starting from 20 upto 60 with gaps of 5.\n\nseq(20, 60, 5)\n\n[1] 20 25 30 35 40 45 50 55 60\n\n\n\n\n11.1.5 The rep() function\nThe rep() function is used to repeat an object a fixed number of times.\n\nrep(4, 10)\n\n [1] 4 4 4 4 4 4 4 4 4 4\n\n\n\nrep(c(2, 3), 10)\n\n [1] 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3\n\n\n\n\n11.1.6 The which() function\nThe which() function is used to find the indices of TRUE elements in a logical atomic vector.\n\nvec &lt;- c(8, 3, 4, 7, 9, 7, 5)\n\n\nwhich(vec == 8)\n\n[1] 1\n\n\nIn the above code, a logical vector is being created with vec == 8, and the which() function is returning the indices of the TRUE elements.\nThe index of the maximum and minimum values can be found using which.max() and which.min() respectively. In case of multple maximum or minimum elements, the smallest index is returned.\n\nwhich.max(vec)\n\n[1] 5\n\n\n\nwhich.min(vec)\n\n[1] 2\n\n\n\n\n11.1.7 Practice exercise 1\nBelow is a vector consisting of responses to the question: “At what age do you think you will marry?” from students of the STAT303-1 Fall 2022 class.\n\nexp_marriage_age &lt;- c('24','30','28','29','30','27','26','28','30+','26','28','30','30','30','probably never','30','25','25','30','28','30+ ','30','25','28','28','25','25','27','28','30','30','35','26','28','27','27','30','25','30','26','32','27','26','27','26','28','37','28','28','28','35','28','27','28','26','28','26','30','27','30','28','25','26','28','35','29','27','27','30','24','25','29','27','33','30','30','25','26','30','32','26','30','30','I wont','25','27','27','25','27','27','32','26','25','never','28','33','28','35','25','30','29','30','31','28','28','30','40','30','28','30','27','by 30','28','27','28','30-35','35','30','30','never','30','35','28','31','30','27','33','32','27','27','26','N/A','25','26','29','28','34','26','24','28','30','120','25','33','27','28','32','30','26','30','30','28','27','27','27','27','27','27','28','30','30','30','28','30','28','30','30','28','28','30','27','30','28','25','never','69','28','28','33','30','28','28','26','30','26','27','30','25','Never','27','27','25')\n\n\n11.1.7.1 Cleaning data\nRemove the elements that are not integers - such as ‘probably never’, ‘30+’, etc. Convert the reamining elements to integer. What is the length of the new vector?\n\nnew_vector &lt;- as.integer(exp_marriage_age)\n\nWarning: NAs introduced by coercion\n\nnumeric_values &lt;- new_vector[!is.na(new_vector)]\nlength(numeric_values)\n\n[1] 181\n\n\n\n\n11.1.7.2 Capping unreasonably high values\nCap the values greater than 80 to 80, in the clean vector obtained above. What is the mean age when people expect to marry in the new vector?\n\nnumeric_values[numeric_values &gt; 80] &lt;- 80\nmean(numeric_values)\n\n[1] 28.9558\n\n\n\n\n11.1.7.3 People marrying at 30 or more\nDetermine the percentage of people who expect to marry at an age of 30 or more.\n\nsum(numeric_values &gt;= 30) / length(numeric_values)\n\n[1] 0.3701657\n\n\n\n\n\n11.1.8 The sapply() function\nThe sapply() function is used to apply a function on all the elements of a list, atomic vector or matrix.\nFor example, consider the vector below:\n\nvec &lt;- 1:6\nvec\n\n[1] 1 2 3 4 5 6\n\n\nSuppose, we wish to square each element of the vector. We can use the sapply() function as below:\n\nsapply(vec, FUN = function(x) x**2)\n\n[1]  1  4  9 16 25 36\n\n\n\n\n11.1.9 Practice exercise 2\nWrite a function that identifies if a word is a palindrome (A palindrome is a word that reads the same both backwards and forwards, for example, peep, rotator, madam, etc.). Apply the function to the vector of words below to count the number of palindrome words.\n\nwords_vec &lt;- c('fat', 'civic', 'radar', 'mountain', 'noon','papa')\n\n\npalindrome &lt;- function(word) {\n  for (i in 1:as.integer(nchar(word)/2)) {\n    if (substr(word, i, i) != substr(word, nchar(word) - (i-1), nchar(word) - (i-1))) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\nsum(sapply(words_vec, palindrome))\n\n[1] 3",
    "crumbs": [
      "R",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>R: Data structures</span>"
    ]
  },
  {
    "objectID": "robjects.html#matrix-2d-homogeneous",
    "href": "robjects.html#matrix-2d-homogeneous",
    "title": "11  R: Data structures",
    "section": "11.2 Matrix ((2D, Homogeneous))",
    "text": "11.2 Matrix ((2D, Homogeneous))\nMatrices are two-dimensional arrays. The in-built function matrix() is used to define a matrix. An atomic vector can be organized as a matrix by specifying the number of rows and columns.\nFor example, let us define a 2x3 matrix (2 rows and 3 columns) consisting of consecutive integers fro1 1 to 6.\n\nmat &lt;- matrix(1:6, 2, 3)\nmat\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n\nNote that the integers fill up column-wise in the matrix. If we wish to fill-up the matrix by row, we can use the byrow argument.\n\nmat &lt;- matrix(1:6, 2, 3, byrow = TRUE)\nmat\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n\n\nThe functions nrow() and ncol() can be used to get the number of rows and columns of the matrix respectively.\n\nnrow(mat)\n\n[1] 2\n\n\n\nncol(mat)\n\n[1] 3\n\n\nMatrices can be sliced using the indices of row and column separated by a , in box brackets. Suppose we wish to get the element in the \\(2^{nd}\\) row and \\(3^{rd}\\) column of the matrix:\n\nmat[2, 3]\n\n[1] 6\n\n\nFor selecting all rows or columns of a matrix, the index for the row/column can be left blank. Suppose we wish to get all the elements of the \\(1^{st}\\) of the matrix:\n\nmat[1, ]\n\n[1] 1 2 3\n\n\nRow and columns of the matrix can be sliced using the : operator. Suppose we want to select a sub-matrix that has elements in the first two rows and columns 2 and 3 of the matrix mat:\n\nmat[1:2, 2:3]\n\n     [,1] [,2]\n[1,]    2    3\n[2,]    5    6\n\n\nElement-wise arithmetic operations can be performed between 2 matrices of the same shape.\n\nmat1 &lt;- matrix(1:6, 2, 3)\nmat2 &lt;- matrix(c(9, 2, 6, 5, 1, 0), 2, 3)\nmat1 + mat2\n\n     [,1] [,2] [,3]\n[1,]   10    9    6\n[2,]    4    9    6\n\n\n\nmat1 - mat2\n\n     [,1] [,2] [,3]\n[1,]   -8   -3    4\n[2,]    0   -1    6\n\n\nSuppose we need to sum up all the rows of the matrix. We can do it using a for loop as follows:\n\nrow_sum &lt;- c(0,0)\nfor (i in 1:nrow(mat)) {\n  for (j in 1:ncol(mat)) {\n    row_sum[i] &lt;- row_sum[i] + mat[i, j]\n  }\n}\nrow_sum\n\n[1]  6 15\n\n\nObserve that in the above for loop, elements of each row are added one at a time. We can add all the elements of a row simultaneously using the sum() function. This will reduce a for loop from the above code:\n\nrow_sum &lt;- c(0,0)\nfor (i in 1:nrow(mat)){\n  row_sum[i] &lt;- sum(mat[i,])\n}\nrow_sum\n\n[1]  6 15\n\n\nIn the above code, we sum up all the elements of the row simultaneously. However, we still need to sum up the elements of each row one at a time.\n\n11.2.1 The apply() function\nThe apply() function can be used to apply a function on each row or column of a matrix. Thus, this function helps avoid the user to write a for() loop in R to iterate over all the rows and columns of the matrix. Note that each row / column of a matrix is an atomic vector. Thus, vectorized computations can be performed within the function, resulting in efficient computations.\nNote that the apply functions use a for() loop under-the-hood, and thus the function will be applied sequentially on each row / column of the matrix. However, as the implementation of the for() loop is in C, it is likely to be faster than a for() loop in R.\nLet us use the apply() function to sum up all the rows of the matrix mat.\n\napply(mat, 1, sum)\n\n[1]  6 15\n\n\nLet us compare the time taken to sum up rows of a matrix using a for loop with the time taken using the apply() function.\n\noptions(digits.secs = 6)\nstart.time &lt;- Sys.time()\nrow_sum&lt;-c(0, 0)\nfor (i in 1:nrow(mat)){\n  row_sum[i] &lt;- sum(mat[i,])\n}\nrow_sum\n\n[1]  6 15\n\nend.time &lt;- Sys.time()\ntime.taken &lt;- end.time - start.time\ntime.taken\n\nTime difference of 0.003419876 secs\n\n\n\nstart.time &lt;- Sys.time()\napply(mat, 1, sum)\n\n[1]  6 15\n\nend.time &lt;- Sys.time()\ntime.taken &lt;- end.time - start.time\ntime.taken\n\nTime difference of 0.001199007 secs\n\n\nObserve that the apply() function takes much lesser time to sum up all the rows of the matrix as compared to the for loop.\nRecall the earlier example where we computed year’s in which the increase in GDP per capita was more than 10%. Let us use matrices to solve the problem. We’ll also compare the time it takes using a matrix with the time it takes using for loops.\n\nstart.time &lt;- Sys.time()\n\n#Let the first column of the matrix be the GDP of all the years except 1960, and the second column be the GDP of all the years except 2021.\nGDP_mat &lt;- matrix(c(G[-1], G[-length(G)]), length(G) - 1, 2)\n\n#The percent increase in GDP can be computed by performing computations using the 2 columns of the matrix\ninc &lt;- (GDP_mat[,1] - GDP_mat[,2]) / GDP_mat[,2]\nyears &lt;- 1961:2021\nyears &lt;- years[inc &gt; 0.1]\nyears\n\n[1] 1973 1976 1977 1978 1979 1981 1984\n\nend.time &lt;- Sys.time()\ntime.taken &lt;- end.time - start.time\ntime.taken\n\nTime difference of 0.002620935 secs\n\n\nWithout matrices, the time taken to perform the same computation is measured with the code below.\n\nstart.time &lt;- Sys.time()\nyears &lt;- c()\nfor (i in 1:(length(G) - 1)) {\n  diff = (G[i+1] - G[i]) / G[i]\n  if (diff &gt; 0.1) years &lt;- c(years, 1960 + i)\n}\nprint(years)\n\n[1] 1973 1976 1977 1978 1979 1981 1984\n\n#print(proc.time()[3]-start_time)\nend.time &lt;- Sys.time()\ntime.taken &lt;- end.time - start.time\ntime.taken\n\nTime difference of 0.005331039 secs\n\n\nObserve that matrices reduce the execution time of the code as computations are performed simultaneously, in contrast to a for loop where computations are performed one at a time.\nSometimes, the computations on rows / columns of a matrix are not straighforward and we may need to use the apply() function to apply a function on each row / column of a matrix.\nExample: Find the maximum GDP per capita of the US in each of the 5 year periods starting from 1961-1965, and upto 2015-2020.\n\nGDP_5year &lt;- matrix(G[-c(1, length(G))], 12, 5, byrow = TRUE)\nGDP_max_5year &lt;- apply(GDP_5year, 1, max)\n\nIn the above code, we applied the in-built function max on all the rows. Sometimes, an in-built function may not be available for the computations to be performed. In such as case, we can write our own user-defined function within the apply() function. See the example below.\nExample: Find the range (max-min) of GDP per capita of the US in each of the 5 year periods starting from 1961-1965, and upto 2015-2020.\n\nGDP_5year &lt;- matrix(G[-c(1, length(G))], 12, 5, byrow = TRUE)\nGDP_range_5year &lt;- apply(GDP_5year, 1, function(x) max(x) - min(x))\nGDP_range_5year\n\n [1]  761 1088 2192 3983 4261 4818 4349 6362 6989 2349 6697 7228\n\n\nIn the code above we applied a user-defined function on each row of the matrix. However, if the function has multiple lines, it may be inconvenient to write the function within the apply() function. In that case, we can define the function outside the apply() function.\nExample: Find the five year periods starting from 1961-1965, and upto 2016-2020, during which the GDP per capita decreased as compared to the previous year.\n\nGDP_inc &lt;- function (GDP_5yr) {\n  dec &lt;- 0\n  for (i in 1:4) {\n    if(GDP_5yr[i+1] &lt; GDP_5yr[i]) dec &lt;- 1\n  }\n  return(dec)\n}\n\nGDP_5year_mat &lt;- matrix(G[-c(1,length(G))], 12, 5, byrow = TRUE)\nyears_inc_dec &lt;- apply(GDP_5year_mat, 1, GDP_inc)\nfive_year_periods &lt;- seq(1960, 2015, 5)\nprint(\"Five year periods in which the GDP per capita decreased are those starting from the years:\")\n\n[1] \"Five year periods in which the GDP per capita decreased are those starting from the years:\"\n\nprint(five_year_periods[years_inc_dec == 1] + 1)\n\n[1] 2006 2016\n\n\nThe 5 year periods during which the GDP per capita decreased as compared to the previous year are 2006-2010, and 2016-2020.\n\n\n11.2.2 Practice exercise 3\nFind the 5 year period in which the difference of the maximum GDP per capita and the minimum GDP per capita as a percentage of the minimum GDP per capita was the highest.\nSolution:\n\nfive_year_periods[which.max(apply(GDP_5year_mat, 1, function(x) (max(x) - min(x)) / min(x)))] + 1\n\n[1] 1976\n\n\n\nprint(\"During 1976-1980 the difference of the maximum GDP per capita and the minimum GDP per capita as a percentage of the minimum GDP per capita was the highest.\")\n\n[1] \"During 1976-1980 the difference of the maximum GDP per capita and the minimum GDP per capita as a percentage of the minimum GDP per capita was the highest.\"\n\n\n\n\n11.2.3 Practice exercise 4\nThe object country_names is an atomic vector consisting of country names. The object coordinates_capital_cities is a matrix consisting of the latitude-longitude pair of the capital city of the respective country. The order of countries in country_names is the same as the order in which their capital city coordinates (latitude-longitude) appear in the matrix coordinates_capital_cities.\nDownload the file capital_cities.csv from here. Make sure the file is in your current working directory. Execute the following code to obtain the objects coordinates_capital_cities and country_names.\n\ncapital_cities &lt;- read.csv('capital_cities.csv')\ncoordinates_capital_cities &lt;- as.matrix(capital_cities[,c(3, 4)])\ncountry_names &lt;- capital_cities[,1]\n\n\n11.2.3.1 Country with capital closest to DC\nPrint the name and coordinates of the country with the capital city closest to the US capital - Washington DC.\nNote that:\n\nThe Country Name for US is given as United States in the data.\nThe ‘closeness’ of capital cities from the US capital is based on the Euclidean distance of their coordinates to those of the US capital.\n\nHint:\n\nGet the coordinates of Washington DC from coordinates_capital_cities. The row that contains the coordinates of DC will have the same index as United States has in the vector country_names\nCreate a matrix that has coordinates of Washington DC in each row, and has the same number of rows as the matrix coordinates_capital_cities.\nSubtract coordinates_capital_cities from the matrix created in (2). Element-wise subtraction will occur between the matrices.\nUse the apply() function on the matrix obtained above to find the Euclidean distance of Washington DC from the rest of the capital cities.\nUsing the distances obtained above, find the country that has the closest capital to DC.\n\n\n\n11.2.3.2 Top 10 countries closest to DC\n\nPrint the names of the countries of the top 10 capital cities closest to the US capital - Washington DC.\nCreate and print a matrix containing the coordinates of the top 10 capital cities closest to Washington DC.\n\n\nUS_index = which(country_names == 'United States')\ndc_coord &lt;- coordinates_capital_cities[US_index,]\ndistances_to_DC &lt;- apply(coordinates_capital_cities, 1, \n                  function(city_coord) sqrt(sum((city_coord - dc_coord)**2)))\nnum_of_countries &lt;- length(country_names)\ndistances_to_DC_matrix &lt;- cbind(1:num_of_countries, distances_to_DC)\nsorted &lt;- distances_to_DC_matrix[order(distances_to_DC_matrix[,2]),]\n\nTop 10 countries with capitals closest to Washington DC are the following:\n\ncountry_names[sorted[3:12, 1]]\n\nThe coordinates of the top 10 capital cities closest to Washington DC are:\n\ncoordinates_capital_cities[sorted[3:12, 1],]",
    "crumbs": [
      "R",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>R: Data structures</span>"
    ]
  },
  {
    "objectID": "robjects.html#lists-1d-heterogeneous",
    "href": "robjects.html#lists-1d-heterogeneous",
    "title": "11  R: Data structures",
    "section": "11.3 Lists (1D, Heterogeneous)",
    "text": "11.3 Lists (1D, Heterogeneous)\nAtomic vectors and matrices are quite useful in R. However, a constraint with them is that they can only contain objects of the same datatype. For example, an atomic vector can contain all numeric objects, all character objects, or all logical objects, but not a mixture of multiple types of objects. Thus, there arises a need for a list data structure that can store objects of multiple datatypes.\nA list can be defined using the list() function. For example, consider the list below:\n\nlist_ex &lt;- list(1, \"apple\", TRUE, list(\"another list\", TRUE))\n\nThe list list_ex consists of objects of mutiple datatypes. The length of the list can be obtained using the length()function:\n\nlength(list_ex)\n\n[1] 4\n\n\nA list is an ordered collection of objects. Each object of the list is associated with an index that corresponds to its order of occurrence in the list.\nA single element can be sliced from the list by specifying its index within the [[]] operator. Let us slice the \\(2^{nd}\\) element of the list list_ex:\n\nlist_ex[[2]]\n\n[1] \"apple\"\n\n\nMultiple elements can be sliced from the list by specifying the indices as an atomic vector within the [] operator. Let us slice the \\(1^{st}\\) and \\(3^{rd}\\) elements from the list list_ex:\n\nlist_ex[c(1,3)]\n\n[[1]]\n[1] 1\n\n[[2]]\n[1] TRUE\n\n\nElements of a list can be named using the names() function. Let us name the elements of list_ex:\n\nnames(list_ex) &lt;- c(\"Name1\", \"second_name\", \"3rd_element\", \"Number 4\")\n\nA single element can be sliced from the list using the name of the element with the $ operator. Let us slice the element named as second_name from the list list_ex:\n\nlist_ex$second_name\n\n[1] \"apple\"\n\n\nNote that if the name of the element does not begin with a letter or has special characters such as a space, then it should be specified within single quotes after the $ operator. For example, let us slice the element named as 3rd_element from the list list_ex:\n\nlist_ex$`3rd_element`\n\n[1] TRUE\n\n\nNames of elements of a list can also be specified while defining the list, as in the example below:\n\nlist_ex_with_names &lt;- list(movie = 'The Dark Knight', IMDB_rating = 9)\n\nA list can be converted to an atomic vector using the unlist() function. For example, let us convert the list list_ex to a vector:\n\nunlist(list_ex)\n\n         Name1    second_name    3rd_element      Number 41      Number 42 \n           \"1\"        \"apple\"         \"TRUE\" \"another list\"         \"TRUE\" \n\n\nSince a vector can contain objects of a single datatype, note that all objects have been converted to the character datatype in the vector above.\n\n11.3.1 Practice exercise 5\nDownload the dataset movies.json. Execute the following code to read the data into the object movies:\n\nlibrary(rjson)\nmovies&lt;-fromJSON(file = 'movies.json')\n\n\n11.3.1.1 \nWhat is the datatype of the object movies?\n\nclass(movies)\n\nThe datatype of the object movies is list.\n\n\n11.3.1.2 \nCount the number movies having a negative profit, i.e., their production budget is higher than their worldwide gross.\nIgnore the movies that:\n\nHave missing values of production budget or worldwide gross. Use the is.null() function to identify missing or NULL values.\nHave a zero worldwide gross (A zero worldwide gross is probably an incorrect value).\n\n\nnegative_profit &lt;- c()\ncount &lt;- 0\nfor (i in 1:length(movies)) {\n  pb &lt;- movies[[i]]$`Production Budget`\n  wg &lt;- movies[[i]]$`Worldwide Gross`\n  if (!(is.null(pb) | is.null(wg))) {\n    if (pb &gt; wg & wg &gt; 0) {\n      count &lt;- count + 1\n    }\n  }\n}\nprint(paste(\"Number of movies with negative profit =\", count))\n\n\n\n\n11.3.2 The lapply() function\nThe lapply() function is used to apply a function on each element of a list, and returns a list of the same length.\nFor example, consider the list below:\n\nlist_ex &lt;- list(1, \"apple\", TRUE, list(\"another list\", TRUE))\n\nLet us use the lapply() function to find the class of each element of the list list_ex:\n\nlapply(list_ex, function(x) class(x))\n\n[[1]]\n[1] \"numeric\"\n\n[[2]]\n[1] \"character\"\n\n[[3]]\n[1] \"logical\"\n\n[[4]]\n[1] \"list\"\n\n\n\n\n11.3.3 Practice exercise 6\nSolve practice exercise 5 without using a for loop. Use the lapply() function.\n\nprofit &lt;- lapply(movies, function(x) x$`Worldwide Gross`-x$`Production Budget`)\npositive_wg &lt;- lapply(movies, function(x) x$`Worldwide Gross` &gt; 0)\nsum(profit &lt; 0 & positive_wg &gt; 0, na.rm = TRUE)",
    "crumbs": [
      "R",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>R: Data structures</span>"
    ]
  },
  {
    "objectID": "robjects.html#data-frames-2d-heterogeneous",
    "href": "robjects.html#data-frames-2d-heterogeneous",
    "title": "11  R: Data structures",
    "section": "11.4 Data Frames (2D, Heterogeneous)",
    "text": "11.4 Data Frames (2D, Heterogeneous)\nA data frame is a table-like structure where each column is a vector. Unlike matrices, columns can have different types.\n\n11.4.1 Creating data Frames\n\ndf &lt;- data.frame(Name=c(\"Alice\", \"Bob\", \"Charlie\"),\n                 Age=c(25, 30, 35),\n                 Score=c(90, 85, 88))\n\nprint(df)\n\n     Name Age Score\n1   Alice  25    90\n2     Bob  30    85\n3 Charlie  35    88\n\n\n\n\n11.4.2 Accessing Data Frame Elements\n\ndf$Name   # Accessing a column\n\n[1] \"Alice\"   \"Bob\"     \"Charlie\"\n\ndf[2, ]   # Second row\n\n  Name Age Score\n2  Bob  30    85\n\ndf[ , \"Age\"]  # Age column\n\n[1] 25 30 35\n\ndf[1:2, c(\"Name\", \"Score\")]  # Subset\n\n   Name Score\n1 Alice    90\n2   Bob    85",
    "crumbs": [
      "R",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>R: Data structures</span>"
    ]
  },
  {
    "objectID": "template_A01_WI25.html",
    "href": "template_A01_WI25.html",
    "title": "Appendix A — Assignment 1",
    "section": "",
    "text": "Instructions",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Assignment 1</span>"
    ]
  },
  {
    "objectID": "template_A01_WI25.html#instructions",
    "href": "template_A01_WI25.html#instructions",
    "title": "Appendix A — Assignment 1",
    "section": "",
    "text": "Write your name on the assignment.\nWrite your code in the Code cells of the template provided to write solutions for the assignment. Do not open a new notebook, and work from scratch. Ensure that the solution is written neatly enough to understand and grade.\nUse Quarto to print the .ipynb file as HTML. You will need to open the command prompt, navigate to the directory containing the file, and use the command: quarto render filename.ipynb --to html. Submit the HTML file.\nYou may talk to a friend, discuss the questions and potential directions for solving them. However, you need to write your own solutions and code separately, and not as a group activity. Do not use AI to solve the problems.\nIf your document is not clean and organized, you can lose up to 2 points:\n\nMust be an HTML file rendered using Quarto.\nThere aren’t excessively long outputs of extraneous information (e.g. no printouts of unnecessary results without good reason, there aren’t long printouts of which iteration a loop is on, there aren’t long sections of commented-out code, etc.). There is no piece of unnecessary / redundant code, and no unnecessary / redundant text\nThe code follows the python style guide for naming variables, spaces, indentation, etc.\nThe code should be commented and clearly written with intuitive variable names. For example, use variable names such as number_input, factor, hours, instead of a,b,xyz, etc.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Assignment 1</span>"
    ]
  },
  {
    "objectID": "template_A01_WI25.html#question-1-4-points",
    "href": "template_A01_WI25.html#question-1-4-points",
    "title": "Appendix A — Assignment 1",
    "section": "A.1 Question 1 (4 points)",
    "text": "A.1 Question 1 (4 points)\n\nCreate a a variable called var_float that contains a decimal number.\nStore a sentence as var_sent that reads exactly as follows: “The square of {} is {}.” Where the first {} is your var_float and the second {} is the square of that variable. Print your sentence.\nPrint the output of using the count method to determine how many spaces are in var_sent.\nRound your var_float to 0 decimal places and convert to an integer. Store this as var_int and print the type to verify this was done correctly.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Assignment 1</span>"
    ]
  },
  {
    "objectID": "template_A01_WI25.html#question-2-3-points",
    "href": "template_A01_WI25.html#question-2-3-points",
    "title": "Appendix A — Assignment 1",
    "section": "A.2 Question 2 (3 points)",
    "text": "A.2 Question 2 (3 points)\nHave a user input 2 Booleans (hint: must be type bool). In a single print line, using only and, or, not functions, have the output return True if both variables are the same, and False is they are different.\nClarification: 1) cannot use conditional if statements 2) this must be capable of printing the correct output for any possible booleans the user could enter, not just the one example that your html will show.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Assignment 1</span>"
    ]
  },
  {
    "objectID": "template_A01_WI25.html#question-3-6-points",
    "href": "template_A01_WI25.html#question-3-6-points",
    "title": "Appendix A — Assignment 1",
    "section": "A.3 Question 3 (6 points)",
    "text": "A.3 Question 3 (6 points)\nAt Northwestern, email addresses are classified as follows:\n\nStudent email addresses end with @u.northwestern.edu.\nProfessor email addresses end with @northwestern.edu (but not @u.northwestern.edu).\n\nWrite a Python program that: 1. Asks the user how many email addresses they will enter. 2. Prompts the user to input each email address. 3. After all email addresses are entered: - Print all professor email addresses under the heading \"Professor Emails:\". - Print all student email addresses under the heading \"Student Emails:\". - If no professor or student emails were entered, print \"None\" under the respective heading.\n\nA.3.1 Requirements:\n\nDo not use lists or other advanced data structures, since we have not covered them yet.\nUse only basic string operations and loops.\nThe program must handle all cases, regardless of uppercase or lowercase in the email addresses.\nTrim any leading or trailing whitespace in the user input before classifying the email.\n\nExample Run:\nHow many email addresses will you be entering? 3  Enter an email address: lshi@northwestern.edu  Enter an email address: jackyu@u.northwestern.edu  Enter an email address: Alexa@u.northwestern.edu \nOutput:\nProfessor Emails:  lshi@northwestern.edu \nStudent Emails:  jackyu@u.northwestern.edu  alexa@u.northwestern.edu",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Assignment 1</span>"
    ]
  },
  {
    "objectID": "template_A01_WI25.html#question-4-3-points",
    "href": "template_A01_WI25.html#question-4-3-points",
    "title": "Appendix A — Assignment 1",
    "section": "A.4 Question 4 (3 points)",
    "text": "A.4 Question 4 (3 points)\nWrite a tip calculator program that asks the user for the price of the meal and the percent tip they want to leave. Then print a sentence that displays both the tip amount and total bill. Example if meal price is 25 dollars and tip is 15 percent:\n                               Your tip amount is $3.75 and your total bill is $28.75.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Assignment 1</span>"
    ]
  },
  {
    "objectID": "template_A01_WI25.html#question-5-3-points",
    "href": "template_A01_WI25.html#question-5-3-points",
    "title": "Appendix A — Assignment 1",
    "section": "A.5 Question 5 (3 points)",
    "text": "A.5 Question 5 (3 points)\nWrite a program that asks the user for a number of seconds and prints out how many minutes and seconds that is. Example:\n                                200 seconds is 3 minutes and 20 seconds.\n                                           \nUse only two lines of code for this question: one line for the input and one line for the print.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Assignment 1</span>"
    ]
  },
  {
    "objectID": "template_A01_WI25.html#question-6-4-points",
    "href": "template_A01_WI25.html#question-6-4-points",
    "title": "Appendix A — Assignment 1",
    "section": "A.6 Question 6 (4 points)",
    "text": "A.6 Question 6 (4 points)\nWrite a program that asks the user to enter two numbers. Have the program return one of the following messages depending on which criteria is met.\n“num1 is greater than num2”; “num 1 is less than num2”; “num1 is equal to num2”; where num1 and num2 are the user inputed values.\nShow the output of the program with any two numbers of your choice.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Assignment 1</span>"
    ]
  },
  {
    "objectID": "template_A01_WI25.html#question-7-4-points",
    "href": "template_A01_WI25.html#question-7-4-points",
    "title": "Appendix A — Assignment 1",
    "section": "A.7 Question 7 (4 points)",
    "text": "A.7 Question 7 (4 points)\n\nUse a single if-elif-else statement to print the smallest of 3 user defined numbers. Show the output of the program with any three numbers of your choice.\nUse a nested conditional statement to print the smallest of 3 user defined numbers. Show the output of the program with any three numbers of your choice.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Assignment 1</span>"
    ]
  },
  {
    "objectID": "template_A01_WI25.html#question-8-6-points",
    "href": "template_A01_WI25.html#question-8-6-points",
    "title": "Appendix A — Assignment 1",
    "section": "A.8 Question 8 (6 points)",
    "text": "A.8 Question 8 (6 points)\nWrite a program that asks the user to enter either rock, paper, or scissors. Use a conditional statement to determine if the user wins, loses, or ties the computer at the game “Rock, Paper, Scissors”. Note: rock beats scissors; scissors beats paper; paper beats rock\nPrint a meaningful sentence that includes the winner, the computer’s choice, and the user’s choice.\n\nHandle case sensitivity (example: if the user enters Rock, it will still run).\nIf the user enters a word other than one of the choices, print “Invalid choice.”.\nShow the output of the program when the user enters Rock (capitalized)\n\n\n# starter code to generate a random choice of rock, paper, scissors\nimport random as rm\ncomp_choice = rm.choice(['rock', 'paper', 'scissors'])\n\n# your solution in this code chunk below",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Assignment 1</span>"
    ]
  },
  {
    "objectID": "template_A01_WI25.html#bonus-6-points",
    "href": "template_A01_WI25.html#bonus-6-points",
    "title": "Appendix A — Assignment 1",
    "section": "A.9 Bonus (6 points)",
    "text": "A.9 Bonus (6 points)\nFor all questions in this assignment that involve accepting user input:\n\nUse a try-except block to handle cases where the user enters invalid input.\nImplement a loop to repeatedly prompt the user for input until they provide a valid value, allowing the program to proceed.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Assignment 1</span>"
    ]
  },
  {
    "objectID": "template_A02_WI25.html",
    "href": "template_A02_WI25.html",
    "title": "Appendix B — Assignment 2",
    "section": "",
    "text": "Instructions",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Assignment 2</span>"
    ]
  },
  {
    "objectID": "template_A02_WI25.html#instructions",
    "href": "template_A02_WI25.html#instructions",
    "title": "Appendix B — Assignment 2",
    "section": "",
    "text": "Write your name on the assignment.\nWrite your code in the Code cells of the template provided to write solutions for the assignment. Do not open a new notebook, and work from scratch. Ensure that the solution is written neatly enough to understand and grade.\nUse Quarto to print the .ipynb file as HTML. You will need to open the command prompt, navigate to the directory containing the file, and use the command: quarto render filename.ipynb --to html. Submit the HTML file.\nYou may talk to a friend, discuss the questions and potential directions for solving them. However, you need to write your own solutions and code separately, and not as a group activity. Do not use AI to solve the problems.\nThere are 2 points for cleanliness and organization. The breakdown is as follows:\n\nMust be an HTML file rendered using Quarto.\nThere aren’t excessively long outputs of extraneous information (e.g. no printouts of unnecessary results without good reason, there aren’t long printouts of which iteration a loop is on, there aren’t long sections of commented-out code, etc.). There is no piece of unnecessary / redundant code, and no unnecessary / redundant text\nThe code follows the python style guide for naming variables, spaces, indentation, etc.\nThe code should be commented and clearly written with intuitive variable names. For example, use variable names such as number_input, factor, hours, instead of a,b,xyz, etc.\n\n\n\nB.0.1 Question 1 (3 points)\n\nWrite a program that counts down from 5 and then prints the message “Go”.\nWrite a program that asks the user for an integer, then counts down from that integer and then prints the message “Go”. Use a try-except to ensure the user entered an integer. If it is not an integer, return the message “You must enter an integer”. Show the output of the program if the user inputs 3.\nCopy and modify part b to allow the user to keep entering input until they correctly enter an integer (ie: don’t end after the except). Show the output of the program if the user first inputs 8.9 and then inputs 7.\n\n\n\nB.0.2 Question 2 (2 points)\nPrint a star formation as follows:\n                                         * \n                                         * * \n                                         * * * \n                                         * * * * \n                                         \nAsk the user to input the height of the formation first. For example, 4 should return the formation above. Show the output of the program if the user inputs 5.\n\n\nB.0.3 Question 3 (6 points)\n\nWrite a program where you play 3 “Rock, Paper, Scissors” games against the computer. Simulate a random choice for the computer each game and ask the user to enter either rock, paper, or scissors. Print the number of times the user won out of 3 games. Show the output of the program after playing the game.\n\nRecall: rock beats scissors; scissors beats paper; paper beats rock.\nExample:\n                                \"You won &lt;num_win&gt; out of 3 games.\"\n\n# import the random function and name the alias rm\n\n# code to generate a random choice of rock, paper, scissors for the computer\ncomp_choice = rm.choice(['rock', 'paper', 'scissors'])\n\n\nWrite a program where you play “Rock, Paper, Scissors” games against the computer until you have won 3 games. Simulate a random choice for the computer each game and ask the user to enter either rock, paper, or scissors. Print the number of games it took to win 3 times. Show the output of the program after playing the game.\n\nExample:\n                                \"You won 3 out of &lt;num_games&gt; games.\"\n\n\nB.0.4 Question 4 (6 points)\n\nWrite a program (loop) that prints all the factors of a positive integer input by the user. A factor is any positive integer that divides the number and leaves no remainder. Show the output of the program if the user inputs 24.\n\nExample: The factors of 8 are 1, 2, 4, 8.\n\nWrite a function called number_of_factors that takes an integer and returns how many factors the number has. Run your function with 24 to check if it works.\n\n\n\nB.0.5 Question 5 (6 points)\n\nWrite a program (loop) that identifies whether a positive integer input by the user is prime or not. A prime number is a number whose only divisors are 1 and itself. Show the output when the program is used to check if 89 is prime or not.\nWrite a function that checks if a positive integer is prime or not. It should take one integer input and return a boolean. Run your function with 197 to check if it works.\n\n\n\nB.0.6 Question 6 (4 points)\nWrite a function that calculates the area of a rectangle. The function should have an input for length (in inches) and width (in inches). And have 2 ouputs: the area in terms of square inches and the area in terms of square feet. There are 12 inches in 1 foot. Run your function with a length of 102 inches and width of 60 inches to check if it works.\n\n\nB.0.7 Question 7 (3 points)\nWrite a function that takes a word and a sentence as two string inputs and returns the number of times the word occurs in the sentence as the output.\nRun your function with “sea” and “Sea shells are on the sea shore when the sea is calm.” inputs to check if it works. Your function should work for any word and sentence.\nNote: at this time it does not have to differentiate a distinct word just if it appears in any form. Example: “The sea gives me nausea.” would return 2.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Assignment 2</span>"
    ]
  },
  {
    "objectID": "template_A03_WI25.html",
    "href": "template_A03_WI25.html",
    "title": "Appendix C — Assignment 3",
    "section": "",
    "text": "Instructions",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Assignment 3</span>"
    ]
  },
  {
    "objectID": "template_A03_WI25.html#instructions",
    "href": "template_A03_WI25.html#instructions",
    "title": "Appendix C — Assignment 3",
    "section": "",
    "text": "Write your name on the assignment.\nWrite your code in the Code cells of the template provided to write solutions for the assignment. Do not open a new notebook, and work from scratch. Ensure that the solution is written neatly enough to understand and grade.\nUse Quarto to print the .ipynb file as HTML. You will need to open the command prompt, navigate to the directory containing the file, and use the command: quarto render filename.ipynb --to html. Submit the HTML file.\nYou may talk to a friend, discuss the questions and potential directions for solving them. However, you need to write your own solutions and code separately, and not as a group activity. Do not use AI to solve the problems.\nIf your document is not clean and organized, you can lose up to 2 points:\n\nMust be an HTML file rendered using Quarto.\nThere aren’t excessively long outputs of extraneous information (e.g. no printouts of unnecessary results without good reason, there aren’t long printouts of which iteration a loop is on, there aren’t long sections of commented-out code, etc.). There is no piece of unnecessary / redundant code, and no unnecessary / redundant text\nThe code follows the python style guide for naming variables, spaces, indentation, etc.\nThe code should be commented and clearly written with intuitive variable names. For example, use variable names such as number_input, factor, hours, instead of a,b,xyz, etc.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Assignment 3</span>"
    ]
  },
  {
    "objectID": "template_A03_WI25.html#question-1-5-points",
    "href": "template_A03_WI25.html#question-1-5-points",
    "title": "Appendix C — Assignment 3",
    "section": "C.1 Question 1 (5 points)",
    "text": "C.1 Question 1 (5 points)\n\nCreate a tuple called my_data that contains the following elements: 'dog', 9, True, 2, 8, 'cat', 3\nUnpack only the string elements in my_data. You can store these elements by any variable name of your choice. Print the variables.\nConvert my_data to a list object. Then use indexing in 2 different ways to print the second object in your list. Note: that means you will have the same object (9) being printed out twice.\nUse a loop to remove any elements in my_data that are NOT integers. Print my_data to prove you were successful.\n\nNote: This needs to be a loop that would work even if you changed the elements in my_data.\n\nWrite a function that takes a list of integers as an input and returns both the minimum and maximum value. Store the output of the function when it is run with my_data from part d. Print your stored variables in a sentence to prove you were successful. This sentence should be the only thing printed.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Assignment 3</span>"
    ]
  },
  {
    "objectID": "template_A03_WI25.html#question-2-2-points",
    "href": "template_A03_WI25.html#question-2-2-points",
    "title": "Appendix C — Assignment 3",
    "section": "C.2 Question 2 (2 points)",
    "text": "C.2 Question 2 (2 points)\nCreate a shopping list by asking the user for a grocery item to add to the list object.\nContinue asking the user for items until the user types “done”.\nOnly once the user is “done”, print the grocery list.\nRun your program with at least 3 items added to your list.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Assignment 3</span>"
    ]
  },
  {
    "objectID": "template_A03_WI25.html#question-3-2-points",
    "href": "template_A03_WI25.html#question-3-2-points",
    "title": "Appendix C — Assignment 3",
    "section": "C.3 Question 3 (2 points)",
    "text": "C.3 Question 3 (2 points)\nAsk the user for a grocery item and the price of the item (2 inputs).\nCreate a dictionary where the grocery item is the key and the price is the value.\nContinue asking the user for items and prices until the user types “done”.\nOnly once the user is “done”, print the object.\nRun your program with at least 3 entries.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Assignment 3</span>"
    ]
  },
  {
    "objectID": "template_A03_WI25.html#question-4-2-points",
    "href": "template_A03_WI25.html#question-4-2-points",
    "title": "Appendix C — Assignment 3",
    "section": "C.4 Question 4 (2 points)",
    "text": "C.4 Question 4 (2 points)\nTake a space-separated list of numbers as input from the user and calculate the sum of all the numbers",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Assignment 3</span>"
    ]
  },
  {
    "objectID": "template_A03_WI25.html#question-5-4-points",
    "href": "template_A03_WI25.html#question-5-4-points",
    "title": "Appendix C — Assignment 3",
    "section": "C.5 Question 5 (4 points)",
    "text": "C.5 Question 5 (4 points)\nThe score list below contains the credit score for an individual at the end of the year and the year list contains the corresponding year. ie: at the end of 2010 the individual had a credit score of 680.\n\nscore = [680, 685, 695, 690, 715, 720, 710]\nyear = [2010, 2011, 2012, 2014, 2015, 2016, 2017]\n\n\nC.5.1 Part a (1 point)\nThe information for 2013 is missing. In year, insert the year 2013 between 2012 and 2014. In score, insert the credit score of 2013 as the average of the credit score of 2012 and 2014 (use indexing - never use fixed values if it can be avoided). Print year and score to prove you were successful.\n\n\nC.5.2 Part b (3 points)\nDetermine which year had the largest percentage increase in credit score. Round your percent to 2 decimal places (0.00%).\nFor example, the percent change in 2011 is equal to 100*(685 - 680)/680 = 0.74%.\nThere are MANY ways to accomplish this and you may do so using any techniques we have learned so long as you are using code.\nPrint only the sentence:\n                \"The individual had the largest increase in {year} of {change} percent.\"\n                \nFor example if the largest increase happened to be in 2011 (it didn’t):\n                \"The individual had the largest increase in 2011 of 0.74 percent.\"",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Assignment 3</span>"
    ]
  },
  {
    "objectID": "template_A03_WI25.html#question-6-4-points",
    "href": "template_A03_WI25.html#question-6-4-points",
    "title": "Appendix C — Assignment 3",
    "section": "C.6 Question 6 (4 points)",
    "text": "C.6 Question 6 (4 points)\nSuppose 4 individuals are trying to decide which toppings to put on a shared pizza.\nThe pizza dictionary below contains the names of the individuals and list of corresponding topping preferences.\n\npizza = {\n    'Ava': [\"sausage\", \"mushroom\", \"bacon\"],\n    'Billy': [\"pepperoni\", \"bacon\", \"sausage\", \"olives\"],\n    'Carol': [\"ham\", \"pineapple\", \"olives\", \"mushroom\"],\n    'David': [\"pepperoni\", \"bacon\", \"mushroom\", \"green pepper\", \"mushroom\"]\n}\n\nIf at least 3 individuals listed a topping it will be included on the shared pizza.\nCreate a list of the toppings that at least 3 individuals included as a preference. Print only this list object.\nThere are MANY ways to accomplish this and you may do so using any techniques we have learned so long as you are using code.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Assignment 3</span>"
    ]
  },
  {
    "objectID": "template_A03_WI25.html#question-7-11-points",
    "href": "template_A03_WI25.html#question-7-11-points",
    "title": "Appendix C — Assignment 3",
    "section": "C.7 Question 7 (11 points)",
    "text": "C.7 Question 7 (11 points)\n\nC.7.1 Part a (1 point)\nCreate a list called suits that contains the following elements: “hearts”, “spades”, “diamonds”, “clubs”\nCreate a list called numbers that contain the following elements: 2, 3, 4, 5, 6, 7, 8, 9, 10, “J”, “Q”, “K”, “A”\nNo need to print any output here.\n\n\nC.7.2 Part b (3 points)\nUse a nested loop to create a nested data structure called deck that is a list of dictionaries.\nThis data structure should contain every combination of suits and numbers created in Part a.\nClarification:\n\nThis list should contain 52 dictionaries each representing a card.\nEach dictionary will have a key for suit and value.\nExample: The first object in the list is {‘suit’: ‘hearts’, ‘value’: 2}\n\nPrint only your deck object.\n\n\nC.7.3 Part c (1 point)\nImport the random module and name the alias rm. Use the sample() function from this module to sample 2 cards from the deck you created in Part b. Assign the first object to player1 and the second object to player2.\nPrint player1 and player2’s cards to prove you were successful.\n\n\nC.7.4 Part d (4 points)\nWrite a function that takes 2 input values (each input will be a dictionary containing keys: “suit” and “value”). This function should only return the card (dictionary) that is the highest number. If both numbers are the same then the function should return the string “Tie”.\nStore the output of the function as winning_card when the function is run using player1 and player2 created in Part c.\nPrint winning_card.\nClarification:\n\n2 &lt; … &lt; 10 &lt; J &lt; Q &lt; K &lt; A\nAll suits are the same: 2 of spades = 2 of diamonds\nThe word input in a function does NOT refer to “user input”. Recall, a function takes any number of input objects and returns any number of output objects.\nThis function should not print or return anything other than what was specified above (ie: the winning card or the word “Tie”).\n\n\n\nC.7.5 Part e (2 points)\nWrite a conditional statement (using the objects created above) to print one of the following statements:\n- \"Player 1 wins.\"\n- \"Player 2 wins.\"\n- \"Player 1 and Player 2 tie.\"",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Assignment 3</span>"
    ]
  },
  {
    "objectID": "template_A04_WI25.html",
    "href": "template_A04_WI25.html",
    "title": "Appendix D — Assignment 4",
    "section": "",
    "text": "Instructions",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Assignment 4</span>"
    ]
  },
  {
    "objectID": "template_A04_WI25.html#instructions",
    "href": "template_A04_WI25.html#instructions",
    "title": "Appendix D — Assignment 4",
    "section": "",
    "text": "Write your name on the assignment.\nWrite your code in the Code cells of the template provided to write solutions for the assignment. Do not open a new notebook, and work from scratch. Ensure that the solution is written neatly enough to understand and grade.\nUse Quarto to print the .ipynb file as HTML. You will need to open the command prompt, navigate to the directory containing the file, and use the command: quarto render filename.ipynb --to html. Submit the HTML file.\nYou may talk to a friend, discuss the questions and potential directions for solving them. However, you need to write your own solutions and code separately, and not as a group activity. Do not use AI to solve the problems.\nIf your document is not clean and organized, you can lose up to 2 points:\n\nMust be an HTML file rendered using Quarto.\nThere aren’t excessively long outputs of extraneous information (e.g. no printouts of unnecessary results without good reason, there aren’t long printouts of which iteration a loop is on, there aren’t long sections of commented-out code, etc.). There is no piece of unnecessary / redundant code, and no unnecessary / redundant text\nThe code follows the python style guide for naming variables, spaces, indentation, etc.\nThe code should be commented and clearly written with intuitive variable names. For example, use variable names such as number_input, factor, hours, instead of a,b,xyz, etc.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Assignment 4</span>"
    ]
  },
  {
    "objectID": "template_A04_WI25.html#sms-store-manager-10-points",
    "href": "template_A04_WI25.html#sms-store-manager-10-points",
    "title": "Appendix D — Assignment 4",
    "section": "D.1 SMS store manager (10 points)",
    "text": "D.1 SMS store manager (10 points)\nCreate a new class, named as SMS_store_manager. This class will be used to store and manage SMSs of a person’s cellphone. An object of this class, say my_inbox, will be initialized with a list of existing messages. The class attribute messages will store the existing messages during instantiation:\n\nmy_inbox(existing_messages)\n\nEach message in the list will be represented as a dictionary. A sample message is shown below:\n\n{'has_been_viewed':True, 'from_number':9348593356, time_arrived:'19:50', 'date':'2022-10-27','text_of_SMS':'Hi, how about lunch at 11?'}\n\nThe class should provide these methods:\n\nmy_inbox.add_new_arrival(from_number, time_arrived, date, text_of_SMS)\n#Makes new SMS dictionary, inserts it after other messages\n#in the store, i.e, in the list of messages. When creating this message, its\n#'has_been_viewed' status is set False.\n\nmy_inbox.message_count()\n#Returns the number of sms messages in my_inbox\n\nmy_inbox.get_unread_messages()\n#Returns unread messages, i.e., messages with 'has_been_viewed' status as False\n#Also changes the status of 'has_been_viewed' to True for all messages returned\n#While returning unread messages, the 'has_been_viewed' status must not be returned\n\nmy_inbox.delete(i)     # Delete the message at index i\nmy_inbox.clear()       # Delete all messages from inbox\n\nOnce you define the class, instantiate an object of this class, and call it harry_messages. Initialize the object with the existing messages below.\n\nexisting_messages = [{'has_been_viewed':False, 'from_number':8769038451, 'time':'09:30','date':'2022-10-27','text_of_SMS':'Hi, how about lunch at 11?'},\n                        {'has_been_viewed':False, 'from_number':9579038373, 'time':'19:30','date':'2022-10-20', 'text_of_SMS':'Your order has arrived'},\n                        {'has_been_viewed':True, 'from_number':8639568726, 'time':'10:30','date':'2022-09-30','text_of_SMS':'Card not present on American Express acc ending 54345 Sep 30 Amount $45.43 Merch: TOMATEFRESHKITCHEN.COM if unrecognized call # on Card'},\n                        {'has_been_viewed':False, 'from_number':4567653456, 'time':'11:50','date':'2022-09-15','text_of_SMS':'Hi Brooke, we are confirming your Covid vaccine appointment on Thursday at 1900 hours'},\n                        {'has_been_viewed':False, 'from_number':5646786643, 'time':'18:50','date':'2022-09-11','text_of_SMS':'Where is the party bro?'},\n                        {'has_been_viewed':False, 'from_number':9845543492, 'time':'17:10','date':'2022-09-10','text_of_SMS':'Free trial of ScanApp for 7 days for clear scanned documents, cancel anytime, $10.99 per month after 7 days'},\n                        {'has_been_viewed':True, 'from_number':8793450987, 'time':'13:20','date':'2022-08-31','text_of_SMS':'Hey Brooke, I have sent you my resume for feedback'},\n                        {'has_been_viewed':True, 'from_number':874556445, 'time':'07:20','date':'2022-08-19','text_of_SMS':'Which route are we taking for the run today?'},\n                        {'has_been_viewed':True, 'from_number':998456435, 'time':'07:20','date':'2022-07-31','text_of_SMS':'Reservation confirmed at the New York Plaza hotel for 2022-08-09 to 2022-09-14.'},\n                        {'has_been_viewed':True, 'from_number':8769038451, 'time':'07:20','date':'2022-07-25','text_of_SMS':'Lets catchup sometime, it has been so long!'},\n                        {'has_been_viewed':True, 'from_number':7739984533, 'time':'07:20','date':'2022-07-24','text_of_SMS':'Do you want to be rich today? Do you want to be your own boss? Check out beyourownboss.com. Register today for just $5!!!'},\n                        {'has_been_viewed':True, 'from_number':3443498738, 'time':'07:20','date':'2022-07-22','text_of_SMS':'Want to lose weight? Get Dr. Oz magic pills @ozpills.com. Satisfaction guaranteed.'}]\n\nUse the object harry_messages to:\n\nD.1.1 (2 points)\nAdd a new message below:\n\nfrom_number=8749373884;\ntime='07:25';\ndate='2022-10-29'\ntext_of_SMS='Hey, I want my bike back.'\n\n\n\nD.1.2 (2 points)\nCount the number of messages.\n\n\nD.1.3 (2 points)\nPrint all the unread messages.\n\n\nD.1.4 (2 points)\nTry printing all the unread messages again (Nothing should show up as all messages were read in in the previous question).\n\n\nD.1.5 (2 points)\nClear the inbox, and then count the number of messages.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Assignment 4</span>"
    ]
  },
  {
    "objectID": "template_A04_WI25.html#personalized-sms-store-manager-12-points",
    "href": "template_A04_WI25.html#personalized-sms-store-manager-12-points",
    "title": "Appendix D — Assignment 4",
    "section": "D.2 Personalized SMS store manager (12 points)",
    "text": "D.2 Personalized SMS store manager (12 points)\nInherit the class developed in the previous question to create a new class SMS_personalized_store_manager. This class will inherit all the methods of the class SMS_store_manager. However, it will have the following differences as compared to the parent class:\n\nInstantiation\n\nDuring instantiation, it will initialize two additional attributes - spam_words, and update_words, along with the messages attribute which stores existing messages. Use the lists below to initialize the attributes of the class.\nEach message will be tagged as spam, update, or personal as follows. If the message contains any word / phrase in the list spam_words, then it will be tagged as spam. If the messege is not tagged as spam, and it contains any word / phrase in the list update_words, then it will be tagged as update. If the message has not been tagged as spam or update, then it will be tagged as personal. The tag will appear as an additional key-value pair in the dictionary of each message, where the key will be tag, and the value will be 'spam', 'update' or 'personal'.\n\n\nA message after tagging may look like:\n\n{'has_been_viewed':True, 'from_number':9348593356, time_arrived:'19:50', 'date':'2022-10-27','text_of_SMS':'Hi, how about lunch at 11?', 'tag':'personal'}\n\n\n#Lists for initializing the attributes of the class\nexisting_messages = [{'has_been_viewed':False, 'from_number':8769038451, 'time':'09:30','date':'2022-10-27','text_of_SMS':'Hi, how about lunch at 11?'},\n                        {'has_been_viewed':False, 'from_number':9579038373, 'time':'19:30','date':'2022-10-20', 'text_of_SMS':'Your order has arrived'},\n                        {'has_been_viewed':True, 'from_number':8639568726, 'time':'10:30','date':'2022-09-30','text_of_SMS':'Card not present on American Express acc ending 54345 Sep 30 Amount $45.43 Merch: TOMATEFRESHKITCHEN.COM if unrecognized call # on Card'},\n                        {'has_been_viewed':False, 'from_number':4567653456, 'time':'11:50','date':'2022-09-15','text_of_SMS':'Hi Brooke, we are confirming your Covid vaccine appointment on Thursday at 1900 hours'},\n                        {'has_been_viewed':False, 'from_number':5646786643, 'time':'18:50','date':'2022-09-11','text_of_SMS':'Where is the party bro?'},\n                        {'has_been_viewed':False, 'from_number':9845543492, 'time':'17:10','date':'2022-09-10','text_of_SMS':'Free trial of ScanApp for 7 days for clear scanned documents, cancel anytime, $10.99 per month after 7 days'},\n                        {'has_been_viewed':True, 'from_number':8793450987, 'time':'13:20','date':'2022-08-31','text_of_SMS':'Hey Brooke, I have sent you my resume for feedback'},\n                        {'has_been_viewed':True, 'from_number':874556445, 'time':'07:20','date':'2022-08-19','text_of_SMS':'Which route are we taking for the run today?'},\n                        {'has_been_viewed':True, 'from_number':998456435, 'time':'07:20','date':'2022-07-31','text_of_SMS':'Reservation confirmed at the New York Plaza hotel for 2022-08-09 to 2022-09-14.'},\n                        {'has_been_viewed':True, 'from_number':8769038451, 'time':'07:20','date':'2022-07-25','text_of_SMS':'Lets catchup sometime, it has been so long!'},\n                        {'has_been_viewed':True, 'from_number':7739984533, 'time':'07:20','date':'2022-07-24','text_of_SMS':'Do you want to be rich today? Do you want to be your own boss? Check out beyourownboss.com. Register today for just $5, or book an appointment at 985-998-3452!!!'},\n                        {'has_been_viewed':True, 'from_number':3443498738, 'time':'07:20','date':'2022-07-22','text_of_SMS':'Want to lose weight? Get Dr. Oz magic pills @ozpills.com. Satisfaction guaranteed.'}]\nspam_words=['100% more', '100% free', '100% satisfied', 'Additional income', 'Be your own boss', 'Best price', 'Big bucks', 'Billion', 'Cash bonus', 'Cents on the dollar', 'Consolidate debt', 'Double your cash', 'Double your income', 'Earn extra cash', 'Earn money', 'Eliminate bad credit', 'Extra cash', 'Extra income', 'Expect to earn', 'Fast cash', 'Financial freedom', 'Free access', 'Free consultation', 'Free gift', 'Free hosting', 'Free info', 'Free investment', 'Free membership', 'Free money', 'Free preview', 'Free quote', 'Free trial', 'Full refund', 'Get out of debt', 'Get paid', 'Giveaway', 'Guaranteed', 'Increase sales', 'Increase traffic', 'Incredible deal', 'Lower rates', 'Lowest price', 'Make money', 'Million dollars', 'Miracle', 'Money back', 'Once in a lifetime', 'One time', 'Pennies a day', 'Potential earnings', 'Prize', 'Promise', 'Pure profit', 'Risk-free', 'Satisfaction guaranteed', 'Save big money', 'Save up to', 'Special promotion']\nupdate_words = ['Your order', 'appointment', 'Reservation confirmed', 'Card Not Present', 'Payment confirmation', 'Your payment']\n\n\nThe class will have two additional methods:\n\nget_unread_messages_by_category(): This method will return all the unread messages of a particular category, i.e, 'spam', 'update' or 'personal'. The method will accept the category as an argument. If no argument is specified by the user for the category, then all the unread messages must be displayed. Once unread messages are returned, they will be marked as read. While returning unread messages, the has_been_viewed status must be changed to True, but the status itself must not be returned.\nget_messages_by_category(): This method will return all the messages (both read or unread) of a particular category, i.e, 'spam', 'update' or 'personal'. The method will accept the category as an argument. If no argument is specified by the user for the category, then all the messages must be returned.\n\nThe class will modify the method add_new_arrival(self,from_number, time, date, text_of_SMS) of the parent class to tag a new message as 'spam', 'update' or 'personal'.\n\nOnce you define the class, instantiate an object of this class with the lists existing_messages, spam_words and update_words, and call it ron_messages:\n\nD.2.1 (2 points)\nAdd a new message below:\n\nfrom_number=8749373884;\ntime='07:25';\ndate='2022-10-29'\ntext_of_SMS='Hey, I want my bike back.'\n\n\n\nD.2.2 (2 points)\nPrint all the unread messages tagged as 'personal'. Use the method get_unread_messages_by_category().\n\n\nD.2.3 (2 points)\nPrint all the unread messages tagged as 'update'. Use the method get_unread_messages_by_category().\n\n\nD.2.4 (2 points)\nPrint all the unread messages. Use the method get_unread_messages().\n\n\nD.2.5 (2 points)\nPrint all the messages tagged as 'spam'. Use the method get_messages_by_category().\n\n\nD.2.6 (2 points)\nPrint all the messages tagged as 'update'. Use the method get_messages_by_category().",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Assignment 4</span>"
    ]
  },
  {
    "objectID": "template_A04_WI25.html#creating-a-new-datatype---list-of-dictionaries-8-points",
    "href": "template_A04_WI25.html#creating-a-new-datatype---list-of-dictionaries-8-points",
    "title": "Appendix D — Assignment 4",
    "section": "D.3 Creating a new datatype - list of dictionaries (8 points)",
    "text": "D.3 Creating a new datatype - list of dictionaries (8 points)\nRead filtered_movies.json with the code below.\n\nimport json\nwith open(\"filtered_movies.json\", encoding=\"utf8\") as file:\n    movie_data=json.load(file)\n\nNote: The filtered_movie.json file has been cleaned to remove all None values. You can safely sort the data without worrying about missing values.\n\nD.3.1 (4 points)\nInherit the in-built python class list() to create a new class list_dict(). This class will be used for objects that are a list of dictionaries, where all the dictionaries in the list have the same keys. Add a method in this class, named as sort_by_dict_value() that sorts the dictionaries of the list based on the values of the desired key in the dictionaries. Sorting can be done in ascending or descending order depending on the user. The key to be used for sorting and the order (ascending / descending) will be parameters to the method sort_by_dict_value(). If the sorting order is unspecified, use ascending as default.\nHints:\n\nPython lists have a built-in sort() function that sorts elements in place. To sort a list of dictionaries by a specific dictionary value, you need to set the key parameter.\nFor implementation details, refer to Sorting a List.\n\n\n\nD.3.2 (2 points)\nInstantiate an object of the class list_dict() with movie_data.\nIf the name of the object is mov, then the method sort_by_dict_value() may be called as: mov.sort_by_dict_value(movie_parameter, ascending = True)\nwhere movie_parameter can be any key of the dictionaries, using the values of which the list of dictionaries has to be sorted.\n\n\nD.3.3 (2 points)\nUse the method sort_by_dict_value() to sort the list of dictionaries in increasing order of Production Budget. What is the name of the 45th movie in the sorted list of dictionaries?\n\n\nD.3.4 (2 points)\nUse the method sort_by_dict_value() to sort the list of dictionaries in decreasing order of Worldwide Gross. What is the name of the 2nd movie in the sorted list of dictionaries?",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Assignment 4</span>"
    ]
  },
  {
    "objectID": "template_A05_WI25.html",
    "href": "template_A05_WI25.html",
    "title": "Appendix E — Assignment 5",
    "section": "",
    "text": "Instructions\nThe grader cannot grade what they cannot see! Failure to render your document after completing all questions will lead to deductions.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>E</span>  <span class='chapter-title'>Assignment 5</span>"
    ]
  },
  {
    "objectID": "template_A05_WI25.html#instructions",
    "href": "template_A05_WI25.html#instructions",
    "title": "Appendix E — Assignment 5",
    "section": "",
    "text": "Write your name on the assignment\nWrite your code in the Code cells of the template provided to write solutions for the assignment. Do not open a new qmd, and work from scratch. Ensure that the solution is written neatly enough to understand and grade.\nYou may talk to a friend, discuss the questions and potential directions for solving them. However, you need to write your own solutions and code separately, and not as a group activity. Do not use AI to solve the problems.\nThere are point deductions if your code is not clean and organized.\nOnly print what is asked for. Highly inefficient code will be deducted for because it demonstrates lack of understanding.\nRender as an HTML and submit BOTH the .qmd and HTML file.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>E</span>  <span class='chapter-title'>Assignment 5</span>"
    ]
  },
  {
    "objectID": "template_A05_WI25.html#question-1-4-points",
    "href": "template_A05_WI25.html#question-1-4-points",
    "title": "Appendix E — Assignment 5",
    "section": "E.1 Question 1 (4 points)",
    "text": "E.1 Question 1 (4 points)\n\nE.1.1 Part a\nCreate a character variable called var_string that contains any integer (coded as a character). Print var_string and print the results of using the typeof() function.\n\n\nE.1.2 Part b\nCreate a variable called var_num which is created by converting var_sting to a numeric variable.\nThen create a variable called var_even which is a Boolean variable that is TRUE if var_num is even and FALSE otherwise.\nThen create a variable called var_pos which is a Boolean variable that is TRUE if var_num is greater than 0 and FALSE otherwise.\nPrint var_num, var_even, and var_pos.\n\n\nE.1.3 Part c\nIn a single line, using only &&, ||, ! functions, have the output return TRUE if var_even and var_pos are different, and FALSE if they are the same.\nThis needs to be capable of running for any possible integer for var_num, not just the one specific case you entered.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>E</span>  <span class='chapter-title'>Assignment 5</span>"
    ]
  },
  {
    "objectID": "template_A05_WI25.html#question-2-3-points",
    "href": "template_A05_WI25.html#question-2-3-points",
    "title": "Appendix E — Assignment 5",
    "section": "E.2 Question 2 (3 points)",
    "text": "E.2 Question 2 (3 points)\nDefine a variable called var_seconds that contains any integer of your choice for the number of seconds and prints out how many corresponding minutes and seconds that is.\nExample:\n    `200 seconds is 3 minutes and 20 seconds.`\n    \nRequirements:\n\nif minutes is 1 then it should instead read 1 minute (not 1 minutes)\nif seconds is 1 then it should instead read 1 second (not 1 seconds)\n\nExample:\n    `61 seconds is 1 minute and 1 second.        \n    \nThis needs to be capable of running on any possible integer for var_seconds, not just the one specific case you entered.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>E</span>  <span class='chapter-title'>Assignment 5</span>"
    ]
  },
  {
    "objectID": "template_A05_WI25.html#question-3-6-points",
    "href": "template_A05_WI25.html#question-3-6-points",
    "title": "Appendix E — Assignment 5",
    "section": "E.3 Question 3 (6 points)",
    "text": "E.3 Question 3 (6 points)\nThe below code chunk defines 3 numbers.\n\nnum1 &lt;- 10\nnum2 &lt;- 28\nnum3 &lt;- 4\n\n\nE.3.1 Part a\nUse a single if-else if-else statement to print the largest of the 3 numbers defined above.\nNote: this must still run correctly even if you change the numbers.\n\n\nE.3.2 Part b\nUse a nested conditional statement to print the largest of the 3 numbers defined above.\nNote: this must still run correctly even if you change the numbers.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>E</span>  <span class='chapter-title'>Assignment 5</span>"
    ]
  },
  {
    "objectID": "template_A05_WI25.html#question-4-3-points",
    "href": "template_A05_WI25.html#question-4-3-points",
    "title": "Appendix E — Assignment 5",
    "section": "E.4 Question 4 (3 points)",
    "text": "E.4 Question 4 (3 points)\nWrite a program (loop) that calculates the factorial of a number.\n\nA factorial is the product of all positive integers less than or equal to a given positive integer. Example: 5! = 5 * 4 * 3 * 2 * 1\nDefine a variable to any integer value of your choice prior to creating the program.\nONLY print the final factorial of the number\n\nNote: this must still run correctly even if you change the number.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>E</span>  <span class='chapter-title'>Assignment 5</span>"
    ]
  },
  {
    "objectID": "template_A05_WI25.html#question-5-4-points",
    "href": "template_A05_WI25.html#question-5-4-points",
    "title": "Appendix E — Assignment 5",
    "section": "E.5 Question 5 (4 points)",
    "text": "E.5 Question 5 (4 points)\nDefine a variable to be a numeric value of 24.\nWrite a program (loop) that prints all the factors of a positive integer. A factor is any positive integer that divides the number and leaves no remainder. Show the output of the program with the variable you defined to be 24.\nNote: this must still run correctly even if you change the number.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>E</span>  <span class='chapter-title'>Assignment 5</span>"
    ]
  },
  {
    "objectID": "template_A05_WI25.html#question-6-4-points",
    "href": "template_A05_WI25.html#question-6-4-points",
    "title": "Appendix E — Assignment 5",
    "section": "E.6 Question 6 (4 points)",
    "text": "E.6 Question 6 (4 points)\nDefine a variable to be a numeric value of 89.\nWrite a program (loop) that identifies whether a positive integer is prime or not. A prime number is a number whose only divisors are 1 and itself.\nONLY print one of the following statements:\n\n{} is a prime number.\n{} is not a prime number.\n\ndepending on whether or not the integer is prime.\nShow the output of the program with the variable you defined to be 89.\nNote: this must still run correctly even if you change the number.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>E</span>  <span class='chapter-title'>Assignment 5</span>"
    ]
  },
  {
    "objectID": "template_A05_WI25.html#question-7-6-points",
    "href": "template_A05_WI25.html#question-7-6-points",
    "title": "Appendix E — Assignment 5",
    "section": "E.7 Question 7 (6 points)",
    "text": "E.7 Question 7 (6 points)\nDefine a variable to be a numeric value of 4000.\nWrite a program (loop) that finds the first positive integer whose square exceeds the numeric variable you defined.\nONLY print the following statement:\n\n{} squared is {}, and is the first number whose square exceeds {}.\n\nExample:\n\n64 squared is 4096, and is the first number whose square exceeds 4000.\n\nNote: this must still run correctly even if you change the initial number.\nExample:\n\n11 squared is 121, and is the first number whose square exceeds 100.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>E</span>  <span class='chapter-title'>Assignment 5</span>"
    ]
  },
  {
    "objectID": "Datasets.html",
    "href": "Datasets.html",
    "title": "Appendix F — Assignment templates and Datasets",
    "section": "",
    "text": "Assignment templates and datasets used in the book can be found here",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>F</span>  <span class='chapter-title'>Assignment templates and Datasets</span>"
    ]
  },
  {
    "objectID": "control_flow.html#practice-exercises",
    "href": "control_flow.html#practice-exercises",
    "title": "9  R: Control flow tools",
    "section": "9.8 Practice exercises",
    "text": "9.8 Practice exercises\n\n9.8.1 Practice exercise 1\nTry converting the following Python string operations into equivalent R code:\ns = \"Data Science\"\nprint(len(s))\nprint(s[5:])\nprint(s.replace(\"Data\", \"AI\"))\n\n\n9.8.2 Practice exercise 2\nDefine a character and count the number of ts.\n\nchar_vec &lt;- 'Getting a tatto is not a nice experience'\n#Initializing a variable 'count_t' which will store the number of 't's in the string\ncount_t &lt;- 0\n\n#Iterating over the entire length of the string. \n#The length of the string is given by the len() function\nfor (i in 1:nchar(char_vec)) {\n  if (substr(char_vec, i, i) == 't') {\n    count_t &lt;- count_t + 1\n  }\n}\nprint(paste(\"Number of 't's in the string = \", count_t))\n\n[1] \"Number of 't's in the string =  6\"\n\n\nUse strsplit() to implement this function.\n\n\n9.8.3 Practice exercise 3\nWrite a program that prints the number of ’the’s found in sentence\n\nsentence &lt;- \"She sells the sea shells on the sea shore during the summer\"\ncount &lt;- 0\nfor (i in 1:(nchar(sentence) - nchar(\"the\"))) {\n  if (substr(sentence, i, i + nchar(\"the\") - 1) == \"the\") {\n    count &lt;- count + 1\n  }\n}\nprint(paste(\"Number of thes in the sentence = \", count))\n\n[1] \"Number of thes in the sentence =  3\"\n\n\nUse strsplit() to implement this function\n\n\n9.8.4 Practice exercise 4\n\n9.8.4.1 Problem 1\n\nmy_num &lt;- \"0\"\n\nUsing my_num above:\n\ncheck if the number is numeric\nconvert the number to numeric\n\n\n\n9.8.4.2 Problem 2\n\nDefine a variable to be your name.\nDefine a variable to be your favorite number.\nDefine a variable to be your favorite color.\nPrint a sentence that reads: “My name is {} and my favorite number is {}”.\nStore a variable that checks if your favorite number is less than 10. Print this variable.\nStore a variable that checks if your favorite number is even. Print this variable.\nStore a variable that checks if your favorite color is “red”. Print this variable.\nConvert one of your stored Boolean to a numeric data type. What happens?\nPrint a statement that returns TRUE if your favorite number is less than 10 and favorite color is NOT red and returns FALSE otherwise.\nPrint a statement that return TRUE if your favorite number is even or less than 10.\n\n\n\n\n9.8.5 Practice exercise 5\nCreate an interactive R code block that asks the user to enter their age and ensures the input is a valid integer. The code should handle incorrect inputs and guide the user until they provide a valid response.\nRequirements - The script should continuously prompt the user until they enter a valid integer. - If the input is not an integer, the script should display an error message and ask again. - Once a valid integer is entered: - If the age is 18 or older, display: \"You are an adult.\" - If the age is less than 18, display: \"You are a minor.\"\nGuidelines & Hints - Use readline() to collect user input. - Convert the input using as.integer() and check if it returns NA for invalid inputs. - Utilize a loop to ensure the user is repeatedly prompted until they enter a valid integer. - Provide clear error messages to guide the user. - Consider handling unexpected errors using error-catching techniques such as tryCatch().\nExample User Interaction\n\n\n\nInput\nOutput\n\n\n\n\n\"abc\"\n\"Please enter a valid integer for age.\"\n\n\n\"twenty\"\n\"Please enter a valid integer for age.\"\n\n\n\"18\"\n\"You are an adult.\"\n\n\n\"17\"\n\"You are a minor.\"",
    "crumbs": [
      "R",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>R: Control flow tools</span>"
    ]
  }
]