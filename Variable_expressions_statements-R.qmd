---
title: "R: Basics"
format:
  html:
    toc: true
    self-contained: true
editor_options: 
  chunk_output_type: console
---

## Comments

Comments in R start with the `#` symbol. Everything after `#` on a line is ignored by R.

```{r}
# This is a single-line comment
x <- 10  # Assigning 10 to x
```

R does not support multi-line comments like Python's `"""`, but you can simulate them using multiple `#` symbols:


```{r}
# This is a 
# multi-line comment
```

To comment a block of code quickly in RStudio, use:

* `Ctrl + Shift + C (Windows/Linux)`
* `Cmd + Shift + C (Mac)`

## Data Types

R has several built-in data types that are crucial for data analysis and computation. The commonly used data types include:

- **Numeric** (double and integer)
- **Character** (strings)
- **Logical** (TRUE or FALSE)

The data type of a variable/constant in R can be identified using the built-in functions `class()` or `typeof()`. For example, the following variables and their values demonstrate different data types:

Numeric data in R consists of **double (default)** and **integer** types.

```{r}
# Double (default numeric type)
class(10.5)
```

```{r}
# Integer (use L suffix)
class(10L) 
```


```{r}
class(4)
```

```{r}
typeof(4)
```

```{r}
class(4.4)
```

```{r}
typeof(4.4)
```

```{r}
class(4L)
```

```{r}
typeof(4L)
```

```{r}
class('4')
```

```{r}
typeof('4')
```

```{r}
class(TRUE)
```

```{r}
typeof(FALSE)
```

## Variables

We have the following rules for a R variable name:

-   A variable name must start with a letter and can be a combination of letters, digits, period(.) and underscore(\_). If it starts with period(.), it cannot be followed by a digit.
-   A variable name cannot start with a number or underscore (\_)
-   Variable names are case-sensitive (age, Age and AGE are three different variables)
-   Reserved words cannot be used as variables (TRUE, FALSE, NULL, if...)

## Converting datatypes

Sometimes a value may have a datatype that is not suitable for using it. For example, consider the variable called `annual_income` in the code below:

```{r}
annual_income = "80000"
```

Suppose we wish to divide `annual_income` by 12 to get the monthly income. We cannot use the variable `annual_income` directly as its datatype is a string and not a number. Thus, numerical operations cannot be performed on the variable `annual_income`.

Weâ€™ll need to convert annual_income to an integer. For that we will use the Râ€™s in-built as.integer() function:

```{r}
annual_income = as.integer(annual_income)
monthly_income = annual_income/12
print(paste0("monthly income = ", monthly_income))
```

Similarly, datatypes can be converted from one type to another using in-built R functions as shown below:

```{r}
#Converting integer to character
as.character(9)
```

```{r}
#Converting character to numeric
as.numeric('9.4')
```

```{r}
#Converting logical to integer
as.numeric(FALSE)
```

Note that any non-zero numeric value, if converted to the 'logical' datatype, will return `TRUE`, while converting 0 to the 'logical' datatype will return `FALSE`. Only numeric values can be converted to the 'logical' datatype.

```{r}
# Converting integer to logical
as.logical(40)
```

```{r}
# Converting integer to logical
as.logical(0)
```

```{r}
# Converting integer to logical
as.logical(-30.1)
```

Sometimes, conversion of a value may not be possible. For example, it is not possible to convert the variable greeting defined below to a number:

```{r}
greeting = "hello"
as.numeric(greeting)
```

However, strings can be concatenated using the `paste0()` function:

```{r}
paste0("hello", " there!")
```

The following table summarizes how to convert between **Numeric**, **Character**, and **Logical** types in R:

| From â†’ To         | Conversion Function     | Example Usage                  | Notes |
|-------------------|----------------------|--------------------------------|-------|
| Numeric â†’ Character | `as.character(x)`  | `as.character(42)` â†’ `"42"`   | Converts numbers to strings |
| Numeric â†’ Logical  | `as.logical(x)`    | `as.logical(0)` â†’ `FALSE`  | `0` is `FALSE`, non-zero is `TRUE` |
| Character â†’ Numeric | `as.numeric(x)`   | `as.numeric("3.14")` â†’ `3.14` | Returns `NA` if conversion fails |
| Character â†’ Logical | `as.logical(x)`   | `as.logical("TRUE")` â†’ `TRUE` | Case-sensitive, `"TRUE"` and `"FALSE"` work |
| Logical â†’ Numeric  | `as.numeric(x)`    | `as.numeric(TRUE)` â†’ `1`    | `TRUE = 1`, `FALSE = 0` |
| Logical â†’ Character | `as.character(x)` | `as.character(FALSE)` â†’ `"FALSE"` | Converts logical values to text |

**Note:** Always verify conversions using `class()` or `typeof()` to ensure expected results.

## Displaying information

### Using `print()`

The `print()` function is the most basic way to display output.

```{r}
x <- "Hello, R!"
print(x)
```

### Using `cat()`

The `cat()` function concatenates and prints text without quotes.

```{r}
name <- "Alice"
cat("Hello,", name, "!\n")
```

* `cat()` does not return a value; it just displays output.
* `\n` adds a new line.

### Using `message()`

The `message()` function is useful for warnings or informational messages.

```{r}
message("This is a message!")
```

Unlike `print()`,` message()` does not print inside RMarkdown unless `message=TRUE` in chunk options.

### Using `sprintf()`

For formatted output, use `sprintf()`:

```{r}
name <- "Alice"
age <- 25
sprintf("My name is %s, and I am %d years old.", name, age)
```

## Taking user input

Râ€™s in-built `readline()` function can be used to accept an input from the user. For example, suppose we wish the user to input their age:

```{r}
user_name <- readline(prompt="Enter your name: ")
cat("Hello,", user_name, "!\n")
```

Since RMarkdown is non-interactive, `readline()` will not work inside a notebook. Instead, you can assign input directly for demonstration:

```{r}
user_name <- "Alice"
cat("Hello,", user_name, "!\n")
```

When using `readline()`, the input is always a *character string**, and it must be converted explicitly to numeric before performing calculations.

```{r}
age <- as.numeric(readline(prompt="Enter your age: "))
cat("You are", age, "years old.\n")
```


## Arithmetic Operations in R

R supports standard arithmetic operations for numeric values.

| Operation         | Symbol | Example   | Result |
|------------------|--------|-----------|--------|
| Addition        | `+`    | `5 + 3`   | `8`    |
| Subtraction     | `-`    | `10 - 4`  | `6`    |
| Multiplication  | `*`    | `6 * 2`   | `12`   |
| Division        | `/`    | `8 / 2`   | `4`    |
| Exponentiation  | `^` or `**` | `3^2` or `3**2` | `9`  |
| Integer Division | `%/%`  | `10 %/% 3` | `3`  |
| Modulo (Remainder) | `%%` | `10 %% 3` | `1`  |

> ðŸ’¡ **Note:**  
> - Integer division `%/%` returns the quotient without the remainder.  
> - Modulo `%%` returns the remainder after division.

---

## Logical (Boolean) Operations in R

Logical operations return `TRUE` or `FALSE`, often used for conditions.

| Operation | Symbol | Example   | Result  |
|-----------|--------|-----------|---------|
| Greater than | `>`  | `5 > 3`  | `TRUE`  |
| Less than    | `<`  | `2 < 1`  | `FALSE` |
| Greater than or equal to | `>=` | `4 >= 4` | `TRUE`  |
| Less than or equal to | `<=` | `6 <= 5` | `FALSE` |
| Equal to   | `==` | `5 == 5`  | `TRUE`  |
| Not equal to | `!=` | `3 != 2` | `TRUE`  |

> ðŸ’¡ **Note:**  
> - Always use `==` for comparison (not `=`).  
> - `!=` checks if values are different.

---

## Logical Operators in R

Logical operators are used to combine conditions.

| Operator | Symbol | Example                   | Result  |
|----------|--------|---------------------------|---------|
| AND      | `&`    | `(5 > 3) & (2 < 4)`       | `TRUE`  |
| OR       | `|`    | `(5 > 3) | (2 > 4)`       | `TRUE`  |
| NOT      | `!`    | `!(5 > 3)`                | `FALSE` |

> ðŸ’¡ **Notes:**  
> - `&` (AND) returns `TRUE` only if **both** conditions are `TRUE`.  
> - `|` (OR) returns `TRUE` if **at least one** condition is `TRUE`.  
> - `!` (NOT) negates a logical value.

